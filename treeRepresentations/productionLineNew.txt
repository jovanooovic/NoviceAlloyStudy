bNCCf9FMRZoxqobfX
aTwuoJgesSd8hXXEP M: └──  user added theme options. same as previous submission
inv1 T:     ├──  all w : Worker | w is Human or w is Robot
inv1 C:     │   └──  all w : Worker | w in Human or w in  Robot
inv2 S:     │       └──  all ws : Workstation | some w : Workers| w in ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv2 C:     │           └──  all ws : Workstation | some w : Worker | w in ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv3 S:     │               └──  all c : Component | one ws : Workstation | ws in c.worstation
inv3 C:     │                   └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 T:     │                       └──  all c : Component | some c.parts all m : Material | none c.parts
inv4 S:     │                           └──  all c : Component | some c.parts all m : Material | no c.parts
inv4 C:     │                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 B:     │                                   └──  all ws : Workstation | some w : Worker | (w in ws.workers and w in Robot) implies ws.workers in Robot
inv5 B:     │                                       └──  all ws : Workstation | some w : Worker | (w in ws.workers and w in Robot) <=> ws.workers in Robot
inv5 B:     │                                           └──  all ws : Workstation | some w : Worker | (w in ws.workers and w in Robot) implies ws.workers not in Human
inv5 U:     │                                               └──  all ws : Workstation , w : Worker | (w in ws.workers and w in Robot) implies ws.workers not in Human
inv5 O:     │                                                   └──  all ws : Workstation , w : Worker | (w in ws.workers and w in Robot) implies ws.workers in Robot all ws : Workstation , w : Worker | (w in ws.workers and w in Human) implies ws.workers in Human
inv6 U:     │                                                       └──  all c : Component | c not in c.parts
inv6 B:     │                                                           └──  all p : Product | p not in p.parts
inv6 C:     │                                                               └──  all c : Component | not c in c.^parts
inv7 T:     │                                                                   └──  all c : Component | some c.parts in Dangerous implies c in Dangerous
inv7 U:     │                                                                       └──  all c : Component | some p : Component | p in c.parts and p in Dangerous implies c in Dangerous
inv7 U:     │                                                                           └──  all c : Component | some p : Component | (p in c.parts and p in Dangerous) implies c in Dangerous
inv7 B:     │                                                                               └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 B:     │                                                                                   └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv8 C:     │                                                                                       └──  all d : Dangerous, h : Human, ws1, ws2 : Workstation | h in ws1.workers and ws2 in d.workstation implies ws1 != ws2
inv6 C:     │                                                                                           └──  all c : Component |  c not in c.^parts
inv5 O:     │                                                                                               └──  all ws : Workstation , w : Worker | (w in ws.workers and w in Robot) implies ws.workers in Robot all ws : Workstation , w : Worker | (w in ws.workers and w in Human) implies ws.workers in Human
inv1 E:     ├──   
inv1 E:     │   └──   
inv1 C:     │       └──  no Worker - (Robot + Human) Worker = Robot + Human   no Robot & Human
inv1 C:     │           └──  no Worker - (Robot + Human) Worker = Robot + Human   no Robot & Human
inv1 C:     │               └──  no Worker - (Robot + Human) Worker = Robot + Human
inv1 C:     │                   └──  Worker = Robot + Human
inv1 C:     │                       └──  no Worker - (Robot + Human)
inv1 C:     │                           └──  all x : Worker | x in Human+Robot
inv1 C:     │                               └──  all x : Worker | x in Human or x in Robot
inv1 C:     │                                   └──  no Worker - (Robot + Human) Worker = Robot + Human all x : Worker | x in Human or x in Robot
inv2 C:     │                                       └──  workers in Workstation one -> some Worker
inv2 C:     │                                           └──  workers in Workstation one -> some Worker  all ws : Workstation | some ws.workers
inv2 U:     │                                               └──  all ws : Workstation | some ws.workers
inv2 C:     │                                                   └──  all ws : Workstation | some ws.workers all w : Worker       | one workers.w
inv3 C:     │                                                       └──  all c: Component | one c.workstation
inv3 S:     │                                                           └──  wokrstation in Component one -> set Workstation
inv3 B:     │                                                               └──  workstation in Component one -> set Workstation
inv3 B:     │                                                                   └──  workstation in Component lone -> set Workstation
inv3 B:     │                                                                       └──  workstation in Component one -> set Workstation
inv3 C:     │                                                                           └──  workstation in Component set -> one Workstation
inv4 C:     │                                                                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv4 U:     │                                                                                   └──  parts.Product in Component
inv4 C:     │                                                                                       └──  parts.Product = Component
inv4 C:     │                                                                                           └──  all c : Component | some c.parts all m : Material | no m.parts  parts.Product = Component
inv5 O:     │                                                                                               └──  all ws : Workstation | ws.workers in Robot or ws.workers in Human
inv6 S:     │                                                                                                   └──  all c : Components | c not in c.parts
inv6 U:     │                                                                                                       └──  all c : Component | c not in c.parts
inv6 C:     │                                                                                                           └──  all c : Component | c not in c.^parts
inv6 O:     │                                                                                                               └──  no ^parts & iden
inv7 S:     │                                                                                                                   └──  parts^.Dangerous in Dangerous
inv7 S:     │                                                                                                                       └──  parts^.Dangerous in Dangerous some ^parts & Dangerous implies iden in Dangerous
inv7 T:     │                                                                                                                           └──  some ^parts & Dangerous implies iden in Dangerous
inv7 S:     │                                                                                                                               └──  parts^.Dangerous in Dangerous
inv7 O:     │                                                                                                                                   └──  ^parts.Dangerous in Dangerous
inv8 O:     │                                                                                                                                       └──  Dangerous.workstation.workers = Robot
inv8 O:     │                                                                                                                                           └──  Dangerous.workstation.workers in Robot
inv8 S:     │                                                                                                                                               └──  all d : Dangerous, w: Worker | w in s.worksattion.workers implies w in Robot
inv8 S:     │                                                                                                                                                   └──  all d : Dangerous, w: Worker | w in d.worksation.workers implies w in Robot
inv8 O:     │                                                                                                                                                       └──  all d : Dangerous, w: Worker | w in d.workstation.workers implies w in Robot
inv9 U:     │                                                                                                                                                           └──  all ws : (Workstation-end) | one ws.succ no end.succ no succ.begin
inv9 T:     │                                                                                                                                                               └──  not succ & iden all ws : (Workstation-end) | one ws.succ no end.succ no succ.begin
inv9 U:     │                                                                                                                                                                   └──  no succ & iden all ws : (Workstation-end) | one ws.succ no end.succ no succ.begin
inv9 B:     │                                                                                                                                                                       └──  (Workstation-end).^succ = end
inv9 U:     │                                                                                                                                                                           └──  begin.*succ = *succ.end
inv9 B:     │                                                                                                                                                                               └──  begin.^succ = ^succ.end
inv9 U:     │                                                                                                                                                                                   └──  begin.*succ = *succ.end no iden & succ
inv9 B:     │                                                                                                                                                                                       └──  end in begin.^succ begin in ^succ.end succ in Workstation lone -> lone Workstation no iden & succ
inv9 U:     │                                                                                                                                                                                           └──  end in begin.*succ begin in *succ.end succ in Workstation lone -> lone Workstation no iden & succ
inv9 U:     │                                                                                                                                                                                               └──  end in begin.*succ begin in *succ.end succ in Workstation lone -> lone Workstation no iden & succ
inv9 O:     │                                                                                                                                                                                                   └──  end in begin.*succ begin in *succ.end succ in (Workstation-begin) one -> lone Workstation no iden & succ
inv9 B:     │                                                                                                                                                                                                       └──  end in begin.*succ begin in *succ.end succ in (Workstation-begin) one -> one (Workstation-end) no iden & succ
inv9 B:     │                                                                                                                                                                                                           └──  end in begin.*succ begin in *succ.end succ in (Workstation-begin) lone -> one Workstation no iden & succ
inv9 U:     │                                                                                                                                                                                                               └──  end in begin.*succ begin in *succ.end succ in (Workstation-end) lone -> one Workstation no iden & succ
inv9 U:     │                                                                                                                                                                                                                   └──  end in begin.*succ begin in *succ.end succ in (Workstation-end) lone -> one Workstation succ in Workstation one -> lone (Workstation-begin) no iden & succ
inv9 C:     │                                                                                                                                                                                                                       └──  end in begin.*succ begin in *succ.end succ in (Workstation-end) lone -> one Workstation succ in Workstation one -> lone (Workstation-begin) no iden & ^succ
inv9 U:     │                                                                                                                                                                                                                           └──  end in begin.*succ begin in *succ.end succ in (Workstation-end) lone -> one Workstation succ in Workstation one -> lone (Workstation-begin)
inv10 B:    │                                                                                                                                                                                                                               └──  all comp : Component | comp.parts not in comp.workstation.^succ
inv10 B:    │                                                                                                                                                                                                                                   └──  all comp : Component | (comp.parts).workstation not in comp.workstation.^succ
inv10 B:    │                                                                                                                                                                                                                                       └──  all comp : Component | (Component &comp.parts).workstation not in comp.workstation.^succ
inv10 O:    │                                                                                                                                                                                                                                           └──  all comp : Component | (Component &comp.parts).workstation in (^succ).comp.workstation
inv10 C:    │                                                                                                                                                                                                                                               └──  all comp : Component | (Component &comp.parts).workstation in (^succ).(comp.workstation)
inv1 C:     ├──  all x: Worker| x in Human or x in Robot
inv5 C:     │   └──  all x:Human, y:Robot | no workers.x & workers.y
inv6 C:     │       └──  all x: Component | x not in x.^parts
inv7 O:     │           └──  all x: Component | some (x.^parts & Dangerous) implies x in Dangerous
inv8 B:     │               └──  all x:Component | x in Dangerous implies x.workstation.workers not in Human
inv8 B:     │                   └──  all x:Component | x in Dangerous implies x.workstation.workers not in Human
inv9 U:     │                       └──  all x,y: Workstation | no succ.x and  no y.succ implies x = begin and y = end
inv9 B:     │                           └──  all x,y: Workstation | no succ.x and  no y.succ implies x = begin and y = end and x != y
inv9 B:     │                               └──  all x: Workstation | x not in x.^succ all x,y: Workstation | no succ.x and no y.succ
inv9 B:     │                                   └──  all x: Workstation | x not in x.^succ all x,y: Workstation | no succ.x and no y.succ implies x != y
inv9 B:     │                                       └──  all x: Workstation | x not in x.^succ all x,y: Workstation | no succ.x and no y.succ implies x != y no begin & end
inv9 B:     │                                           └──  all x: Workstation | x not in x.^succ all x,y: Workstation | no succ.x and no y.succ implies x != y no (begin & end)
inv9 B:     │                                               └──  no (begin & end)
inv9 S:     │                                                   └──  all x: Workstation | x in begin or x in end or some x.succ)
inv9 S:     │                                                       └──  all x: Workstation | x in begin or x in end or some x.succ)
inv9 U:     │                                                           └──  all x: Workstation | x in begin or x in end or some x.succ
inv9 B:     │                                                               └──  all x: Workstation | x not in x.^succ all x,y: Workstation | no succ.x and no y.succ implies x != y all x: Workstation | x in begin implies x not in end all x: Workstation | x in end implies x not in begin
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 S:     │   └──  all ws:Workstation | some ws.workers all w : Worker | one ws.workstation | ws.w
inv2 S:     │       └──  all ws:Workstation | some ws.workers all w : Worker | one ws.workstation |w in ws.workers
inv2 T:     │           └──  all ws:Workstation | some ws.workers all w : Worker | one ws:workstation | w in ws.workers
inv2 C:     │               └──  all ws:Workstation | some ws.workers all w : Worker | one ws:Workstation | w in ws.workers
inv3 C:     │                   └──  all c : Component | one ws:Workstation | ws in c.workstation
inv4 S:     │                       └──  all c : Component, m : Material | some c.parts and no n.parts
inv4 U:     │                           └──  all c : Component, m : Material | some c.parts and no m.parts
inv4 C:     │                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 T:     │                                   └──  all ws : Workstation | no (Human & Robot) in ws.workers
inv5 O:     │                                       └──  all ws : Workstation, w : Human + Robot | w not in ws.workers
inv5 B:     │                                           └──  all ws : Workstation | (Human not in ws.workers and Robot in ws.workers) or (Human in ws.workers and Robot not in ws.workers)
inv5 B:     │                                               └──  all ws : Workstation | (Human not in ws.workers iff Robot in ws.workers) and (Human in ws.workers iff Robot not in ws.workers)
inv5 B:     │                                                   └──  all ws : Workstation | (Human not in ws.workers iff Robot not in ws.workers)
inv6 C:     │                                                       └──  all c : Component | c not in c.^parts
inv7 O:     │                                                           └──  all c : Component, d : Dangerous | d in c.parts implies c in d
inv7 T:     │                                                               └──  all c : Component, d : Dangerous | d in c.^parts implies c + d
inv7 T:     │                                                                   └──  all c : Component, d : Dangerous | d in c.^parts implies c & d
inv7 T:     │                                                                       └──  all c : Component, d : Dangerous | d in c.^parts implies Component & c & Dangerous
inv7 T:     │                                                                           └──  all c : Component | Dangerous in c.^parts implies Component & c & Dangerous
inv7 B:     │                                                                               └──  all c : Component | Dangerous in c.^parts implies some Component & c & Dangerous
inv7 B:     │                                                                                   └──  all c : Component | Dangerous in c.^parts implies some (Component & c & Dangerous)
inv7 B:     │                                                                                       └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv6 C:     │                                                                                           └──  all c : Component | c not in c.^parts
inv7 B:     │                                                                                               └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                   └──  all c : Component | Dangerous in c.^parts implies some (Component & c & Dangerous) all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 O:     │                                                                                                       └──  all p1 : Dangerous, p2 : parts.p1 | p2 in Dangerous
inv7 O:     │                                                                                                           └──  all d : Dangerous, p : parts.d| p in Dangerous
inv8 S:     │                                                                                                               └──  all d : Dangerous, ws : Workstation , h : Human | ws in c.workstation implies h not in ws.workstation
inv8 U:     │                                                                                                                   └──  all d : Dangerous, ws : Workstation , h : Human | ws in d.workstation implies h not in ws.workstation
inv8 B:     │                                                                                                                       └──  all d : Dangerous, ws : Workstation , h : Human | ws in d.workstation and h not in ws.workstation
inv8 C:     │                                                                                                                           └──  all c: Dangerous, ws : c.workstation | no (ws.workers & Human)
inv8 C:     │                                                                                                                               └──  all d: Dangerous, ws : d.workstation | no (ws.workers & Human)
inv10 U:    │                                                                                                                                   └──  all c : Component , ws:Workstation | c.parts in ws implies c.parts in c
inv1 U:     ├──  all w : Worker | w in Human implies w not in Robot and w in Robot implies w not in Human
s6xSabsmbsp29qMcP M:     │   └──  user added theme options. same as previous submission
inv1 C:     │       └──  Worker = Human + Robot
inv2 U:     │           └──  all w : Worker | some ws : Workstation | w in ws.workers
inv2 U:     │               └──  all ws : Workstation | some w : Worker | w in ws.workers
inv2 U:     │                   └──  all ws : Workstation | some ws.workers
inv2 C:     │                       └──  all ws : Workstation | some ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv3 C:     │                           └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 U:     │                               └──  all c : Component | some c.parts
inv4 C:     │                                   └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 C:     │                                       └──  all ws : Workstation | no (ws.workers & Robot) or no (ws.workers & Human)
inv6 U:     │                                           └──  all c : Component | c not in c.parts
inv6 C:     │                                               └──  all c : Component | c not in c.^parts
inv7 B:     │                                                   └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                       └──  all c : Component & Dangerous | all w : c.workstation | no (w.workers & Human)
NQoPeNBgRYSLtrRj2 M:     │                                                           └──  user added theme options. same as previous submission
inv1 U:     ├──  no (Human&Robot)
inv1 O:     │   └──  Human&Robot not in Robot
inv1 O:     │       └──  Human&Robot not in Worker
inv1 T:     │           └──  all w:Worker | no (w in Human and w in Robot)
inv1 T:     │               └──  all w:Worker | no ((w in Human) and (w in Robot))
inv1 B:     │                   └──  all w:Worker | one (w&Human+Robot)
inv1 C:     │                       └──  Worker = Human + Robot
inv2 U:     │                           └──  all W:Workstation | some W.workers all w:Worker | one (Workstation.workers & w)
inv2 C:     │                               └──  all W:Workstation | some W.workers all w:Worker | one W:Workstation | w in W.workers
inv3 C:     │                                   └──  all c:Component | one c.workstation
inv4 S:     │                                       └──  all m:Material | no m.parts all c:Components | some c.parts
inv4 C:     │                                           └──  all m:Material | no m.parts all c:Component | some c.parts
inv5 O:     │                                               └──  all W:Workstation | (no W.workers-Human) or (no W.workers-Robot)
inv6 U:     │                                                   └──  no c:Component | c in c.parts
inv6 T:     │                                                       └──  no c:Component | c in c^parts
inv6 S:     │                                                           └──  no c:Component | c in c.parts^
inv6 C:     │                                                               └──  no c:Component | c in c.^parts
inv7 S:     │                                                                   └──  all c:Dangerous | parts^.c in Dangerous
inv7 T:     │                                                                       └──  all c:Dangerous | parts.^c in Dangerous
inv7 S:     │                                                                           └──  all c:Dangerous | parts^.c in Dangerous
inv6 C:     │                                                                               └──  no c:Component | c in c.^parts
inv7 O:     │                                                                                   └──  all c:Dangerous | ^parts.c in Dangerous
inv8 S:     │                                                                                       └──  all c:Dangerous | no h:Human in c.wokstation.workers
inv8 S:     │                                                                                           └──  all c:Dangerous | no h:Human | h not in c.wokstation.workers
inv8 S:     │                                                                                               └──  all c:Component&Dangerous | no h:Human | h not in c.wokstation.workers
inv8 S:     │                                                                                                   └──  all c:Component&Dangerous | no h:Human | h not in c.wokstation.workers
inv8 C:     │                                                                                                       └──  all c:Component&Dangerous | no c.workstation.workers&Human
inv9 S:     │                                                                                                           └──  no End.succ no W:Workstation | Begin in W.succ all W:Workstation-End | one W.succ all W:Workstation-Begin | one W2:Workstation-Begin-W | W in W2.succ
inv9 B:     │                                                                                                               └──  no end.succ no W:Workstation | begin in W.succ all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 B:     │                                                                                                                   └──  no end.succ no W:Workstation | begin in W.succ all W:Workstation-end | one W.succ  all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 B:     │                                                                                                                       └──  no end.succ no W:Workstation | begin in W.succ all W:Workstation-end | one W.succ  all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 O:     │                                                                                                                           └──  no end.succ no W:Workstation | begin in W.succ all W:Workstation-end | one W.succ no begin&end  all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 O:     │                                                                                                                               └──  no end.succ no begin&end no W:Workstation | begin in W.succ all W:Workstation-end | one W.succ  all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 B:     │                                                                                                                                   └──  no end.succ no W:Workstation | W in W.succ no W:Workstation | begin in W.succ  all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin-W | W in W2.succ
inv9 B:     │                                                                                                                                       └──  no end.succ no W:Workstation | W in W.succ no W:Workstation | begin in W.succ  all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin | W in W2.succ
inv9 O:     │                                                                                                                                           └──  no end.succ no W:Workstation | W in W.^succ no W:Workstation | begin in W.succ  all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin | W in W2.succ
inv9 O:     │                                                                                                                                               └──  no end.succ no W:Workstation | W in W.^succ no W:Workstation | begin in W.succ  all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin | W in W2.succ end not in begin.succ
inv10 S:    │                                                                                                                                                   └──  all c:Components, p:c.parts | c.workstation in p.workstation.^succ
inv9 O:     │                                                                                                                                                       └──  no end.succ no W:Workstation | W in W.^succ no W:Workstation | begin in W.succ  all W:Workstation-end | one W.succ all W:Workstation-begin | one W2:Workstation-begin | W in W2.succ end not in begin.succ
inv10 B:    │                                                                                                                                                           └──  all c:Component, p:c.parts | c.workstation in p.workstation.^succ
inv10 B:    │                                                                                                                                                               └──  all c:Component, p:c.parts | c.workstation in p.workstation.^succ
inv1 U:     ├──  all w : Worker | w in Human implies w not in Robot
inv1 B:     │   └──  all w : Workstation | Robot in w.workers implies Human not in w.workers
inv1 B:     │       └──  all w : Workstation | w.workers in Robot or w.workers in Human
inv1 B:     │           └──  all h : Human, r : Robot, w : Workstation | r in w.workers implies h not in w.workers
inv1 B:     │               └──  all h : Human, r : Robot, w : Workstation | r in w.workers implies no Human&w.workers
inv1 B:     │                   └──  all w : Workstation | (w.workers in Robot ) or (w.workers in Human)
inv1 U:     │                       └──  all w : Workstation | (w.workers in Robot ) implies no (w.workers & Human)
inv1 B:     │                           └──  all w : Workstation | (w.workers in Robot ) implies (no w.workers & Human) and (some w.workers)
inv1 U:     │                               └──  all w : Workstation | (w.workers in Robot ) and (some w.workers) implies (no w.workers & Human)
inv1 B:     │                                   └──  all r : Robot, h : Human | no (workers.r & workers.h)
inv1 B:     │                                       └──  all r : Robot, h : Human | no (workers.r & workers.h)
inv1 C:     │                                           └──  all w : Worker | w in Robot or w in Human
inv2 U:     │                                               └──  all w : Workstation | some t : Worker | t in w.workers
inv2 U:     │                                                   └──  all w : Workstation | some t : Worker | t in w.workers and w in workers.t
inv2 B:     │                                                       └──  all w : Workstation | all t : Worker | t in w.workers
inv2 B:     │                                                           └──  all w : Workstation | all t : Worker | t in w.workers and w in workers.t
aZuy6QwpFz4xhALqb M:     │                                                               └──  user added theme options. same as previous submission
inv1 S:     ├──  all w : Works | w in Robot or w in Human
inv1 C:     │   └──  all w : Worker | w in Robot or w in Human
inv2 O:     │       └──  all s : Workstation | some w : Worker | w in s.workers && one workers.s
inv2 O:     │           └──  all s : Workstation | some w : Worker | s.workers in s && one workers.s
inv2 S:     │               └──  (all s : Workstation | some w : Worker | w in s.workers) and (all w : Worker | one ws : Workstation| w in s.workers)
inv2 C:     │                   └──  (all s : Workstation | some w : Worker | w in s.workers) and (all w : Worker | one ws : Workstation| w in ws.workers)
inv3 C:     │                       └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 S:     │                           └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p Product | m in p.parts )
inv4 S:     │                               └──  all c : Component | some p : Product | c in p.parts and all m : Material | no p Product | m in p.parts
inv4 S:     │                                   └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p Product | m in p.parts)
inv3 C:     │                                       └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 B:     │                                           └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p : Product | m in p.parts)
inv4 C:     │                                               └──  (all c : Component | some p : Product | c->p in parts) and (all m : Material | no p : Product | m->p in parts)
inv4 B:     │                                                   └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p : Product | m in p.parts)
inv4 B:     │                                                       └──  (all c : Component | some p : Product | p.parts in c) and (all m : Material | no p : Product | p.parts in m)
inv4 B:     │                                                           └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p : Product | m in p.parts)
inv5 T:     │                                                               └──  all  ws: Workstation | ws.workers & Human implies not ws.workers & Robot
inv4 T:     │                                                                   └──  no m : Material | m.parts and all c : Componente | some m.parts
inv4 T:     │                                                                       └──  (no m : Material | m.parts) and (all c : Componente | some m.parts)
inv5 T:     │                                                                           └──  all w : Workstation | (w.workers & Human) -> w.workers & Robot = {
inv5 T:     │                                                                               └──  all w : Workstation | (w.workers & Human) -> w.workers & Robot = {
aAJdsDCp5DdyCvYa4 M:     │                                                                                   ├──  user added theme options. same as previous submission
inv4 S:     │                                                                                   └──  (all c : Componente | card(c.parts)>1
inv4 S:     │                                                                                       └──  (all c : Componente | card(c.parts)>1) and (all m : Material | card(c.parts)=0)
inv4 S:     │                                                                                           └──  (all c : Componente | card(c.parts)>1) and (all m : Material | card(c.parts)=0)
inv4 S:     │                                                                                               └──  (all c : Componente | card(c.parts)>1) and (all m : Material | card(c.parts)=0)
inv4 S:     │                                                                                                   └──  (all c : Component | card(c.parts)>1) and (all m : Material | card(c.parts)=0)
inv4 S:     │                                                                                                       └──  (all c : Component | card(c.parts)>1) and (all m : Material | card(m.parts)=0)
inv4 S:     │                                                                                                           └──  (all c : Component | some p : Product | p in c.parts) and (all m : Material | no p : Product | p in c.parts)
inv4 C:     │                                                                                                               └──  (all c : Component | some p : Product | p in c.parts) and (all m : Material | no p : Product | p in m.parts)
inv1 U:     ├──  lone (Human & Robot)
inv1 C:     │   └──  all w : Worker | w in Human or w in Robot
inv2 O:     │       └──  all ws : Workstation | some w : Worker | w in ws all w : Worker | one ws : Workstation | w in ws.workers
inv2 O:     │           └──  all ws : Workstation | some w : Worker | w in ws
inv2 U:     │               └──  all ws : Workstation | some Worker
inv2 T:     │                   └──  all ws : Workstation | some ws.workers all w : Worker | one ws : workstation | w in ws.workers
inv2 C:     │                       └──  all ws : Workstation | some ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv3 C:     │                           └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 U:     │                               └──  all p : Product | p in Material implies no p.parts
inv4 C:     │                                   └──  all p : Product | p in Material implies no p.parts all p : Product | p in Component implies some p.parts
inv5 O:     │                                       └──  all ws : Workstation | ws.workers in Robot or ws.workers in Human
inv6 C:     │                                           └──  all c : Component | c not in c.^parts
inv6 U:     │                                               └──  all c : Component | c not in c.parts
inv6 C:     │                                                   └──  all c : Component | c not in c.^parts
inv7 C:     │                                                       └──  all c : Component, p : c.parts | p in Dangerous implies c in Dangerous
inv8 B:     │                                                           └──  all c : Component | c in Dangerous implies c.workstation.workers not in Human
9vv4SSHFFKrtfq3x3 M:     │                                                               ├──  user added theme options. same as previous submission
inv7 C:     │                                                               │   ├──  all c : Component, p : c.parts | p in Dangerous implies c in Dangerous
inv7 O:     │                                                               │   │   └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv7 C:     │                                                               │   └──  all c : Component, p : c.parts | p in Dangerous implies c in Dangerous
inv1 C:     │                                                               └──  all w : Worker | w in Human or w in Robot
inv2 C:     │                                                                   └──  all ws : Workstation | some ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv3 C:     │                                                                       └──  all c : Component | one ws : Workstation | ws in c.workstation
inv5 O:     │                                                                           └──  all ws : Workstation | ws.workers in Robot or ws.workers in Human
inv1 S:     ├──  Workers = Human or Robots
inv1 S:     │   └──  Worker = Human or Robots
inv1 T:     │       └──  Worker = Human or Robot
inv1 C:     │           └──  Worker = Human + Robot
inv2 T:     │               └──  all w: Workstation | some w.workers all w: Worker | one works: workstation | w in works.workers
inv2 C:     │                   └──  all w: Workstation | some w.workers all w1: Worker | one works: Workstation | w1 in works.workers
inv3 C:     │                       └──  all c: Component | one w: Workstation | w in c.workstation
inv4 B:     │                           └──  all c: Component | c in Product.parts all m: Material | m not in Product.parts
inv4 T:     │                               └──  all c: Component | c in Product.parts all m: Material |no m in Product.parts
inv4 B:     │                                   └──  all c: Component | c in c.parts all m: Material | m not in m.parts
inv4 O:     │                                       └──  all c: Component | c in c.parts all m: Material | no m.parts
inv4 C:     │                                           └──  all c: Component | some c.parts all m: Material | no m.parts
inv5 B:     │                                               └──  all w: Worker | w in Robot or w in Human
inv5 S:     │                                                   └──  all w: Workstation | w.worker = Human or w.worker = Robot
inv5 O:     │                                                       └──  all w: Workstation | w.workers = Human or w.workers = Robot
inv5 T:     │                                                           └──  all w: Workstation | w.workers & Human or w.workers & Robot
inv5 C:     │                                                               └──  all w: Workstation | no(w.workers & Human) or no(w.workers & Robot)
inv5 T:     │                                                                   └──  all w: Workstation | (w.workers & Human) or (w.workers & Robot)
inv5 T:     │                                                                       └──  all w: Workstation | no(w.workers & Human) or (w.workers & Robot)
inv5 C:     │                                                                           └──  all w: Workstation | no(w.workers & Human) or no(w.workers & Robot)
inv5 T:     │                                                                               └──  all w: Workstation | no(w.workers and Human) or no(w.workers & Robot)
inv6 O:     │                                                                                   └──  all c: Component | no c.parts
inv6 B:     │                                                                                       └──  all c: Component | c in c.^parts
inv6 T:     │                                                                                           └──  all c: Component | no c in c.^parts
inv6 C:     │                                                                                               └──  all c: Component | not c in c.^parts
inv7 B:     │                                                                                                   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 U:     │                                                                                                       └──  all c: Component & Dangerous | all x: c.workstation | no ( x & Human)
inv8 C:     │                                                                                                           └──  all c: Component & Dangerous | all x: c.workstation | no ( x.workers & Human)
inv7 T:     │                                                                                                               └──  all c : Component | c.parts & Dangerous => c in Dangerous
inv7 T:     │                                                                                                                   └──  all c : Component | (c.parts & Dangerous) => c in Dangerous
inv7 U:     │                                                                                                                       └──  all c : Component | (c.parts & Dangerous) in Dangerous
inv7 U:     │                                                                                                                           └──  all c : Component | (c.^parts & Dangerous) in Dangerous
inv7 T:     │                                                                                                                               └──  all c : Component | (c.^parts & Dangerous) implies c in Dangerous
inv7 S:     │                                                                                                                                   └──  all c : Component | (c.^parts & Dangerous) implies all c in Dangerous
inv7 T:     │                                                                                                                                       └──  all c : Component | (c.^parts & Dangerous) implies c in Dangerous
inv7 T:     │                                                                                                                                           └──  all c : Component | (c.parts & Dangerous) implies c in Dangerous
inv7 T:     │                                                                                                                                               └──  all c : Component | (c.parts & Dangerous) => c in Dangerous
inv7 B:     │                                                                                                                                                   └──  all c : Component | c.parts in Dangerous => c in Dangerous
inv7 B:     │                                                                                                                                                       └──  all c : Component | c.parts in Dangerous implies c in Dangerous
inv7 B:     │                                                                                                                                                           └──  all c : Component | c.^parts in Dangerous implies c in Dangerous
inv7 T:     │                                                                                                                                                               └──  all c : Component | no (c.parts & ~Dangerous) && c.parts != {
inv7 B:     │                                                                                                                                                                   └──  all c : Component | c.^parts in Dangerous implies c in Dangerous
inv7 B:     │                                                                                                                                                                       └──  all c : Component | c.parts in Dangerous implies c in Dangerous
inv7 B:     │                                                                                                                                                                           └──  all c : Component | c.parts in Dangerous implies c + c.parts in Dangerous
inv7 B:     │                                                                                                                                                                               └──  all c : Component | c.parts in Dangerous implies c + c.^parts in Dangerous
inv7 B:     │                                                                                                                                                                                   └──  all c : Component | c.^parts in Dangerous implies c + c.^parts in Dangerous
inv7 U:     │                                                                                                                                                                                       └──  all c : Component | c.*parts in Dangerous implies c + c.^parts in Dangerous
inv7 U:     │                                                                                                                                                                                           └──  all c : Component | c.*parts in Dangerous implies c + c.*parts in Dangerous
yNBJ9gnzgQEhWsCGN M:     │                                                                                                                                                                                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 O:     │   └──  all ws : Workstation | some ws.workers all w : Worker | one succ.w
inv2 C:     │       └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv3 C:     │           └──  all c : Component | one c.workstation
inv4 S:     │               └──  all c : Component | some c.parts all m : material | no m.parts
inv4 C:     │                   └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 C:     │                       └──  all ws : Workstation, h : Human, r : Robot | h in ws.workers implies r not in ws.workers
inv6 O:     │                           └──  all c : Component | no c.^(parts)
inv6 S:     │                               └──  all p : Product | p in Component implies no c.^(parts)
inv6 O:     │                                   └──  all p : Product | p in Component implies no p.^(parts)
inv6 O:     │                                       └──  all c : Component | no parts.c
inv6 U:     │                                           └──  all c : Component | c not in c.parts
inv6 C:     │                                               └──  all c : Component | c not in c.^(parts)
inv7 T:     │                                                   └──  all c : Component, d : Dangerous | d in c.parts implies c.^(parts)
inv7 B:     │                                                       └──  all c : Component, d : Dangerous | d in c.parts implies c.^(parts) in Dangerous
inv7 B:     │                                                           └──  all c : Component, d : Dangerous | d in c.^(parts) implies c.^(parts) in Dangerous
inv7 O:     │                                                               └──  all c : Component, d : Dangerous | d in c.^(parts) implies c in Dangerous
inv7 O:     │                                                                   └──  all c : Component, d : Dangerous | d in c.^(parts) implies c in Dangerous
inv8 O:     │                                                                       └──  all c : Component | c in Dangerous implies c.workstation.workers in Robot
inv8 B:     │                                                                           └──  all c : Component, h : Human | c in Dangerous implies c.workstation.workers not in Human
inv8 O:     │                                                                               └──  all c : Component | c in Dangerous implies c.workstation.workers in Robot
inv9 S:     │                                                                                   └──  all ws : Workstations | one b : Begin | no succ.b all ws : Workstations | one e : end | no e.succ
inv9 S:     │                                                                                       └──  all ws : Workstation | one b : Begin | no succ.b all ws : Workstation | one e : end | no e.^(succ)
inv9 U:     │                                                                                           └──  all ws : Workstation | one b : begin | no succ.b all ws : Workstation | one e : end | no e.^(succ)
inv9 B:     │                                                                                               └──  all ws : Workstation | one succ.begin all ws : Workstation | no end.^(succ)
inv9 T:     │                                                                                                   └──  all ws : Workstation | one ws.begin all ws : Workstation | no ws.^(succ)
inv9 B:     │                                                                                                       └──  one succ.begin && no end.^(succ)
inv9 B:     │                                                                                                           └──  one succ.begin && no end.^(succ) && begin != end
GLTqXoyAMudiv9i8M M:     │                                                                                                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 U:     │   └──  all ws : Workstation | some w : ws.workers | all w2 : Worker | w2 in Workstation.workers
inv2 U:     │       └──  all ws : Workstation, w : Worker | some ws.workers and w in Workstation.workers
inv3 S:     │           └──  all c : Component | one w : WorkStation | c.workstation.w
inv3 T:     │               └──  all c : Component | one w : Workstation | c.workstation.w
inv3 C:     │                   └──  all c : Component | one w : Workstation | w in c.workstation
inv4 S:     │                       └──  all p : Product | (t in Component implies some p.parts) and (t in Parts implies no p.parts)
inv4 S:     │                           └──  all p : Product | (p in Component implies some p.parts) and (p in Parts implies no p.parts)
inv4 C:     │                               └──  all p : Product | (p in Component implies some p.parts) and (p in Material implies no p.parts)
inv4 U:     │                                   └──  all p : Product | (p in Component implies some p.parts) or (p in Material implies no p.parts)
inv4 C:     │                                       └──  all p : Product | (p in Component implies some p.parts) and (p in Material implies no p.parts)
inv5 U:     │                                           └──  all wh : Workstation | #(wh.workers & Human & Robot) = 0
inv5 S:     │                                               └──  all wh : Workstation, w1 : wh.workers, w2 : wh.workrs | (w1 in Human and w2 in Human) or (w1 in Robot and w2 in Robot)
inv5 O:     │                                                   └──  all wh : Workstation, w1 : wh.workers, w2 : wh.workers | (w1 in Human and w2 in Human) or (w1 in Robot and w2 in Robot)
inv1 C:     ├──  all w: Worker | w in Human + Robot
inv2 O:     │   └──  all w: Worker | #w.^workstation = 1 all ws: Workstation | #ws.workers > 0
inv2 E:     │       └──   
inv3 C:     │           └──  all c: Component | #c.workstation = 1
inv4 C:     │               └──  all c: Component | #c.parts > 0 all m: Material | #m.parts = 0
inv5 U:     │                   └──  all ws: Workstation | Human in ws.workers => Robot not in ws.workers and Robot in ws.workers => Human not in ws.workers
inv5 E:     │                       └──   
inv5 E:     │                           └──   
inv8 S:     │                               └──  all ws: Workstation | Dangerous in ws.^components => Human not in ws.workers
inv9 T:     │                                   └──  one begin all ws: Workstation | (ws.succ = {
inv10 S:    │                                       └──  all c: Component | all p: c.parts | p in c.^workstation.^components
inv10 T:    │                                           └──  all c: Component | all p: c.parts | p in c.^workstation.^Component
inv2 T:     │                                               └──  all w: Workstation, t: Worker | some t.workstation and one t.w
inv1 C:     ├──  all w: Worker | (w in Human || w in Robot)
huoheGbCHRJ2Bc8jS M:     │   └──  user added theme options. same as previous submission
inv2 S:     │       └──  all w: Workstation |
inv6 U:     │           └──  all c: Component | c not in c.parts
inv4 S:     │               └──  no Material.parts && some Components.parts
inv4 B:     │                   └──  no Material.parts && some Component.parts
inv4 B:     │                       └──  no Material.parts some Component.parts
inv3 B:     │                           └──  some Component.workstation
inv2 B:     │                               └──  (all w: Workstation | some r: Worker | r in w.workers) && one workers.Worker
dcZrT8JJmXPbxYYAr M:     │                                   └──  user added theme options. same as previous submission
inv1 C:     │                                       └──  all w: Worker | (w in Human || w in Robot)
inv2 B:     │                                           └──  (all w: Workstation | some r: Worker | r in w.workers) && one workers.Worker
inv2 C:     │                                               └──  (all w: Workstation | some r: Worker | r in w.workers) && (all w: Worker | one workers.w)
inv3 C:     │                                                   └──  all c: Component | one c.workstation
inv4 B:     │                                                       └──  no Material.parts some Component.parts
inv4 C:     │                                                           └──  (all m: Material | no m.parts) && (all c: Component | some c.parts)
inv5 S:     │                                                               └──  (all w: Workstation | all x, y: w.workers | (x in Robot && y in Robot) || (x in Human && y in Human)
inv5 O:     │                                                                   └──  all w: Workstation | all x, y: w.workers | (x in Robot && y in Robot) || (x in Human && y in Human)
inv5 O:     │                                                                       └──  all w: Workstation | w.workers in Robot || w.workers in Human
inv6 U:     │                                                                           └──  all c: Component | c not in c.parts
inv6 U:     │                                                                               └──  all c: Component | all x: c.parts | x!=c
inv7 C:     │                                                                                   └──  all c: Component | all x: c.parts | x in Dangerous => c in Dangerous
inv8 O:     │                                                                                       └──  all c: Component | c in Dangerous => (all w: (c.workstation).workers | w in Robot)
inv6 T:     │                                                                                           └──  all c: Component | none c & c.parts
inv6 U:     │                                                                                               └──  all c: Component | no c & c.parts
inv6 C:     │                                                                                                   └──  all c: Component | not c in c.^parts
inv9 E:     │                                                                                                       └──   
Y3uuqWzqh2DgWqkzm M:     │                                                                                                           └──  user added theme options. same as previous submission
inv9 T:     │                                                                                                               └──  all w: Workstation | one begin in w && one end in w
inv9 T:     │                                                                                                                   └──  (all w: Workstation | one begin in w) && (all w: Workstation | one end in w)
inv9 S:     │                                                                                                                       └──  None
inv9 T:     │                                                                                                                           └──  (all w: Workstation | one end in w.succs) && (all w: Workstation | one end in w)
inv9 T:     │                                                                                                                               └──  (all w: Workstation | one end in w.succs)
inv9 S:     │                                                                                                                                   └──  (all w: Workstation | one x: Workstation | x in w.succs && x in end)
inv9 B:     │                                                                                                                                       └──  (all w: Workstation | one x: Workstation | x in w.succ && x in end)
inv9 B:     │                                                                                                                                           └──  (all w: Workstation | one x: Workstation | x in w.succ && x in end) && (all w: Workstation | one x: Workstation | x in w.^succ && x in begin)
inv9 B:     │                                                                                                                                               └──  (all w: Workstation | one x: Workstation | x in w.succ && x in end) && (all w: Workstation | one x: Workstation | x in w.*succ && x in begin)
inv9 B:     │                                                                                                                                                   └──  (all w: Workstation | one x: Workstation | x in w.succ && x in end) && (all w: Workstation | some x: Workstation | x in w.*succ && x in begin)
inv9 B:     │                                                                                                                                                       └──  (all w: Workstation | one x: Workstation | x in w.^succ && x in end) && (all w: Workstation | one x: Workstation | x in w.*succ && x in begin)
inv9 B:     │                                                                                                                                                           └──  (all w: Workstation | one x: Workstation | x in w.^succ && x in end) && (all w: Workstation | one x: Workstation | x in succ.w && x in begin)
inv9 B:     │                                                                                                                                                               └──  (all w: Workstation | one x: Workstation | x in w.succ && x in end) && (all w: Workstation | one x: Workstation | x in succ.w && x in begin)
inv9 B:     │                                                                                                                                                                   └──  all w: Workstation | (one (succ.w & begin)) && (one (w.succ & end))
inv9 B:     │                                                                                                                                                                       └──  all w: Workstation | (one (*succ.w & begin)) && (one (w.succ & end))
inv9 U:     │                                                                                                                                                                           └──  all w: Workstation | (one (*succ.w & begin)) && (one (w.*succ & end))
inv9 U:     │                                                                                                                                                                               └──  all w: Workstation | (one (*succ.w & begin)) && (some (w.*succ & end))
inv9 B:     │                                                                                                                                                                                   └──  all w: Workstation | (one (succ.w & begin)) && (some (w.succ & end))
inv9 B:     │                                                                                                                                                                                       └──  all w: Workstation | one (succ.w & begin) && (some (w.succ & end))
inv9 B:     │                                                                                                                                                                                           └──  all w: Workstation | one (succ.w & begin) && one (w.succ & end)
inv9 B:     │                                                                                                                                                                                               └──  all w: Workstation | one (succ.w & begin) && one (w.succ & end) && (succ.w & begin)!=(w.succ & end)
inv9 B:     │                                                                                                                                                                                                   └──  all w: Workstation | one (*succ.w & begin) && one (w.*succ & end) && (*succ.w & begin)!=(w.*succ & end)
inv9 B:     │                                                                                                                                                                                                       └──  all w: Workstation | one (succ.w & begin) && one (w.*succ & end)
inv9 B:     │                                                                                                                                                                                                           └──  all w: Workstation | (w in begin || one (succ.w & begin)) && one (w.*succ & end)
inv9 U:     │                                                                                                                                                                                                               └──  all w: Workstation | one (*succ.w & begin) && one (w.*succ & end)
inv9 T:     │                                                                                                                                                                                                                   └──  all w: Workstation | one w in begin && one w in end
inv9 U:     │                                                                                                                                                                                                                       └──  one (Workstation & end) one (Workstation & begin)
inv9 U:     │                                                                                                                                                                                                                           └──  one (Workstation & end) && one (Workstation & begin)
inv9 U:     │                                                                                                                                                                                                                               └──  (one w: end | all x: Workstation-w | x not in end) && (one w: begin | all x: Workstation-w | x not in begin)
inv9 S:     │                                                                                                                                                                                                                                   └──  (one w: end, b: begin | all x: (Workstation-w)-b | x not in (end+begin)
inv9 U:     │                                                                                                                                                                                                                                       └──  one w: end, b: begin | all x: (Workstation-w)-b | x not in (end+begin)
inv9 U:     │                                                                                                                                                                                                                                           └──  one w: end, b: begin | all x: (Workstation-w)-b | no x&(end+begin)
inv9 B:     │                                                                                                                                                                                                                                               └──  all w: Workstation | no w.succ & w.succ.succ and (w in begin.succ.*succ or w = end)
inv9 U:     │                                                                                                                                                                                                                                                   └──  all w: Workstation | no w.succ & w.succ.succ && (w in begin.succ.*succ || w = begin)
inv9 S:     │                                                                                                                                                                                                                                                       └──  all w: Workstation | no w.succ & w.succ.succ && ((w in begin.succ.*succ && (w = end or no)) || w = begin)
inv9 U:     │                                                                                                                                                                                                                                                           └──  all w: Workstation | no w.succ & w.succ.succ && ((w in begin.succ.*succ && w!= begin && (w = end or w!=end )) || w = begin)
inv9 B:     │                                                                                                                                                                                                                                                               └──  all w: Workstation | w = begin || (w in begin.succ.*succ && w not in begin && w not in end) || w in begin
inv9 B:     │                                                                                                                                                                                                                                                                   └──  all w: Workstation | w = begin || (w in begin.*succ && w not in begin && w not in end) || w in begin
inv9 B:     │                                                                                                                                                                                                                                                                       └──  all w: Workstation | w = begin || (w in begin.^succ && w not in begin && w not in end) || w in begin
inv9 B:     │                                                                                                                                                                                                                                                                           └──  all w: Workstation | w in begin || (w in begin.^succ && w not in begin && w not in end) || w in begin
inv9 U:     │                                                                                                                                                                                                                                                                               └──  all w: Workstation | w in begin || (w in begin.^succ && w not in begin && w not in end) || w in end
inv9 U:     │                                                                                                                                                                                                                                                                                   └──  all w: Workstation | (w in begin || (w in begin.^succ && w not in (begin+end)) || w in end)
inv9 U:     │                                                                                                                                                                                                                                                                                       └──  all w: Workstation | (w in begin || (w in begin.*succ && w not in (begin+end)) || w in end)
inv9 U:     │                                                                                                                                                                                                                                                                                           └──  all w: Workstation | (w in begin || (w in (begin.succ).*succ && w not in (begin+end)) || w in end)
inv9 U:     │                                                                                                                                                                                                                                                                                               └──  all w: Workstation | (w in begin || (w in (begin.*succ) && w not in (begin+end)) || w in end)
inv9 U:     │                                                                                                                                                                                                                                                                                                   └──  all w: Workstation | w in begin || w in end || w in (begin.*succ)
inv9 U:     │                                                                                                                                                                                                                                                                                                       └──  all w: Workstation | w in begin || w in end || w in (begin.*succ) && w not in end
inv9 U:     │                                                                                                                                                                                                                                                                                                           └──  all w: Workstation | w in begin || w in end || (w in (begin.*succ) && w not in end)
inv9 U:     │                                                                                                                                                                                                                                                                                                               └──  all w: Workstation | (w in begin || w in end || (w in (begin.*succ) && w not in end))
inv9 U:     │                                                                                                                                                                                                                                                                                                                   └──  all w: Workstation | (w in begin || w in end || (w in begin.*succ && w not in end))
inv9 U:     │                                                                                                                                                                                                                                                                                                                       └──  (all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2) && (all w1: Workstation, w2: Workstation | w1 in w2.succ => no w3: Workstation | w1 in w3.succ and w3 in w2.succ)
fY7hqqiiiCzeGmDpR M:     │                                                                                                                                                                                                                                                                                                                           └──  user added theme options. same as previous submission
inv9 C:     │                                                                                                                                                                                                                                                                                                                               └──  all w,wb : Workstation | (wb in begin and w!=wb) implies w in wb.^(succ) all w : Workstation | w not in w.^(succ) all w : Workstation | w not in end implies one w.succ
inv10 B:    │                                                                                                                                                                                                                                                                                                                                   └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
JBhd3s6sRsLtA3bsF M:     │                                                                                                                                                                                                                                                                                                                                       └──  user added theme options. same as previous submission
inv10 O:    ├──  all x: Component, y: Product | x in y.parts implies y in x.workstation.succ
inv9 B:     │   └──  all x: Workstation | x in begin.succ or x in end.succ
inv1 C:     ├──  all x: Worker | x in Human || x in Robot
inv2 T:     │   └──  all x: Workstation | some x.workers all x: Worker | some x.Workstation
inv2 S:     │       └──  None
inv2 S:     │           └──  None
inv2 S:     │               └──  None
inv2 S:     │                   └──  None
inv2 S:     │                       └──  None
inv2 S:     │                           └──  None
inv2 S:     │                               └──  None
inv2 S:     │                                   └──  None
inv2 S:     │                                       └──  None
inv2 C:     ├──  all x:Workstation | some x.workers all x:Worker | one workers.x
inv7 B:     │   └──  all x:Component | x in Dangerous implies x.parts in Dangerous
inv8 B:     │       └──  all x:Component | x in Dangerous implies x.workstation.workers not in Human
inv7 B:     │           └──  all x:Component | x in Dangerous implies x.parts in Dangerous
inv1 S:     ├──  all x: Woker| x in Human or x in Robot
inv1 C:     │   └──  all x: Worker| x in Human or x in Robot
inv2 S:     │       └──  all x: Workstation | some y : Worker | y in x.wokers all x, y: Worker , z : Workstation | x in z.workers and y in z.workers implies x = y
inv2 S:     │           └──  all x: Workstation | some y : Worker | y in x.wokers all x, y: Worker , z : Workstation | x in z.workers and y in z.workers implies x = y
inv2 B:     │               └──  all x: Workstation | some y : Worker | y in x.workers all x, y: Worker , z : Workstation | x in z.workers and y in z.workers implies x = y
inv1 C:     │                   └──  all x: Worker| x in Human or x in Robot
inv2 B:     │                       └──  all x: Workstation | some y : Worker | y in x.workers all x, y: Worker , z : Workstation | x in z.workers and y in z.workers implies x = y
inv2 B:     │                           └──  all x: Workstation | some y : Worker | y in x.workers all x, y: Worker , z : Workstation | z in workers.x and z in workers.y implies x = y
inv2 S:     │                               └──  all x: Workstation | some y : Worker | y in x.workers all x Worker , y , z : Workstation | x in y.workes and x in z.workers implies y = z
inv2 S:     │                                   └──  all x: Workstation | some y : Worker | y in x.workers all x Worker | all y, z : Workstation | x in y.workes and x in z.workers implies y = z
inv2 S:     │                                       └──  all x: Workstation | some y : Worker | y in x.workers all x: Worker | all y, z : Workstation | x in y.workes and x in z.workers implies y = z
inv2 U:     │                                           └──  all x: Workstation | some y : Worker | y in x.workers all x: Worker | all y, z : Workstation | x in y.workers and x in z.workers implies y = z
inv2 B:     │                                               └──  all x: Workstation | all y : Worker | y in x.workers all x: Worker | all y, z : Workstation | x in y.workers and x in z.workers implies y = z
inv2 U:     │                                                   └──  all x: Workstation | some y : Worker | y in x.workers all x: Worker | all y, z : Workstation | x in y.workers and x in z.workers implies y = z
inv2 C:     │                                                       └──  all x: Workstation | some y : Worker | y in x.workers all x: Worker | some y : Workstation | x in y.workers all x: Worker | all y, z : Workstation | x in y.workers and x in z.workers implies y = z
inv3 U:     │                                                           └──  all x: Component | some y : Workstation | y in x.workstation
inv3 C:     │                                                               └──  all x: Component | some y : Workstation | y in x.workstation all x: Component | all y, z : Workstation | x in workstation.y and x in workstation.z implies y = z
inv4 U:     │                                                                   └──  all x: Product |  x in Component implies some x.parts
inv4 T:     │                                                                       └──  all x: Product |  x in Component implies some x.parts all x: Product |  x in Material implies none x.parts
inv4 S:     │                                                                           └──  all x: Product |  x in Component implies some x.parts all x: Product |  x in Material implies empty x.parts
inv4 C:     │                                                                               └──  all x: Product |  x in Component implies some x.parts all x: Product |  x in Material implies no x.parts
inv4 C:     │                                                                                   └──  all x: Product |  x in Component implies some x.parts all x: Product |  x in Material implies no x.parts
inv5 U:     │                                                                                       └──  all x, y: Worker, z, w: Workstation | x in Human and y in Robot and x in workers.z and y in workers.w implies z != w
inv5 C:     │                                                                                           └──  all x, y: Worker, z, w: Workstation | x in Human and y in Robot and x in z.workers and y in w.workers implies z != w
inv1 U:     ├──  no Human&Robot
inv1 U:     │   └──  all w:Worker| no Human&Robot
inv1 U:     │       └──  all w:Worker| no Human&Robot
inv1 C:     │           └──  all w:Worker| w in Human or w in Robot and (w not in Human or w not in Robot)
inv2 S:     │               └──  all w:Workstation| #w.wokers>0 all w:Worker | #works.w=1
inv2 S:     │                   └──  all w:Workstation| #w.workers>0 all w:Worker | #works.w=1
inv4 S:     │                       └──  all c: Components | #c.parts>0 all c :Material | no c.parts
inv2 C:     │                           └──  all w:Workstation| #w.workers>0 all w:Worker | #workers.w=1
inv3 C:     │                               └──  all c :Component | #c.workstation=1
inv4 C:     │                                   └──  all c: Component | #c.parts>0 all c :Material | no c.parts
inv4 C:     │                                       └──  all c: Component | #c.parts>0 all c :Material | no c.parts
inv5 O:     │                                           └──  all w:Workstation | w.workers in Human <=> w.workers not in Robot
inv6 U:     │                                               └──  all c:Component | c not in c.parts
inv6 C:     │                                                   └──  all c:Component | c not in c.^parts
inv7 O:     │                                                       └──  all c:Component | #c.^parts&Dangerous>0 implies c in Dangerous
inv7 O:     │                                                           └──  all c:Component | #c.^parts&Dangerous>0 implies c in Dangerous
inv7 O:     │                                                               └──  all c:Component | #c.^parts&Dangerous>0 implies c in Dangerous
inv8 O:     │                                                                   └──  all d:Dangerous | (d.workstation).workers in Robot
inv9 U:     │                                                                       └──  all w:Workstation | (w in begin and w in end and no w.succ and no succ.w) or (w in begin and no succ.w and #w.succ=1) or (w in end and no w.succ and #succ.w=1) or (w not in end and w not in begin and #w.succ=1 and #succ.w=1)
inv9 U:     │                                                                           └──  all w:Workstation | (w in begin and w in end and no w.succ and no succ.w) or (w in begin and w not in end and no succ.w and #w.succ=1) or (w in end and w not in begin and no w.succ and #succ.w=1) or (w not in end and w not in begin and #w.succ=1 and #succ.w=1)
inv9 C:     │                                                                               └──  all w:Workstation | ((w in begin and w in end and no w.succ and no succ.w) or (w in begin and w not in end and no succ.w and #w.succ=1) or (w in end and w not in begin and no w.succ and #succ.w=1) or (w not in end and w not in begin and #w.succ=1 and #succ.w=1))and w not in w.^succ and w not in ^succ.w
inv9 C:     │                                                                                   └──  all w:Workstation | (( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)) and w not in w.^succ and w not in ^succ.w
inv10 O:    │                                                                                       └──  all c:Component | c.^parts.workstation in ^succ.(c.workstation)
YuBA4Exy53DbnXtDi M:     │                                                                                           └──  user added theme options. same as previous submission
inv1 S:     ├──  all w:Workers | (w in Human) or (w in Robot)
inv1 C:     │   └──  all w:Worker | (w in Human) or (w in Robot)
inv2 C:     │       └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w:Worker | one ws:Workstation | w in ws.workers)
inv3 C:     │           └──  all c:Component | one ws:Workstation | ws in c.workstation
inv4 S:     │               └──  (all c:Component | some p:Product | c in p.parts) and (all m:Materials | no p:Product | m in p.parts)
inv4 B:     │                   └──  (all c:Component | some p:Product | c in p.parts) and (all m:Material | no p:Product | m in p.parts)
inv4 C:     │                       └──  (all c:Component | some p:Product | p in c.parts) and (all m:Material | no p:Product | p in m.parts)
inv5 S:     │                           └──  all ws:Workstion, h:Human, r:Robot | not (h in ws.workers and r in ws.workers)
inv5 C:     │                               └──  all ws:Workstation, h:Human, r:Robot | not (h in ws.workers and r in ws.workers)
inv6 C:     │                                   └──  all c:Component | c not in c.^(parts)
inv7 B:     │                                       └──  all c:Component | Dangerous in c.^(parts) implies c in Dangerous
inv7 O:     │                                           └──  all c:Component, p:Product | p in Dangerous and p in c.^(parts) implies c in Dangerous
inv8 T:     │                                               └──  all c:Component, ws:Workstation, w:Worker | c in Dangerous and ws in c.ws implies w not in ws.workers
inv8 T:     │                                                   └──  all c:Component, ws:Workstation | c in Dangerous and ws in c.ws implies (all h:Human | h not in ws.workers)
inv8 C:     │                                                       └──  all c:Component, ws:Workstation | c in Dangerous and ws in c.workstation implies (all h:Human | h not in ws.workers)
inv9 S:     │                                                           └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstion | w not in w.^(succs)) and (all w:Worsktation | w not in end implies one w.succ
inv9 S:     │                                                               └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstion | w not in w.^(succs)) and (all w:Worsktation | w not in end implies one w.succ)
inv9 S:     │                                                                   └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstation | w not in w.^(succs)) and (all w:Workstation | w not in end implies one w.succ)
inv9 C:     │                                                                       └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstation | w not in w.^(succ)) and (all w:Workstation | w not in end implies one w.succ)
inv10 S:    │                                                                           └──  all c1,c2 : Component | all ws1, ws2:Workstation | ws1 in c1.workstation and ws2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv10 B:    │                                                                               └──  all c1,c2 : Component | all ws1, ws2:Workstation | ws1 in c1.workstation and ws2 in c2.workstation and c2 in c1.^(parts) implies ws1 in ws2.^(succ)
EExE7vQqtQJCC2c7F M:     │                                                                                   └──  user added theme options. same as previous submission
inv2 C:     │                                                                                       └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w:Worker | one ws:Workstation | w in ws.workers)
inv1 S:     ├──  Worker = Human + Robots
inv1 C:     │   └──  Worker = Human + Robot
inv1 C:     │       └──  Worker = Human + Robot
inv2 O:     │           └──  some w : Workstation | some w.workers all w : Worker | one work : Workstation | w in work.workstation
inv2 U:     │               └──  some w : Workstation | some w.workers all w : Worker | one work : Workstation | w in work.workers
inv2 U:     │                   └──  some w : Workstation | some w.workers all w : Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                       └──  all w : Workstation | some w.workers all w : Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                           └──  all w : Workstation | some w.workers all w : Worker | one work : Workstation | w in work.workers
inv3 C:     │                               └──  all c : Component | one c.workstation
inv3 C:     │                                   └──  all c : Component | one c.workstation
inv4 S:     │                                       └──  all c : Component | some c.parts all m : Material | no m.pats
inv4 C:     │                                           └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 S:     │                                               └──  all h : Human | all r : Robots | no (h & r)
inv5 U:     │                                                   └──  all h : Human | all r : Robot | no (h & r)
inv5 C:     │                                                       └──  all w : Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 O:     │                                                           └──  all c : Component | no c.parts
inv6 C:     │                                                               └──  all c : Component | not c in c.^parts
inv6 U:     │                                                                   └──  all c : Component | not c in c.parts
inv6 C:     │                                                                       └──  all c : Component | not c in c.^parts
inv6 C:     │                                                                           └──  all c : Component | c not in c.^parts
inv7 E:     │                                                                               └──   
inv7 B:     │                                                                                   └──  all c : Component | Dangerous in c.^parts implies some (Dangerous & Component & c)
inv7 B:     │                                                                                       └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 E:     │                                                                                           └──   
inv8 S:     │                                                                                               └──  all d: Component & Dangerous | all x : d.worksation | no (x.workers & Human)
inv8 C:     │                                                                                                   └──  all d: Component & Dangerous | all x : d.workstation | no (x.workers & Human)
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 C:     │   └──  all ws: Workstation | some ws.workers all w: Worker | one workers.w
inv2 T:     │       └──  all w: Worker, ws: Workstation | (ws.workers[w]) => (ws in w.workstation) all ws: Workstation | #ws.workers > 0
inv2 T:     │           └──  all w: Worker, ws: Workstation | (ws.workers[w]) => (ws in w.workstation) all ws: Workstation | #ws.workers > 0
inv3 C:     │               └──  all c: Component | one c.workstation
inv4 C:     │                   └──  all c : Component | some c.parts all m : Material | no m.parts
inv4 C:     │                       └──  all p: Product | (p in Component) => (#p.parts > 0) all p: Material | #p.parts = 0
inv5 O:     │                           └──  all w : Workstation | w.workers in Human or w.workers in Robot
inv6 C:     │                               └──  all c : Component | c not in c.^parts
inv7 C:     │                                   └──  all c : Component | all p : Product | p in Dangerous and p in c.parts implies c in Dangerous
inv7 C:     │                                       └──  all c: Component | (some c.parts & Dangerous) => c in Dangerous
inv8 O:     │                                           └──  all c : Component | all w : Workstation | c in Dangerous and w in c.workstation implies w.workers in Robot
inv8 C:     │                                               └──  all c: Component, h: Human | (c in Dangerous) => (h !in c.workstation.workers)
inv9 C:     │                                                   └──  all b, w : Workstation | b in begin and b != w implies w in b.^succ all w : Workstation | w not in w.^succ all w : Workstation | w not in end implies one w.succ
inv9 S:     │                                                       └──  all ws: Workstation | (ws = begin) => #ws.succ = 1 (ws = end) => #ws.succ = 0 (ws != begin && ws != end) => #ws.succ = 1 all ws1: Workstation, ws2: Workstation | (ws1.succ[ws2]) => (ws2.succ[ws1] not in ws2.succ)
inv9 S:     │                                                           └──  all ws: Workstation | (ws = begin) => #ws.succ = 1 (ws = end) => #ws.succ = 0 (ws != begin && ws != end) => #ws.succ = 1 all ws1: Workstation, ws2: Workstation | (ws1.succ[ws2]) => (ws2.succ[ws1] not in ws2.succ)
inv10 B:    │                                                               └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv10 T:    │                                                                   └──  all c: Component | all p: c.parts | some ws: p.workstation, wss: c.workstation | (ws.succ[wss])
inv10 T:    │                                                                       └──  all c: Component | all p: c.parts | some ws: p.workstation, wss: c.workstation | (ws.succ[wss])
inv7 B:     ├──  all x: Product | x.parts in Dangerous implies x in Dangerous
inv7 B:     │   └──  all x: Component | x.parts in Dangerous implies x in Dangerous
inv3 C:     ├──  all x: Component| one x.workstation
inv4 U:     │   └──  all x: Product | x in Component implies some x.parts
inv4 U:     │       └──  all x: Component | some x.parts
inv4 C:     │           └──  all x: Component | some x.parts all x : Material | no x.parts
inv2 C:     │               └──  all x: Workstation | some y : Worker | y in x.workers all x: Worker | some y : Workstation | x in y.workers all x: Worker | all y, z : Workstation | x in y.workers and x in z.workers implies y = z
inv1 C:     │                   └──  all x: Worker| x in Human or x in Robot
inv5 C:     │                       └──  all x, y: Worker | all z,w: Workstation | x in Robot and y in Human and x in z.workers and y in w.workers implies z != w
inv5 C:     │                           └──  all x, y: Worker,  z,w: Workstation | x in Robot and y in Human and x in z.workers and y in w.workers implies z != w
inv5 C:     │                               └──  all x, y: Worker,  z,w: Workstation | x in Robot and y in Human and x in z.workers and y in w.workers implies z != w
inv4 C:     │                                   └──  all x: Component | some x.parts all x : Material | no x.parts
inv5 C:     │                                       └──  all x, y: Worker,  z,w: Workstation | x in Robot and y in Human and x in z.workers and y in w.workers implies z != w
inv6 U:     │                                           └──  all x: Component | x not in x.parts
inv6 U:     │                                               └──  all x, y: Product | x in Component and y in x.parts implies y != x
inv7 S:     │                                                   └──  all x: Components | some x.parts in Dangerous implies x in Dangerous
inv7 T:     │                                                       └──  all x: Component | some x.parts in Dangerous implies x in Dangerous
inv7 T:     │                                                           └──  all x: Product | x in Component and some x.parts in Dangerous implies x in Dangerous
inv7 T:     │                                                               └──  all x: Product | some x.parts in Dangerous implies x in Dangerous
inv1 U:     ├──  no Human & Robot
inv1 U:     │   └──  all w : Worker | w not in Human or w not in Robot
inv1 C:     │       └──  all w : Worker | w in Human or w in Robot
inv2 U:     │           └──  all w : Worker | some wor : Workstation | w in wor.workers all wor : Workstation | some wor.workers
inv2 C:     │               └──  all w : Worker | one wor : Workstation | w in wor.workers all wor : Workstation | some wor.workers
inv3 C:     │                   └──  all c : Component | one c.workstation
inv4 S:     │                       └──  all c : Componets | some c.parts all m : Materials | no m.parts
inv4 S:     │                           └──  all c : Components | some c.parts all m : Materials | no m.parts
inv4 C:     │                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 S:     │                                   └──  all wor : Workstation | all wor.workers in Human or all wor.workers in Robot
inv5 O:     │                                       └──  all wor : Workstation | wor.workers = Human & wor.workers or wor.workers = Robot & wor.workers
inv5 O:     │                                           └──  all wor : Workstation | wor.workers = Human & wor.workers or wor.workers = Robot & wor.workers
inv6 U:     │                                               └──  all c : Component | c not in c.parts
inv6 C:     │                                                   └──  all c : Component | c not in c.^parts
inv7 U:     │                                                       └──  all c, p : Component | p in c.parts and p in Dangerous implies c in Dangerous
inv7 B:     │                                                           └──  all c, p : Component | p in c.^parts and p in Dangerous implies c in Dangerous
inv7 B:     │                                                               └──  all c : Component | Dangerous in c.^parts implies Dangerous in c
inv7 T:     │                                                                   └──  all c : Component | Dangerous in c.^parts implies some Dangerous in c
inv7 B:     │                                                                       └──  all c : Component | Dangerous in c.^parts implies some Dangerous & c
inv7 B:     │                                                                           └──  all c : Component | Dangerous in c.^parts implies some Dangerous & c & Component
inv7 B:     │                                                                               └──  all c : Component | Dangerous in c.^parts implies some (Dangerous & c & Component)
inv7 B:     │                                                                                   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 S:     │                                                                                       └──  all c : Component | Dangerous in c implies c.workstation.workers = c.workstation.workers & Robots
inv8 B:     │                                                                                           └──  all c : Component | Dangerous in c implies c.workstation.workers = c.workstation.workers & Robot
inv8 B:     │                                                                                               └──  all c : Component | Dangerous in c implies no c.workstation.workers & Human
inv8 B:     │                                                                                                   └──  all c : Component | Dangerous in c.^parts implies no c.workstation.workers & Human
inv8 B:     │                                                                                                       └──  all c : Component | Dangerous in c implies no c.workstation.workers & Human
inv8 C:     │                                                                                                           └──  all c : Component & Dangerous | no c.workstation.workers & Human
inv9 B:     │                                                                                                               └──  all w : Workstation & begin | w.succ in end all w : Workstation & end | w.succ in begin
inv9 B:     │                                                                                                                   └──  all w : Workstation & begin | w.succ in end
inv9 B:     │                                                                                                                       └──  all w : Workstation & begin | w.succ in end and w != w.succ
inv9 B:     │                                                                                                                           └──  all w : Workstation & begin | w.succ in end and w != w.succ all w : Workstation & end | w.succ in begin and w != w.succ
inv9 B:     │                                                                                                                               └──  all w : Workstation & begin | w.succ in end and w != w.succ all w : Workstation & end | w.succ in begin and w != w.succ all w : Workstation | w.succ in Workstation
inv9 S:     │                                                                                                                                   └──  all w : Workstation | some we : end, some wb : begin | w.succ == we or w.succ = wb
inv9 S:     │                                                                                                                                       └──  all w : Workstation | some we : Workstation & end, some wb : Workstation & begin | w.succ == we or w.succ = wb
inv9 S:     │                                                                                                                                           └──  all w : Workstation | some we : Workstation & end | some wb : Workstation & begin | w.succ == we or w.succ = wb
inv9 S:     │                                                                                                                                               └──  all w : Workstation | some we : Workstation & end | some wb : Workstation & begin | w.succ == we or w.succ == wb
inv9 B:     │                                                                                                                                                   └──  all w : Workstation | some we : Workstation & end | some wb : Workstation & begin | w.succ = we or w.succ = wb
inv9 O:     │                                                                                                                                                       └──  all w : Workstation | some we : Workstation & end | some wb : Workstation & begin | (w.succ = we or w.succ = wb) and w != we and w != wb
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 U:     │   └──  all w:Workstation | some w.workers
inv2 B:     │       └──  all w:Workstation,wor:Worker | some w.workers and one workers.w
inv2 U:     │           └──  all w:Workstation,wor:Worker | some w.workers and one workers.wor
inv2 U:     │               └──  all w:Workstation,wor:Worker | some w.workers and lone workers.wor
inv2 U:     │                   └──  all w:Workstation,wor:Worker | some w.workers and one workers.wor
inv2 T:     │                       └──  all w:Workstation,wor:Worker | set w.workers and one workers.wor
inv2 T:     │                           └──  all w:Workstation,wor:Worker |  w.workers and one workers.wor
inv2 U:     │                               └──  all w:Workstation,wor:Worker |  some w.workers and one workers.wor
inv2 U:     │                                   └──  all w:Workstation,wor:Worker |  some w.workers
inv2 U:     │                                       └──  all w:Workstation,wor:Worker |  some w.workers and some workers.wor
inv2 U:     │                                           └──  all w:Workstation,wor:Worker |   some workers.wor
inv2 U:     │                                               └──  all w:Workstation,wor:Worker |   some w.workers
inv2 U:     │                                                   └──  all w:Workstation,wor:Worker |   some w.workers => some workers.wor
inv2 U:     │                                                       └──  all w:Workstation,wor:Worker |   one workers.wor
inv2 U:     │                                                           └──  all w:Workstation,wor:Worker |   one workers.wor
inv3 O:     │                                                               └──  all c:Component | one workstation.c
inv3 O:     │                                                                   └──  all c:Component | one workstation.c
inv3 U:     │                                                                       └──  all c:Component | lone workstation.c
inv3 C:     │                                                                           └──  all c:Component | one c.workstation
inv4 U:     │                                                                               └──  all c:Component,m:Material| some c.parts and no m.parts
inv4 U:     │                                                                                   └──  all c:Component,m:Material| no m.parts
inv4 B:     │                                                                                       └──  all c:Component,m:Material| no m.parts and some parts.c
inv4 U:     │                                                                                           └──  all c:Component,m:Material| no m.parts and some c.parts
inv4 U:     │                                                                                               └──  all c:Component,m:Material| no m.parts and (some c.parts)
inv4 U:     │                                                                                                   └──  all c:Component,m:Material| no m.parts
inv4 U:     │                                                                                                       └──  all c:Component,m:Material| some c.parts
inv4 S:     │                                                                                                           └──  all p:Product| (p in Material => no p.parts) or (p in Components =>some p.parts)
inv4 U:     │                                                                                                               └──  all p:Product| (p in Material => no p.parts) or (p in Component =>some p.parts)
inv4 U:     │                                                                                                                   └──  all p:Product| (p in Material => no p.parts) or (p in Component => some p.parts)
inv4 U:     │                                                                                                                       └──  all p:Product| (p in Material => no p.parts) or (p in Component => one p.parts)
inv4 U:     │                                                                                                                           └──  all p:Product| (p in Material => no p.parts) or (p in Component => lone p.parts)
inv1 C:     ├──  all w: Worker| w in Human or w in Robot
inv1 C:     │   └──  all w: Worker| w in Human or w in Robot
inv2 B:     │       └──  all w: Workstation| one k: Worker | k in w.workers
inv2 U:     │           └──  all ws : Workstation | #ws.workers > 0 all w : Worker | some ws : Workstation | w in ws.workers
inv2 C:     │               └──  all ws : Workstation | #ws.workers > 0 all w : Worker | one ws : Workstation | w in ws.workers
inv3 S:     │                   └──  all c : Componet | #c.workstation=1
inv3 C:     │                       └──  all c : Component | #c.workstation=1
inv4 S:     │                           └──  all c: Components, m: Material| #c.parts <0 and no m.parts
inv4 B:     │                               └──  all c: Component, m: Material| #c.parts <0 and no m.parts
inv4 B:     │                                   └──  all c: Component, m: Material| #c.parts <1 and no m.parts
inv4 U:     │                                       └──  all c: Component, m: Material| #c.parts >=1 and no m.parts
inv4 U:     │                                           └──  all c: Component, m: Material| #c.parts >0 and no m.parts
inv4 U:     │                                               └──  all c: Component, m: Material|  no m.parts
inv4 U:     │                                                   └──  all m: Material| no m.parts
inv4 U:     │                                                       └──  all c: Component, m: Material| #c.parts >0 and no m.parts
inv4 S:     │                                                           └──  all c: Component, m: Material| iff(c not in Dangerous) #c.parts >0 and no m.parts
inv4 B:     │                                                               └──  all c: Component, m: Material| c not in Dangerous and #c.parts >0 and no m.parts
inv4 S:     │                                                                   └──  all c: Component, m: Material| iff (c not in Dangerous) #c.parts >0 else #c.part =0 and no m.parts
inv4 S:     │                                                                       └──  all c: Component, m: Material| iff (c not in Dangerous) #c.parts >0 else #c.part = 0 and no m.parts
inv4 C:     │                                                                           └──  all c : Component | #c.parts > 0 all m : Material | #m.parts = 0
inv5 S:     │                                                                               └──  all ws : Workstation | all h : Human, r : Robot | h in ws.workers and r in ws.workers => false
inv5 B:     │                                                                                   └──  all ws : Workstation | all h : Human, r : Robot | h in ws.workers and r in ws.workers
inv5 O:     │                                                                                       └──  all ws : Workstation | all h : Human, r : Robot | h in ws.workers and r not in ws.workers
inv5 C:     │                                                                                           └──  all ws : Workstation | all h : Human, r : Robot | h in ws.workers => r not in ws.workers
inv6 U:     │                                                                                               └──  all c: Component | c not in c.parts
inv6 S:     │                                                                                                   └──  all c: Component | Componest not in c.parts
inv6 U:     │                                                                                                       └──  all c: Component | Component not in c.parts
inv6 S:     │                                                                                                           └──  None
inv6 S:     │                                                                                                               └──  None
inv6 U:     │                                                                                                                   └──  all c : Component | c !in c.parts
inv6 U:     │                                                                                                                       └──  all c : Component | c not in c.parts
inv6 B:     │                                                                                                                           └──  all c : Component, d: Dangerous | c not in c.parts and d not in c.parts
inv6 B:     │                                                                                                                               └──  all c : Component, d: Dangerous | c not in c.parts and d not in d.parts
inv6 U:     │                                                                                                                                   └──  all c : Component, d: Dangerous | c not in c.parts
inv6 U:     │                                                                                                                                       └──  all c : Component, d: Dangerous | c not in c.parts
inv6 U:     │                                                                                                                                           └──  all c : Component | c not in c.parts
inv6 B:     │                                                                                                                                               └──  all c : Component | c not in c.parts all c : Component | c.parts in Material
inv6 B:     │                                                                                                                                                   └──  all c : Component | c not in c.parts all c : Component, d: Dangerous | d not in c.parts
inv6 B:     │                                                                                                                                                       └──  all c : Component | c not in c.parts all c : Component, d: Dangerous | d not in c.parts all c: Component | c.parts in Material
inv6 B:     │                                                                                                                                                           └──  all c : Component | c not in c.parts all c : Component, d: Dangerous | d not in c.parts all c: Component | c.parts in Material all d: Dangerous | d.parts in Material
inv6 B:     │                                                                                                                                                               └──  all c : Component | c not in c.parts all c : Component| Dangerous not in c.parts all c: Component | c.parts in Material all d: Dangerous | d.parts in Material
inv6 B:     │                                                                                                                                                                   └──  all c : Component | c not in c.parts all c : Component| Dangerous not in c.parts
inv6 S:     │                                                                                                                                                                       └──  all c : Component | c not in c.parts all c : Component| Dangerous not in c.parts and Componensts not in c.parts
inv6 S:     │                                                                                                                                                                           └──  all c : Component | c not in c.parts all c : Component| Dangerous not in c.parts and Componenst not in c.parts
inv6 B:     │                                                                                                                                                                               └──  all c : Component | c not in c.parts all c : Component| Dangerous not in c.parts and Component not in c.parts
inv6 B:     │                                                                                                                                                                                   └──  all c : Component| Dangerous not in c.parts and Component not in c.parts
inv6 B:     │                                                                                                                                                                                       └──  all c : Component + Dangerous| Dangerous not in c.parts and Component not in c.parts
inv6 B:     │                                                                                                                                                                                           └──  all c : Component + Dangerous| Dangerous not in c.parts
inv6 B:     │                                                                                                                                                                                               └──  all c : Component + Dangerous| Dangerous not in c.parts all c : Component + Dangerous| Component not in c.parts
inv6 B:     │                                                                                                                                                                                                   └──  all c : Component | Dangerous not in c.parts all c : Component | Component not in c.parts
inv6 U:     │                                                                                                                                                                                                       └──  all c : Component | c not in c.parts all c : Component | Component not in c.parts
inv6 B:     │                                                                                                                                                                                                           └──  all c : Component | c not in c.parts all c : Component, d: Dangerous | d not in c.parts
jZEtuRLjuhDtMLziy M:     │                                                                                                                                                                                                               └──  user added theme options. same as previous submission
inv4 C:     │                                                                                                                                                                                                                   └──  all c : Component | some c.parts all m : Material | no m.parts
inv4 C:     │                                                                                                                                                                                                                       └──  all c : Component | some c.parts all m : Material | no m.parts
inv6 C:     │                                                                                                                                                                                                                           └──  all c: Component | not c in c.^parts
inv7 B:     │                                                                                                                                                                                                                               └──  all c: Component | Dangerous in c.^parts => some (c & Dangerous & Component)
inv7 B:     │                                                                                                                                                                                                                                   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                                                                                                                                                       └──  all c: Component | Dangerous in c.^parts implies c in Dangerous
inv7 O:     │                                                                                                                                                                                                                                           └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 S:     │                                                                                                                                                                                                                                               └──  all c: Component & Dangerous, ws: c.workstations | no w.workers & Human
inv8 S:     │                                                                                                                                                                                                                                                   └──  all c: Component & Dangerous, ws: c.worckstations | no w.workers & Human
inv8 S:     │                                                                                                                                                                                                                                                       └──  all c: Component & Dangerous, ws: c.workstation | no w.workers & Human
inv8 C:     │                                                                                                                                                                                                                                                           └──  all c: Component & Dangerous, ws: c.workstation | no ws.workers & Human
3it6G3wr95uZxgFp7 M:     │                                                                                                                                                                                                                                                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Human || w in Robot
inv1 C:     │   └──  all w : Worker | w in Human || w in Robot
inv2 O:     │       └──  all ws : Workstation | some ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers implies w not in ws1.workers
inv2 U:     │           └──  all ws : Workstation | some ws.workers
inv2 U:     │               └──  all ws : Workstation | some ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers && ws != ws1 implies w not in ws1.workers
inv2 O:     │                   └──  all ws : Workstation | some w : Worker | w in ws.workers all ws,ws1 : Workstation, w,w1 : Worker |w in ws.workers && w in ws1.workers implies w = ws1
inv2 O:     │                       └──  all ws : Workstation | some w : Worker | w in ws.workers all ws,ws1 : Workstation, w : Worker |w in ws.workers && w in ws1.workers implies w = ws1
inv2 O:     │                           └──  all ws : Workstation | some w : Worker | w in ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers && w in ws1.workers implies w = ws1
inv2 U:     │                               └──  all ws : Workstation | some w : Worker | w in ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers && w in ws1.workers implies w != ws1
inv2 U:     │                                   └──  all ws : Workstation | some w : Worker | w in ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers implies w not in ws.succ
inv2 U:     │                                       └──  all ws : Workstation | some w : Worker | w in ws.workers all ws : Workstation, w : Worker | w in ws.workers implies w not in ws.succ
inv2 U:     │                                           └──  all ws : Workstation | some w : Worker | w in ws.workers all ws : Workstation, w : Worker | w in ws.workers implies w not in ws.succ
inv2 U:     │                                               └──  all ws : Workstation | some ws.workers all ws : Workstation, w : Worker | w in ws.workers implies w not in ws.succ
inv2 U:     │                                                   └──  all ws : Workstation | some ws.workers all ws,ws1 : Workstation, w : Worker | w in ws.workers && w in ws1.workers implies ws = ws1
inv2 C:     │                                                       └──  all ws : Workstation | some ws.workers all ws,ws1 : Workstation, w : Worker | one workers.w
inv2 C:     │                                                           └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv2 U:     │                                                               └──  all ws : Workstation, w : Worker | some ws.workers && one workers.w
inv2 C:     │                                                                   └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv3 O:     │                                                                       └──  all c : Component | one workstation.c
inv3 C:     │                                                                           └──  all c : Component | one c.workstation
inv4 C:     │                                                                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 S:     │                                                                                   └──  all ws : Workerstation, w,w1 : Worker | w in ws && w in Robot && w1 in ws implies w1 in Robot
inv5 U:     │                                                                                       └──  all ws : Workstation, w,w1 : Worker | w in ws && w in Robot && w1 in ws implies w1 in Robot
inv5 O:     │                                                                                           └──  all ws : Workstation, w,w1 : Worker | w in ws.workers && w in Robot && w1 in ws.workers implies w1 in Robot
inv6 S:     │                                                                                               └──  all c : Components | no (c.parts).c
inv6 T:     │                                                                                                   └──  all c : Component | no (c.parts).c
inv6 O:     │                                                                                                       └──  all c : Component | no (c.parts)
inv6 O:     │                                                                                                           └──  all c : Component | no parts.c
inv6 T:     │                                                                                                               └──  all c : Component | no c.(parts.c)
inv6 T:     │                                                                                                                   └──  all c : Component | no c.parts = c
inv6 O:     │                                                                                                                       └──  all p : Product | no Component.parts
inv6 S:     │                                                                                                                           └──  all p : Product | p in component implies p not in component.parts
inv6 U:     │                                                                                                                               └──  all p : Product | p in Component && p in p.parts implies p not in Component.parts
inv6 C:     │                                                                                                                                   └──  all c : Component | c not in c.^(parts)
inv7 B:     │                                                                                                                                       └──  all c : Component | c in Dangerous implies c.^(parts) in Dangerous
inv7 B:     │                                                                                                                                           └──  all c : Component | c in Dangerous && c in c.parts implies c.^(parts) in Dangerous
inv7 B:     │                                                                                                                                               └──  all c : Component | some d : Dangerous | d in c.parts implies c in Dangerous
inv7 C:     │                                                                                                                                                   └──  all c : Component | (some d : Dangerous | d in c.parts) implies c in Dangerous
inv8 S:     │                                                                                                                                                       └──  all c : Component, w : worker | c in Dangerous && w in c.workstation.workers implies w in Robot
inv8 O:     │                                                                                                                                                           └──  all c : Component, w : Worker | c in Dangerous && w in c.workstation.workers implies w in Robot
inv8 O:     │                                                                                                                                                               └──  all c : Component, w : Worker | c in Dangerous && w in c.workstation.workers implies w in Robot
inv9 U:     │                                                                                                                                                                   └──  all ws,ws1 : Workstation | ws1 in ws.succ implies ws not in ws1.succ
inv9 U:     │                                                                                                                                                                       └──  all ws,ws1 : Workstation | ws1 in ws.succ && ws != ws1 implies ws not in ws1.succ
inv9 B:     │                                                                                                                                                                           └──  all ws : Workstation | no succ.ws
inv9 B:     │                                                                                                                                                                               └──  all ws : Workstation | one succ.ws
inv9 B:     │                                                                                                                                                                                   └──  all ws : Workstation | one ws.^(succ)
inv9 O:     │                                                                                                                                                                                       └──  all ws : Workstation | one ws.^(succ) && no succ.ws
inv9 U:     │                                                                                                                                                                                           └──  all ws : Workstation | ws in begin implies ws not in ws.succ
inv9 U:     │                                                                                                                                                                                               └──  all ws : Workstation | ws in begin implies ws not in ws.succ all ws : Workstation | ws in end implies no ws.succ
inv9 U:     │                                                                                                                                                                                                   └──  all ws : Workstation | ws in end implies no ws.succ
inv9 B:     │                                                                                                                                                                                                       └──  all ws : Workstation | ws in begin implies ws not in end && ws not in ws.^(succ)
inv9 B:     │                                                                                                                                                                                                           └──  all ws : Workstation | ws in begin implies ws not in end && ws not in ws.^(succ) all ws : Workstation | ws in end implies ws not in begin && no succ.ws
inv1 S:     ├──  all w:Worker | w in Human or W in Robot
inv1 C:     │   └──  all w:Worker | w in Human or w in Robot
inv3 O:     │       └──  all c:Component| one workstation.c
inv3 C:     │           └──  all c:Component| one c.workstation
inv4 S:     │               └──  all c:Component| some c.parts all m:Material| no c.parts
inv4 C:     │                   └──  all c:Component| some c.parts all m:Material| no m.parts
inv5 O:     │                       └──  all w:Workstation,wo:Worker| wo in w.workers and wo in Human <=> no (w.workers & Robot)
inv5 T:     │                           └──  all w:Workstation,wo:Worker| (w.workers & Human) <=> no (w.workers & Robot)
inv5 O:     │                               └──  all w:Workstation,wo:Worker| some (w.workers & Human) <=> no (w.workers & Robot)
inv1 C:     ├──  all w:Worker| w in Human or w in Robot
inv2 S:     │   └──  all w:Workstation, some x:Worker| w->x in workers
inv2 S:     │       └──  all w:Workstation, some x:Worker| w->x in workers
inv2 S:     │           └──  all w:Workstation, some x:Worker| w->x in workers and one workers.x
inv3 S:     │               └──  all c:Component, one s:Workstation| c->s in workstation
inv3 E:     │                   └──   
inv3 C:     │                       └──  all c:Component| one s:Workstation| c->s in workstation
inv2 U:     │                           └──  all w:Workstation| some x:Worker| w->x in workers and one workers.x
inv2 B:     │                               └──  all w:Workstation| some x:Worker| w->x in workers and one w.workers
inv2 U:     │                                   └──  all w:Workstation| some x:Worker| w->x in workers
inv1 C:     ├──  all w:Worker | (w in Human) or (w in Robot)
inv2 B:     │   └──  all ws:Workstation, w:Worker | (w in ws.workers)
inv2 B:     │       └──  all ws:Workstation, w:Worker | (some w.workstation) and (some ws.workers)
inv2 O:     │           └──  all ws:Workstation | some ws.workers && all w:Worker | one w.workstation
inv2 S:     │               └──  all ws:Workstation | some ws.workers and (all w:Workers | one w.workstation)
inv2 O:     │                   └──  all ws:Workstation | some ws.workers and (all w:Worker | one w.workstation)
inv2 T:     │                       └──  all ws:Workstation, w:Worker | some w in ws.workers
inv2 U:     │                           └──  all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 C:     │                               └──  workers in Workstation one -> some Worker
inv2 S:     │                                   └──  all w:Worker, ws:Workstation | some w -> one ws in ws.workers  workers in Workstation one -> some Worker
inv2 S:     │                                       └──  all w:Worker, ws:Workstation | some w -> one ws in ws.workers
inv2 C:     │                                           └──  all ws: Workstation | some w: Worker | ws -> w in workers and all w:Worker | one ws:Workstation | ws -> w in workers
inv3 S:     │                                               └──  all c: Component | one w:Workstation | c -> ws in workstation
inv3 C:     │                                                   └──  all c: Component | one ws:Workstation | c -> ws in workstation
inv4 U:     │                                                       └──  all c:Component | some p:Product | c -> p in parts and all m:Material | no p:Product | m -> p in parts
inv4 C:     │                                                           └──  (all c:Component | some p:Product | c -> p in parts) and (all m:Material | no p:Product | m -> p in parts)
inv2 C:     │                                                               └──  (all ws: Workstation | some w: Worker | ws -> w in workers) and (all w:Worker | one ws:Workstation | ws -> w in workers)
inv4 C:     │                                                                   └──  (all c:Component | some p:Product | c -> p in parts) and (all m:Material | no p:Product | m -> p in parts)
inv5 O:     │                                                                       └──  all ws:Workstation | all w1,w2: Worker | (ws -> w1 in workers and ws -> w2 in workers and w1 in Human) implies (w2 in Human)
inv5 O:     │                                                                           └──  all ws:Workstation | all w1,w2: Worker | (ws -> w1 in workers and ws -> w2 in workers and w1 in Human) implies (w2 in Human)
inv6 U:     │                                                                               └──  all c:Component | c not in c.parts
inv6 C:     │                                                                                   └──  all c:Component | c not in c.^(parts)
inv7 S:     │                                                                                       └──  all c:Component | all p:Product | p in Dangerous and i in c.^(parts) implies c in Dangerous
inv7 O:     │                                                                                           └──  all c:Component | all p:Product | p in Dangerous and p in c.^(parts) implies c in Dangerous
inv8 C:     │                                                                                               └──  all c:Component | all ws:Workstation | c in Dangerous and ws in c.workstation implies (all h:Human | h not in ws.workers)
inv9 U:     │                                                                                                   └──  all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)
inv9 C:     │                                                                                                       └──  all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ) all w: Workstation | w not in w.^(succ) all w: Workstation | w not in end implies one w.succ
inv10 B:    │                                                                                                           └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
u76hrPQdyLj9FKC5z M:     │                                                                                                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Robot or w in Human
inv3 U:     │   └──  all c : Component | (some ws : Workstation | ws in c.workstation)
inv5 T:     │       └──  all h : Human | all r : Robot | all ws : workstation | r in ws.workers implies h not in ws.workers
inv5 S:     │           └──  all h : Human | all r : Robot | all ws : workstation | (r in ws.workers) implies (h not in ws.workers(
inv5 T:     │               └──  all h : Human | all r : Robot | all ws : workstation | (r in ws.workers) implies (h not in ws.workers)
inv5 T:     │                   └──  all h : Human | all r : Robot | all ws : workstation | (r in ws.workers) implies (not(h in ws.workers))
inv5 T:     │                       └──  all h : Human | all r : Robot | all ws : workstation | (r in ws.workers) iff (not(h in ws.workers))
inv5 T:     │                           └──  all r : Robot | all ws : workstation | (r in ws.workers) iff (not(some h : Human| h in ws.workers))
inv5 T:     │                               └──  all r : Robot | all ws : workstation | r in ws.workers iff (not(some h : Human| h in ws.workers))
inv5 O:     │                                   └──  all r : Robot | all ws : Workstation | r in ws.workers iff (not(some h : Human| h in ws.workers))
inv5 O:     │                                       └──  all h : Human | all r : Robot | all ws : Workstation | (r in ws.workers) iff (not(h in ws.workers))
inv5 C:     │                                           └──  all h : Human | all r : Robot | all ws : Workstation | (r in ws.workers) implies (not(h in ws.workers))
inv6 S:     │                                               └──  all c: Components | c not in c.parts
inv6 U:     │                                                   └──  all c: Component | c not in c.parts
inv6 U:     │                                                       └──  all c: Component | not (c in c.parts)
inv6 U:     │                                                           └──  all c: Component | not (c in parts.c)
inv6 O:     │                                                               └──  all c: Component | not (some p : Product | c in p.parts)
inv7 S:     │                                                                   └──  all c : Components | (some d : Dangerous | d in c.parts) implies c in Dangerous
inv7 C:     │                                                                       └──  all c : Component | (some d : Dangerous | d in c.parts) implies c in Dangerous
inv9 B:     │                                                                           └──  all ws: Workstation | (some prec : Workstation | ws in prec.succ) or (some post : Workstation | post in ws.succ)
inv9 B:     │                                                                               └──  all ws: Workstation | (some prec : Workstation | ws in prec.succ) or (some post : Workstation | post in ws.succ) or (ws in ws.succ)
inv9 B:     │                                                                                   ├──  all ws: Workstation | (some prec : Workstation | ws in prec.succ) or (some post : Workstation | post in ws.succ) or (ws in ws.succ)
inv4 U:     │                                                                                   │   └──  all c: Component | all m : Material | (some p : Product| p in c.parts) and not(some p : Product| p in m.parts)
inv3 U:     │                                                                                   │       └──  all c : Component | (some ws : Workstation | ws in c.workstation)
safjnCHbXE7h6cZ9f M:     │                                                                                   └──  user added theme options. same as previous submission
inv6 C:     ├──  all c : Component | c not in c.^parts
inv7 B:     │   └──  all c : Component | c.^parts in Dangerous implies c in Dangerous
inv8 C:     │       └──  all c : Component | c in Dangerous implies #(c.workstation.workers & Human) = 0
inv9 U:     │           └──  all ws : Workstation | ws not in ws.^succ
inv9 U:     │               └──  all ws : Workstation - begin | #(begin.^succ & ws) = 1
inv9 S:     │                   └──  None
inv9 S:     │                       └──  None
inv9 S:     │                           └──  None
inv1 C:     ├──  all x:Worker | x in Human or x in Robot
inv2 U:     │   └──  all x:Worker | one workers.x
inv2 C:     │       └──  all x:Workstation | some x.workers all x:Worker | one workers.x
inv2 C:     │           └──  all x:Workstation | some x.workers all x:Worker | one workers.x
inv4 S:     │               └──  all x:Product | some x.parts all x:Materials | no x.parts
inv3 C:     │                   └──  all x:Component | one x.workstation
inv4 O:     │                       └──  all x:Product | some x.parts all x:Material | no x.parts
inv4 C:     │                           └──  all x:Component | some x.parts all x:Material | no x.parts
inv5 C:     │                               └──  all x:Human, y:Robot | no workers.x & workers.y
inv6 U:     │                                   └──  all x:Component | x not in x.parts
inv6 T:     │                                       └──  all x:Component | x not in x.parts or x.parts.parts
inv6 E:     │                                           └──   
inv7 B:     │                                               └──  all x:Component | x in Dangerous implies x.parts in Dangerous
inv7 B:     │                                                   └──  all x:Product | x in Dangerous implies x.parts in Dangerous
inv7 B:     │                                                       └──  all x:Component | x in Dangerous implies x.parts in Dangerous
inv10 B:    │                                                           └──  all x:Component | x.parts.workstation.succ in  x.workstation or x.parts.workstation.succ in x.parts.workstation
inv10 B:    │                                                               └──  all x:Component | x.parts.workstation not in  x.workstation and x.parts.workstation.succ in  x.workstation or x.parts.workstation.succ in x.parts.workstation
inv10 S:    │                                                                   └──  all x:component | x.parts.workstation !=  x.workstation all x:Component | x.parts.workstation.succ in  x.workstation or x.parts.workstation.succ in x.parts.workstation
inv10 B:    │                                                                       └──  all x:Component | x.parts.workstation !=  x.workstation all x:Component | x.parts.workstation.succ in  x.workstation or x.parts.workstation.succ in x.parts.workstation
inv9 U:     │                                                                           └──  all x:Workstation | x in begin or one succ.x
inv9 U:     │                                                                               └──  all x:Workstation | x in begin or one succ.x and x not in x.succ
inv9 U:     │                                                                                   └──  all x:Workstation | x in begin or one succ.x and x not in succ.x
inv9 U:     │                                                                                       └──  all x:Workstation | x not in succ.x all x:Workstation | x in begin or one succ.x
inv9 B:     │                                                                                           └──  all x:Workstation | x not in succ.x all x:Workstation | (not x in begin iff x in end) or one succ.x
inv9 B:     │                                                                                               └──  all x:Workstation | x not in succ.x all x:Workstation | (not (x in begin iff x in end)) or one succ.x
inv9 B:     │                                                                                                   └──  all x:Workstation | x not in succ.x all x:Workstation | ((x in begin and x not in end) or one succ.x)
inv9 O:     │                                                                                                       └──  all x:Workstation | x not in succ.x and lone succ.x all x:Workstation | (x in begin and x not in end)
inv9 U:     │                                                                                                           └──  all x:Workstation | x not in succ.x and lone succ.x
inv9 B:     │                                                                                                               └──  all x:Workstation | x not in succ.x and lone succ.x all x:Workstation | one Workstation implies x in begin and x in end all x:Workstation | (not (x in begin iff x in end)) or x in succ.x
inv9 U:     │                                                                                                                   └──  all x:Workstation | x not in succ.x and lone succ.x all x:Workstation | (one Workstation implies x in begin and x in end) or (not (x in begin iff x in end)) or x in succ.x
inv8 B:     │                                                                                                                       └──  all x:Component | x in Dangerous implies x.workstation.workers not in Human
inv1 C:     ├──  Worker - Human = Robot Worker - Robot = Human
inv2 S:     │   └──  all ws : Workstation | some w : Worker | #ws.workers > 0 all w : Worker
inv2 C:     │       └──  all ws : Workstation | some w : Worker | #ws.workers > 0 all w : Worker | one ws : Workstation | w in ws.workers
inv2 C:     │           └──  all ws : Workstation | #ws.workers > 0 all w : Worker | one ws : Workstation | w in ws.workers
inv3 S:     │               └──  all c : Components | #c.workstation = 1
inv3 C:     │                   └──  all c : Component | #c.workstation = 1
inv4 C:     │                       └──  all c : Component | #c.parts > 0 all m : Material | #m.parts = 0
inv5 O:     │                           └──  all ws : Workstation | ws.workers in Robot or ws.workers in Human
inv6 U:     │                               └──  all c : Component | c not in c.parts
inv6 O:     │                                   └──  all c : Component | c not in c.*parts
inv6 C:     │                                       └──  all c : Component | c not in c.^parts
inv7 T:     │                                           └──  all c : Component | #(c.parts in Dangerous) > 0 implies c in Dangerous
inv7 T:     │                                               └──  all c : Component | #(c.^parts in Dangerous) > 0 implies c in Dangerous
inv7 T:     │                                                   └──  all c : Component | #(Dangerous in c.^parts) > 0 implies c in Dangerous
inv7 B:     │                                                       └──  all c : Component | Dangerous in c.^parts implies some ( c & Dangerous & Component )
inv7 S:     │                                                           └──  all c : Component | Dangerous in c.^parts implies some in ( c & Dangerous & Component )
inv7 B:     │                                                               └──  all c : Component | Dangerous in c.^parts implies some ( c & Dangerous & Component )
inv7 B:     │                                                                   └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                       └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv8 O:     │                                                                           └──  all c : Component | c in Dangerous implies #c.workstation.workers-Robot = 0
inv8 O:     │                                                                               └──  all c : Component | c in Dangerous implies c.workstation.workers in Robot
inv9 B:     │                                                                                   └──  begin.^succ = Workstation
inv9 U:     │                                                                                       └──  begin.*succ = Workstation
inv9 B:     │                                                                                           └──  begin.^succ = Workstation or begin = end
inv9 B:     │                                                                                               └──  begin.^succ = Workstation
inv9 U:     │                                                                                                   └──  begin.*succ = Workstation
inv9 U:     │                                                                                                       └──  #begin.*succ = #Workstation
inv9 B:     │                                                                                                           └──  #begin.*succ = 1
inv9 S:     │                                                                                                               └──  all w1, w2 : Worstation | w2 in w1.*succ implies w1 not in w2.*succ
inv9 O:     │                                                                                                                   └──  all w1, w2 : Workstation | w2 in w1.*succ implies w1 not in w2.*succ
inv9 B:     │                                                                                                                       └──  #succ = #Workstation - 1
inv9 T:     │                                                                                                                           └──  no succ.begin all w : Workstation | succ.w
inv9 U:     │                                                                                                                               └──  no succ.begin all ws : Workstation-begin | one w : Workstation | ws in w.succ
inv9 U:     │                                                                                                                                   └──  no succ.begin #(begin.*succ) = #Workstation
inv9 U:     │                                                                                                                                       └──  no succ.begin no end.succ #(begin.*succ) = #Workstation
inv9 U:     │                                                                                                                                           └──  no succ.begin no end.succ #(begin.*succ) = #Workstation all w : Workstation | w not in w.succ
inv9 U:     │                                                                                                                                               └──  all w : Workstation-end | one ws: Workstation-w | ws in w.succ
inv9 B:     │                                                                                                                                                   └──  all w : Workstation | one ws: Workstation-w | ws in w.succ
inv9 O:     │                                                                                                                                                       └──  no end.succ all w : Workstation | one ws: Workstation-w | ws in w.succ
inv9 U:     │                                                                                                                                                           └──  #(*succ.end) = #Workstation
inv9 B:     │                                                                                                                                                               └──  #(*succ.end) = #Workstation all w : Workstation | one s : Workstation | s = w.succ
inv9 B:     │                                                                                                                                                                   └──  #(*succ.end) = #Workstation all w : Workstation | some s : Workstation | s = w.succ
inv9 U:     │                                                                                                                                                                       └──  #(*succ.end) = #Workstation #(begin.*succ) = #Workstation
inv9 B:     │                                                                                                                                                                           └──  #(*succ.end) = #Workstation #(begin.*succ) = #Workstation all w : Workstation | #w.succ=1
inv9 U:     │                                                                                                                                                                               └──  #(*succ.end) = #Workstation #(begin.*succ) = #Workstation all w : Workstation-end | # w.succ = 1
inv9 U:     │                                                                                                                                                                                   └──  #(*succ.end) = #Workstation #(begin.*succ) = #Workstation all w : Workstation-end | # w.succ = 1 all w: Workstation | w not in w.succ
inv1 S:     ├──  all w: Worker| x in Robot or x in Human
inv1 C:     │   └──  all x: Worker| x in Robot or x in Human
inv2 C:     │       └──  (all x: Workstation| some w: Worker| w in x.workers) && (all w: Worker| one workers.w)
inv3 S:     │           └──  all c: Component| some w: Workstation| w in c.component
inv3 U:     │               └──  all c: Component| some w: Workstation| w in c.workstation
inv3 T:     │                   └──  all c: Component| some w: Workstation| one w in c.workstation
inv3 U:     │                       └──  all c: Component| some w: Workstation| w in c.workstation
inv3 O:     │                           └──  (all c: Component| some w: Workstation| w in c.workstation) && (all c: Component| one workstation.c)
inv3 C:     │                               └──  all c: Component | one c.workstation
inv4 S:     │                                   └──  (all c: Components| some c.parts) && (all m: Material| no m.parts)
inv4 C:     │                                       └──  (all c: Component| some c.parts) && (all m: Material| no m.parts)
inv5 C:     │                                           └──  (all h: Human| all r: Robot| all w: Workstation| h in w.workers implies r not in w.workers) && (all h: Human| all r: Robot| all w: Workstation| r in w.workers implies h not in w.workers)
inv6 C:     │                                               └──  all c: Component| c not in c.^(parts)
inv7 B:     │                                                   └──  all m: Material| some c: Component| (m in Dangerous && m in c.parts) implies c.parts in Dangerous
inv7 B:     │                                                       └──  all m: Material| all c: Component| (m in Dangerous && m in c.parts) implies c.parts in Dangerous
inv8 B:     │                                                           └──  all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous implies h not in w.workers
inv7 C:     │                                                               └──  all c: Component| all x: c.parts| x in Dangerous implies c in Dangerous
inv8 B:     │                                                                   └──  all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous implies h not in w.workers
inv8 U:     │                                                                       └──  all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous and w in workstation.c implies h not in w.workers
inv8 U:     │                                                                           └──  all c: Component| all h: Human| all w: Workstation| (c.parts in Dangerous and w in workstation.c) implies h not in w.workers
inv8 S:     │                                                                               └──  all c: w.parts | all h: Human| all w: Workstation| c in Dangerous implies h not in w.workers
inv8 U:     │                                                                                   └──  all h: Human| all w: Workstation| all c: w.parts | c in Dangerous implies h not in w.workers
inv8 U:     │                                                                                       └──  all c: Component| all h: Human| all w: Workstation| w in workstation.c and c.parts in Dangerous implies h not in w.workers
inv8 S:     │                                                                                           └──  all c: Component & Dangerous| all x: c.workstation| no (w.workers and Human)
inv8 T:     │                                                                                               └──  all c: Component & Dangerous| all x: c.workstation| no (x.workers and Human)
inv8 C:     │                                                                                                   └──  all c: Component & Dangerous| all x: c.workstation| no (x.workers & Human)
inv9 S:     │                                                                                                       └──  all w: Workstation | w.succ.size = 1 && w.workers.size >= 0
inv9 S:     │                                                                                                           └──  all w: Workstation | #w.succ = 1 && w.workers.size >= 0
inv9 B:     │                                                                                                               └──  all w: Workstation | #w.succ = 1 && lone w.workers
inv9 U:     │                                                                                                                   └──  all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2
inv9 B:     │                                                                                                                       └──  all w : Workstation | some succ[w] && some w.^succ
inv9 B:     │                                                                                                                           └──  all w1, w2 : Workstation | w1 in w2.succ => w1.workers = w2.workers
inv9 T:     │                                                                                                                               └──  all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T:     │                                                                                                                                   └──  all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T:     │                                                                                                                                       └──  all w1, w2 : Workstation | (w1 in succ.w2) implies (w2 in succ.*succ)
inv9 B:     │                                                                                                                                           └──  all ws : Workstation | #ws.succ= 1
inv9 B:     │                                                                                                                                               └──  all ws : Workstation | #ws.succ=0
inv9 B:     │                                                                                                                                                   └──  all ws : Workstation | #ws.succ=1
inv9 U:     │                                                                                                                                                       └──  all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2
pGePDtoSaRfDRwcrd N:     │                                                                                                                                                           └──  user added extra characters to pred name
inv1 C:     ├──  no (Worker-Human-Robot)
inv2 U:     │   └──  some workers all w : Worker | w in Workstation.workers
inv2 U:     │       └──  some workers all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 C:     │           └──  some workers workers in Workstation one -> some Worker
inv3 B:     │               └──  one Component.workstation
inv3 T:     │                   └──  Component one -> one Workstation
inv3 O:     │                       └──  workstation in Component one -> one Workstation
inv3 C:     │                           └──  workstation in Component set -> one Workstation
inv4 S:     │                               └──  Components in parts Material not in parts
inv4 T:     │                                   └──  Component in parts Material not in parts
inv4 S:     │                                       └──  all c : Component, m : material | c in parts & m not in parts
inv4 T:     │                                           └──  all c : Component, m : Material | c in parts & m not in parts
inv4 T:     │                                               └──  all c : Component | c in parts parts - Material = parts
inv4 T:     │                                                   └──  all c : Component | c in Product.parts parts - Material = parts
inv4 T:     │                                                       └──  (Component <: parts) in Component set -> some Product parts - Material = parts
inv4 C:     │                                                           └──  (Component <: parts) in Component set -> some Product no (Material <: parts)
inv4 B:     │                                                               └──  all c : Component | c in Product.parts  no (Material <: parts)
inv4 B:     │                                                                   └──  all c : Component | c in (Product-Material).parts  no (Material <: parts)
inv4 T:     │                                                                       └──  all c : Component | c in ((Product-Material).parts - iden)  no (Material <: parts)
inv4 S:     │                                                                           └──  parts = Components + (Product-Material)
inv4 T:     │                                                                               └──  parts = Component + (Product-Material)
inv4 S:     │                                                                                   └──  parts = set (Component + (Product-Material))
inv4 C:     │                                                                                       └──  (Component <: parts) in Component set -> some Product no (Material <: parts)
inv4 B:     │                                                                                           └──  some Component.parts no Material.parts
inv4 C:     │                                                                                               └──  all c: Component | some c.parts all c: Material | no c.parts
inv6 S:     │                                                                                                   └──  Components.parts - iden
inv5 C:     │                                                                                                       └──  no (workers.Human & workers.Robot)
inv6 T:     │                                                                                                           └──  Component.parts - iden
inv6 T:     │                                                                                                               └──  no ^Component.parts
inv6 T:     │                                                                                                                   └──  no ^(Component.parts)
inv6 O:     │                                                                                                                       └──  no *parts
inv6 O:     │                                                                                                                           └──  no (^parts & iden)
inv6 U:     │                                                                                                                               └──  iden not in ^parts
inv6 O:     │                                                                                                                                   └──  no (iden & ^parts)
inv6 O:     │                                                                                                                                       └──  no *parts
inv6 O:     │                                                                                                                                           └──  no (iden & ^parts)
inv7 S:     │                                                                                                                                               └──  all d : Dangerous, c : Componets | d in c.parts => d in c
inv7 O:     │                                                                                                                                                   └──  all d : Dangerous, c : Component | d in c.parts => d in c
inv7 T:     │                                                                                                                                                       └──  all d : Dangerous, c : Component | d in c.parts => c.d
inv7 T:     │                                                                                                                                                           └──  all d : Dangerous, c : Component | d in c.parts => d.c
inv7 O:     │                                                                                                                                                               └──  parts.Dangerous in Dangerous
inv7 O:     │                                                                                                                                                                   └──  parts.Dangerous in Dangerous
inv9 U:     │                                                                                                                                                                       └──  lone ((begin.^succ :> (end + begin)) - begin)
inv9 B:     │                                                                                                                                                                           └──  one ((begin.^succ :> (end + begin)) - begin)
inv10 B:    │                                                                                                                                                                               └──  no (parts :> Component & workstation.*succ.~workstation)
inv9 B:     │                                                                                                                                                                                   └──  one ((begin.^succ :> (end + begin)))
inv9 U:     │                                                                                                                                                                                       └──  lone ((begin.^succ :> (end + begin)))
inv9 B:     │                                                                                                                                                                                           └──  lone begin + end
WeEteZw5C8w637mrQ M:     │                                                                                                                                                                                               └──  user added theme options. same as previous submission
inv4 O:     │                                                                                                                                                                                                   └──  (parts :> Component) in Component set -> some Product no (parts :> Material)
inv4 C:     │                                                                                                                                                                                                       └──  (Component <: parts) in Component set -> some Product no (Material <: parts)
inv1 C:     ├──  all x : Worker | x in Human or x in Robot
inv2 U:     │   └──  all x : Workstation | #(x.workers)>0 all x,y : Worker | all z,w : Workstation | (x in z.workers and y in w.workers and z!=w) implies x!=y
inv2 U:     │       └──  all x : Workstation | #(x.workers)>0 all x : Worker | all z,w : Workstation | (x in z.workers and z!=w) implies x not in w.workers
inv2 S:     │           └──  all x : Workstation | #(x.workers)>0  all x : Worker | one Workstation : w | x in w.workers
inv2 S:     │               └──  all x : Workstation | #(x.workers)>0  all x : Worker | one Workstation : w | x in w.workers
inv2 C:     │                   └──  all x : Workstation | #(x.workers)>0  all x : Worker | one w :Workstation  | x in w.workers
inv3 C:     │                       └──  all x:Component | one w:Workstation | w in x.workstation
inv4 T:     │                           └──  all x:Product | x is in Component implies #(x.parts)>0 all x:Product | x is in Material implies #(x.parts)=0
inv4 T:     │                               └──  all x:Product | x is in Component implies #(x.parts)>0 all x:Product | x is in Material implies #(x.parts)=0
inv4 C:     │                                   └──  all x:Component | #(x.parts)>0 all x:Material | #(x.parts)=0
inv5 S:     │                                       └──  all x:Workstation,all y:Worker | y in Robot and y in x.workers implies Robot in x.workers
inv5 S:     │                                           └──  all x:Workstation,all y,w:Worker | y in Robot and y in x.workers and w in Human implies w not in x.workers
inv5 S:     │                                               └──  all x:Workstation,all y,w:Worker | y in Robot and y in x.workers and w in Human implies w not in x.workers
inv5 C:     │                                                   └──  all x:Workstation|all y,w:Worker | y in Robot and y in x.workers and w in Human implies w not in x.workers
inv5 C:     │                                                       └──  all x:Workstation|all y,w:Worker | y in Robot and y in x.workers and w in Human implies w not in x.workers
inv6 U:     │                                                           └──  all x,y:Component | x in y.parts implies x!=y
inv6 U:     │                                                               └──  all x,y:Component | (x in y.parts or y in x.parts)implies x!=y
inv6 U:     │                                                                   └──  all x:Component | x not in x.parts
inv6 U:     │                                                                       └──  all x:Component | x not in x.parts and x not in parts.x
inv6 S:     │                                                                           └──  all x:Product | x in Components implies x not in x.parts
inv6 U:     │                                                                               └──  all x:Product | x in Component implies x not in x.parts
inv6 U:     │                                                                                   └──  all x:Product | x in Component implies x not in x.parts and x not in parts.x
inv6 B:     │                                                                                       └──  Component not in Component.parts
inv6 U:     │                                                                                           └──  all x,y : Component | x in y.parts implies x!=y
inv6 C:     │                                                                                               └──  all x,y : Component | x in y.^parts implies x!=y
inv7 O:     │                                                                                                   └──  all x:Component | all y:Dangerous | y in x.^parts implies x in Dangerous
inv8 S:     │                                                                                                       └──  all x:Worker,all z:Dangerous | all w:Workstation | w in z.workstation implies x in Robot
inv8 O:     │                                                                                                           └──  all x:Worker|all z:Dangerous | all w:Workstation | w in z.workstation implies x in Robot
inv8 O:     │                                                                                                               └──  all x:Worker|all z:Dangerous | all w:Workstation | (w in z.workstation and x in w.workers)implies x in Robot
inv9 S:     │                                                                                                                   └──  all x,y:Workstation| x in y.succ implies y.in x.succ
inv9 U:     │                                                                                                                       └──  all x,y:Workstation| x in y.succ implies y not in x.succ
inv9 B:     │                                                                                                                           └──  all x,y:Workstation| x in y.succ implies y not in x.succ all x,y:Workstation| x in y.succ implies #(y.succ) > #(x.succ)
inv9 B:     │                                                                                                                               └──  all x,y:Workstation| x in y.succ implies y not in x.succ all x,y:Workstation| x in y.succ implies #(y.succ) > #(x.succ) all x,y:Workstation| x in y.^succ implies y not in y.^succ
inv9 B:     │                                                                                                                                   └──  all x,y:Workstation| x in y.succ implies y not in x.^succ all x,y:Workstation| x in y.succ implies #(y.succ) > #(x.succ)
inv3 S:     ├──  all c : Component | one ws : Worstation | ws in c.workstation
inv3 S:     │   └──  all c : Component | one ws : Worstation | ws in c.workstation
inv3 S:     │       └──  all c : Component | one ws : Worstation | ws in c.workstation
inv3 S:     │           └──  all c : Component | one ws : Worstation | ws in c.workstation
inv2 C:     │               └──  (all ws : Workstation | some w : Worker | w in ws.workers) and (all w : Worker | one ws : Workstation | w in ws.workers)
inv3 C:     │                   └──  all c : Component | one ws : Workstation | ws in c.workstation
inv3 C:     │                       └──  all c : Component | one ws : Workstation | ws in c.workstation
inv4 B:     │                           └──  all c : Component | c in c.parts and all m: Material | m in m.parts
inv4 B:     │                               └──  all c : Component | some p:Product | c in p.parts and all m: Material | all p:Product |  c not in p.parts
inv4 B:     │                                   └──  all c : Component | some p:Product | c in p.parts and all m: Material | no p:Product | c in p.parts
inv4 S:     │                                       └──  (all c : Component | some p:Product | c in p.parts) and (all m: Material | no p:Product | c in p.parts)
inv4 S:     │                                           └──  (all c : Component | some p:Product | c in p.parts) and (all m: Material | no p:Product | c in p.parts)
inv4 B:     │                                               └──  (all c : Component | some p:Product | c in p.parts) and (all m: Material | no p:Product | m in p.parts)
inv4 C:     │                                                   └──  (all c : Component | some p : Product | c->p in parts) and (all m : Material | no p : Product | m->p in parts)
inv5 O:     │                                                       └──  all ws: Workstation | all w1,w2: Worker | w1 in ws.workers and w2 in ws.workers and w1 in Human implies w2 not in Human
inv5 O:     │                                                           └──  all ws: Workstation | all w1,w2: Worker | w1 in ws.workers and w2 in ws.workers and w1 in Human implies w2 not in Human
inv5 O:     │                                                               └──  all ws: Workstation | all w1,w2: Worker | w1 in ws.workers and w2 in ws.workers and w1 in Human implies w2 in Robot
inv5 O:     │                                                                   └──  all ws: Workstation | all w1,w2: Worker | w1 in ws.workers and w2 in ws.workers and w1 in Human implies w2 in Human
inv6 B:     │                                                                       └──  all c:Component | all p:Product | c in p.parts implies p not in Component
inv1 C:     ├──  all x : Worker | (x in Human or x in Robot) and (x not in Human or x not in Robot)
inv2 T:     │   └──  all x : Workstation | all y : Worker | some y in x.workers
inv2 T:     │       └──  all x : Workstation | all y : Worker | some (y in x.workers)
inv2 T:     │           └──  all x : Workstation | all y : Worker | some (y in x.workers)
inv2 B:     │               └──  all x : Workstation | all y : Worker | y in x.workers
inv2 U:     │                   └──  all x : Workstation | all y : Worker | some x.workers and some workers.y
inv2 U:     │                       └──  all x : Workstation | some x.workers and all y : Worker | some workers.y
inv1 C:     │                           └──  all x : Worker | (x in Human or x in Robot) and (x not in Human or x not in Robot)
inv2 U:     │                               └──  all x : Workstation | some x.workers and all y : Worker | some workers.y
inv2 C:     │                                   └──  all x : Workstation | some x.workers and all y : Worker | one workers.y
inv3 C:     │                                       └──  all x : Component | one x.workstation
inv4 T:     │                                           └──  all x : Component | some x.parts and all y : Material | none y.parts
inv4 U:     │                                               └──  all x : Component | some x.parts and all y : Material | no y.parts
inv4 C:     │                                                   └──  (all x : Component | some x.parts) and (all y : Material | no y.parts)
inv5 O:     │                                                       └──  all x : Workstation | all y,z : Worker | y in x.workers and z in x.workers implies ((y in Human and z in Human) or (y in Robot and z in Robot))
inv6 U:     │                                                           └──  all x : Component | x not in x.parts
inv6 O:     │                                                               └──  all x : Component | x not in x.*parts
inv6 U:     │                                                                   └──  all x : Component | x not in x.parts
inv6 O:     │                                                                       └──  all x : Component | x not in x.(*parts)
inv7 S:     │                                                                           └──  all x : Componet | x.(*parts) & Dangerous implies x in Dangerous
inv7 T:     │                                                                               └──  all x : Component | x.(*parts) & Dangerous implies x in Dangerous
inv7 T:     │                                                                                   └──  all x : Component | (x.(*parts) & Dangerous) implies (x in Dangerous)
inv7 O:     │                                                                                       └──  all x : Component | some (x.(*parts) & Dangerous) implies (x in Dangerous)
inv1 S:     ├──  Workers = Human or Roobot
inv1 S:     │   └──  Workers = Human or Robot
inv1 T:     │       └──  Worker = Human or Robot
inv1 C:     │           └──  all w : Worker | w in Human or w in Robot
inv2 C:     │               └──  all w : Workstation | some w.workers all w : Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                   └──  all c : Component | one c.workstation
inv4 T:     │                       └──  all c : Component | some c.parts all m : Material | none m.parts
inv4 C:     │                           └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 T:     │                               └──  all w : Workstation | some h : Human, r : Robot | h in w.workers implies no r in w.workers
inv5 C:     │                                   └──  all w : Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 S:     │                                       └──  all c : Components | not c in c.^parts
inv6 S:     │                                           └──  all c : Components | not c in c.^parts
inv6 C:     │                                               └──  all c : Component | not c in c.^parts
inv7 B:     │                                                   └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 B:     │                                                       └──  all c : Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 O:     │                                                           └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv7 C:     │                                                               └──  all c : Component, p : c.parts | p in Dangerous implies c in Dangerous
inv8 S:     │                                                                   └──  all c : Components & Dangerous | all x : c.workstation | no (x.workers & Human)
inv8 C:     │                                                                       └──  all c : Component & Dangerous | all x : c.workstation | no (x.workers & Human)
dHYrRtFttGQbTKQiP M:     │                                                                           └──  user added theme options. same as previous submission
inv1 C:     ├──  Worker in (Human+Robot)
inv2 O:     │   └──  all w : Workstation | some w.workers all w : Worker | one w.workers
inv2 C:     │       └──  all w : Workstation | some w.workers all w : Worker | one workers.w
inv3 C:     │           └──  all c : Component | one c.workstation
inv4 C:     │               └──  (all c : Component | some c.parts) and (no Material.parts)
inv5 T:     │                   └──  all w : Workstation | not (w.workers & Human+Robot)
inv5 O:     │                       └──  all w : Workstation | no (w.workers & Human+Robot)
inv5 S:     │                           └──  None
inv5 S:     │                               └──  None
inv5 S:     │                                   └──  None
inv5 S:     │                                       └──  None
inv5 S:     │                                           └──  None
inv5 C:     │                                               └──  no workers.Human & workers.Robot
inv6 U:     │                                                   └──  all c : Component | c not in c.parts
inv6 T:     │                                                       └──  all c : Component | c not in ^(c.parts)
inv6 T:     │                                                           └──  all c : Component | c not in c.^(c.parts)
inv6 C:     │                                                               └──  all c : Component | c not in c.^parts
inv7 O:     │                                                                   └──  all c : Component | some c.^parts & Dangerous implies c in Dangerous
inv8 C:     │                                                                       └──  no ((Component & Dangerous).workstation.workers) & Human
inv9 U:     │                                                                           └──  all w : Workstation | w not in w.^succ
inv9 B:     │                                                                               └──  one begin.succ and one succ.end all w : Workstation | w not in w.^succ
inv9 S:     │                                                                                   └──  one begin.succ and one succ.end all w : Workstation | one w.succs and one succs.w
inv9 B:     │                                                                                       └──  one begin.succ and one succ.end all w : Workstation | one w.succ and one succ.w
inv9 B:     │                                                                                           └──  one begin.succ and one succ.end all w : Workstation-begin-end | one w.succ and one succ.w
inv9 B:     │                                                                                               └──  one begin.succ and one succ.end all w : Workstation-begin-end | one w.succ and one succ.w or begin=end
inv9 B:     │                                                                                                   └──  one begin.succ and one succ.end all w : Workstation-begin-end | one w.succ and one succ.w
inv9 B:     │                                                                                                       └──  one begin.succ and no succ.begin one succ.end and no end.succ all w : Workstation-begin-end | one w.succ and one succ.w
inv9 U:     │                                                                                                           └──  all w : Workstation-begin | (w in begin.^succ) and (w not in w.^succ) all w : Workstation-end | one w.succ
inv9 C:     │                                                                                                               └──  all w : Workstation-begin | (w in begin.^succ) all w : Workstation | (w not in w.^succ) all w : Workstation-end | one w.succ
inv9 C:     │                                                                                                                   └──  all w : Workstation-begin | (w in begin.^succ) all w : Workstation | w not in w.^succ all w : Workstation-end | one w.succ
inv10 S:    │                                                                                                                       └──  no (c.workstation.^succ) & (c.parts.workstation)
inv10 B:    │                                                                                                                           └──  all c : Component | no (c.workstation.^succ) & (c.parts.workstation)
inv10 B:    │                                                                                                                               └──  all c : Component | no ((c.workstation.^succ) & (c.parts.workstation))
inv10 B:    │                                                                                                                                   └──  all c : Component | no ((c.workstation.*succ) & (c.parts.workstation))
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 B:     │   └──  all w : Workstation | all worker : Worker | worker in w.workers and #(w.workers)>0
inv2 B:     │       └──  some w : Workstation | all worker : Worker | worker in w.workers and #(w.workers)>0
inv2 U:     │           └──  all w : Workstation | some worker : Worker | worker in w.workers and #(w.workers)>0
inv2 U:     │               └──  all w : Workstation | some worker : Worker | worker in w.workers all w : Workstation | some worker : Worker | #(w.workers)>0
inv2 B:     │                   └──  all w : Workstation | all worker : Worker | worker in w.workers all w : Workstation | #(w.workers)>0
inv2 B:     │                       └──  all worker : Worker |all w : Workstation |  worker in w.workers all w : Workstation | #(w.workers)>0
inv2 B:     │                           └──  all trab : Worker |all w : Workstation |  trab in w.workers all w : Workstation | #(w.workers)>0
inv2 C:     │                               └──  all trab : Worker |one w : Workstation |  trab in w.workers all w : Workstation | #(w.workers)>0
inv3 C:     │                                   └──  all c : Component | one w : Workstation | w in c.workstation
inv3 C:     │                                       └──  all c : Component | one w : Workstation | w in c.workstation
inv4 C:     │                                           └──  all c : Component | #(c.parts)>0 all m : Material | #(m.parts)=0
inv5 O:     │                                               └──  all w1,w2 : Worker | all x1,x2 : Workstation | (w1 in x1.workers and w2 in x2.workers and w1 != w2) implies x1!=x2
inv5 S:     │                                                   └──  all w1,w2 : Worker | all x1: Workstation | (w1 in x1.workers and w2 in x1.workers and w1 != w2) implies (x1!=x2 and x1 in Human and x2 in Human)
inv5 S:     │                                                       └──  all w1,w2 : Worker | all x1: Workstation | (w1 in x1.workers and w2 in x1.workers and w1 != w2) implies (x1!=x2 and w1 in Human and w2 in Human)
inv5 O:     │                                                           └──  all w1,w2 : Worker | all x1: Workstation | (w1 in x1.workers and w2 in x1.workers and w1 != w2) implies ((w1 in Human and w2 in Human) or (w1 in Robot and w2 in Robot))
inv6 U:     │                                                               └──  all p : Product | p in Component implies p not in p.parts
inv6 U:     │                                                                   └──  all c : Component | c not in c.parts
inv6 S:     │                                                                       └──  all c : Component | all p : Product | c in p.part implies c1 !=p
inv6 S:     │                                                                           └──  all c : Component | all p : Product | c in p.parts implies c1 !=p
inv6 U:     │                                                                               └──  all c : Component | all p : Product | c in p.parts implies c !=p
inv6 C:     │                                                                                   └──  all c : Component | all p : Product | c in p.^parts implies c !=p
inv6 U:     │                                                                                       └──  all c : Component | all p : Product | c in p.parts implies c !=p
inv6 C:     │                                                                                           └──  all c : Component | all p : Product | c in p.^parts implies c !=p
inv7 O:     │                                                                                               └──  all p1,p2 : Product | (p1 in Dangerous and p1 in p2.parts) implies p2 in Dangerous
inv8 O:     │                                                                                                   └──  all p : Product | all trab : Worker | all w : Workstation| (p in Dangerous and trab in w.workers) implies trab not in Human
inv8 S:     │                                                                                                       └──  all p : Product | all trab : Worker | all w : Workstation| (p in Dangerous and trab in w.workers) implies trab in Roboy
inv8 O:     │                                                                                                           └──  all p : Product | all trab : Worker | all w : Workstation| (p in Dangerous and trab in w.workers) implies trab in Robot
inv8 O:     │                                                                                                               └──  all p : Dangerous | all trab : Worker | all w : Workstation| (trab in w.workers and w in p.workstation) implies trab in Robot
inv8 O:     │                                                                                                                   └──  all p : Dangerous | all trab : Worker | all w : Workstation| (trab in w.workers and w in p.workstation) implies trab in Robot
kjvnzXWK3baZQMv2N M:     │                                                                                                                       └──  user added theme options. same as previous submission
inv1 C:     ├──  all w: Worker | w in Human + Robot
inv1 C:     │   └──  all w: Worker | w in Human or w in Robot
inv1 C:     │       └──  all w: Worker | w in Human + Robot
inv2 O:     │           └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.workstation) = 1
inv2 O:     │               └──  all ws: Workstation | some (ws.workers) all w: Worker | #(w.workstation) = 1
inv2 B:     │                   └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | one w->workstation
inv2 T:     │                       └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | one (w.workstation) = 1
inv2 O:     │                           └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.workstation) = 1
inv2 T:     │                               └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(Workstation)) = 1
inv2 T:     │                                   └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(Workstation)) = 1
inv2 S:     │                                       └──  None
inv2 S:     │                                           └──  None
inv2 S:     │                                               └──  None
inv2 U:     │                                                   └──  all ws: Workstation | #(ws.workers) > 0
inv2 T:     │                                                       └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.Workstation) = 1
inv2 S:     │                                                           └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.ws) = 1
inv2 T:     │                                                               └──  all ws: Workstation, w: Worker | #(ws.workers) > 0 and one w.ws
inv2 T:     │                                                                   └──  all ws: Workstation, w: Worker | #(ws.workers) > 0 and one ws.w
inv2 S:     │                                                                       └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.Workstation) = 1
inv2 T:     │                                                                           └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.Workstation) = 1
inv2 T:     │                                                                               └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(Workstation)) = 1
inv2 T:     │                                                                                   └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(Workstation)) = 1
inv2 T:     │                                                                                       └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(Workstation)) = 1
inv2 O:     │                                                                                           └──  all ws: Workstation | #(ws.workers) > 0 all w: Worker | #(w.(workstation)) = 1
inv4 C:     │                                                                                               └──  all c: Component | #(c.parts) > 0 all m: Material | #(m.parts) = 0
inv3 C:     │                                                                                                   └──  all c: Component | #(c.workstation) = 1
inv4 C:     │                                                                                                       └──  all c: Component | #(c.parts) > 0 all m: Material | #(m.parts) = 0
inv5 T:     │                                                                                                           └──  all ws: Workstation | no (Human in ws.workers and Robot in ws.workers)
inv5 T:     │                                                                                                               └──  all ws: Workstation | no (Human in ws.workers and Robot in ws.workers)
inv5 T:     │                                                                                                                   └──  all ws: Workstation | no (Human in ws.workers and Robot in ws.workers)
inv1 C:     ├──  all w : Worker | w in Human iff w !in Robot
inv2 T:     │   └──  all w : Workstation | #w.workers > 0 all p : Worker | one w : Workstation | p in workstation.workers
inv2 C:     │       └──  all ws : Workstation | ws.workers != none all w : Worker | one ws : Workstation | w in ws.workers
inv2 C:     │           └──  all ws : Workstation | ws.workers != none all w : Worker | one ws : Workstation | w in ws.workers
inv3 C:     │               └──  all c : Component | #(c.workstation) = 1
inv4 C:     │                   └──  all c : Component | c.parts != none all m : Material | m.parts = none
inv5 C:     │                       └──  all ws : Workstation | (ws.workers & Human) = none or (ws.workers & Robot) = none
inv6 U:     │                           └──  all c : Component | c !in c.parts
inv6 C:     │                               └──  all c : Component | c !in c.^parts
inv7 B:     │                                   └──  all c : Component | c.parts in Dangerous => c in Dangerous
inv7 C:     │                                       └──  all c : Component | (c.parts & Dangerous != none) => c in Dangerous
inv8 U:     │                                           └──  all ws : Workstation | (ws.workers & Dangerous) = none or (ws.workers & Human) = none
inv8 O:     │                                               └──  all c : Component & Dangerous | all ws : Workstation | no (ws.workers & Human)
inv8 C:     │                                                   └──  all c : Component & Dangerous | all ws : c.workstation | no (ws.workers & Human)
inv9 U:     │                                                       └──  all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                           └──  all ws : Workstation | ws !in ws.succ all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                               └──  all ws : Workstation | ws !in ws.^succ all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 O:     │                                                                   └──  all ws : Workstation | ws !in ws.*succ all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                                       └──  all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                                           └──  all ws : Workstation | ws !in ws.*succ => ws = end all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                                               └──  all ws : Workstation | ws !in ws.*succ => ws = begin all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                                                   └──  all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U:     │                                                                                       └──  all ws : Workstation | ws.succ = none => ws = end all ws : Workstation | succ.ws = none => ws = begin all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr != ws) and (wr.succ = none) => wr = end)
inv9 S:     │                                                                                           └──  all ws : Workstation | (ws.succ = none) => ws = end all ws : Workstation | (ws.succ != none) => ws = begin all ws : Workstation | (ws.succ != none) => all ws' : Workstation | ws' in ws.succ => (ws' != ws) implies (ws'.succ = none) => ws' = end
inv9 B:     │                                                                                               └──  all ws : Workstation | (ws.succ = none) => ws = end all ws : Workstation | (ws.succ != none) => ws = begin all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.succ = none) => wr = end
inv9 B:     │                                                                                                   └──  all ws : Workstation | (ws.succ = none) => ws = end all ws : Workstation | (ws.succ != none) => ws = begin all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.*succ = none) => wr = end
inv9 B:     │                                                                                                       └──  all ws : Workstation | (ws.succ = none) => ws = end all ws : Workstation | (ws.succ != none) => ws = begin all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.^succ = none) => wr = end
inv10 B:    │                                                                                                           └──  all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 B:    │                                                                                                               └──  all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 T:    │                                                                                                                   └──  all c : Component | all p : Product | p & c.parts => (p.workstation.succ = c.workstation)
inv10 B:    │                                                                                                                       └──  all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 B:    │                                                                                                                           └──  all c : Component | all p : Product | p in c.parts => (p.workstation.*succ = c.workstation)
inv10 O:    │                                                                                                                               └──  all c : Component | all p : Product | p in c.parts => (p.workstation.*succ = c.*workstation)
inv10 O:    │                                                                                                                                   └──  all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.*workstation)
inv10 B:    │                                                                                                                                       └──  all c : Component | all p : Product | p in c.parts => c.workstation = begin
iPDvKSknmvn99mTNp M:     │                                                                                                                                           └──  user added theme options. same as previous submission
inv1 T:     ├──  all w:Worker | all h:Human | all r:Robot | w -> h && w->r
inv1 T:     │   └──  all w:Worker | all h:Human | all r:Robot | w -> h & w->r
inv1 T:     │       └──  all w:Worker | all h:Human | all r:Robot | w -> h & w -> r
inv1 T:     │           └──  all w:Worker | all h:Human | all r:Robot | w -> h or w -> r
inv1 T:     │               └──  all w:Worker | w in Robot & w in Human
inv1 O:     │                   └──  all w:Worker | w in Robot && w in Human
inv1 C:     │                       └──  all w:Worker | w in Robot or w in Human
inv2 S:     │                           └──  (all ws:Workstation | all w:Worker | w in ws.workers) and (one ws:Workstation | w in ws.workers)
inv2 B:     │                               └──  (all ws:Workstation | all w:Worker | w in ws.workers) and (one ws:Workstation | all w:Worker | w in ws.workers)
inv2 B:     │                                   └──  (all ws:Workstation | all w:Worker | w in ws.workers) and (all w:Worker | one ws:Workstation | w in ws.workers)
inv2 C:     │                                       └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w:Worker | one ws:Workstation | w in ws.workers)
inv3 O:     │                                           └──  all c:Component | one ws:Workstation | c in ws.workstation
inv3 C:     │                                               └──  all c:Component | one ws:Workstation | ws in c.workstation
inv4 S:     │                                                   └──  all c:Components | some p:Products | c in p.parts and all c:Components | some m:Materials | c not in m.parts
inv4 S:     │                                                       └──  (all c:Components | some p:Products | c in p.parts) and (all c:Components | some m:Materials | c not in m.parts)
inv4 S:     │                                                           └──  (all c:Component | some p:Products | c in p.parts) and (all c:Component | some m:Materials | c not in m.parts)
inv4 B:     │                                                               └──  (all c:Component | some p:Product | c in p.parts) and (all c:Component | some m:Material | c not in m.parts)
inv5 T:     │                                                                   └──  all w : Workstation | (w.workers & Human) -> w.workers & Robot = {
inv5 T:     │                                                                       └──  all w : Workstation | (w.workers & Human) -> w.workers & Robot = {
inv5 T:     │                                                                           └──  all w : Workstation | (w.workers & Human) -> w.workers & Robot = {
inv1 S:     ├──  all h : Workers | h in (Human + Robots)
inv1 S:     │   └──  all h : Worker | h in (Human + Robots)
inv1 C:     │       └──  all h : Worker | h in (Human + Robot)
inv2 B:     │           └──  all w : Worker, wt : Workstation | #(wt.workers) > 1
inv2 B:     │               └──  all w : Worker, wt : Workstation | #(wt.workers) > 1 and w in wt.workers
inv2 B:     │                   └──  all w : Worker, wt : Workstation | #(wt.workers) > 1 and #(workers.w) > 1
inv2 B:     │                       └──  all w : Worker, wt : Workstation | #(wt.workers) > 1 and #(workers.w) = 1
inv2 B:     │                           └──  all w : Worker, wt : Workstation | #(wt.workers) = 1 and #(workers.w) = 1
inv2 S:     │                               └──  all w : Worker, wt : Workstation | #(wt.workers) == 1 and #(workers.w) = 1
inv2 U:     │                                   └──  all w : Worker, wt : Workstation | #(wt.workers) > 0 and #(workers.w) > 0
inv2 U:     │                                       └──  all w : Worker | #(workers.w) > 0 all  wt : Workstation | #(wt.workers) > 0
inv2 C:     │                                           └──  all w : Worker | #(workers.w) = 1 all  wt : Workstation | #(wt.workers) > 0
inv3 C:     │                                               └──  all c : Component | #(c.workstation) = 1
inv3 C:     │                                                   └──  all c : Component | #(c.workstation) = 1
inv4 C:     │                                                       └──  all m : Material | no m.parts all c : Component | some c.parts
inv5 E:     │                                                           └──   
inv5 C:     │                                                               └──  all  wt : Workstation | (wt.workers in Worker - Human) or (wt.workers in Worker - Robot)
inv6 U:     │                                                                   └──  all c : Component | c not in c.parts
inv6 C:     │                                                                       └──  all c : Component | c not in c.^parts
inv5 C:     │                                                                           └──  all  wt : Workstation | (wt.workers in Worker - Human) or (wt.workers in Worker - Robot)
inv7 O:     │                                                                               └──  all c : Component | no ((c + c.*parts) & Dangerous) or ((c + c.*parts) in Dangerous)
inv7 O:     │                                                                                   └──  all c : Product | no ((c + c.*parts) & Dangerous) or ((c + c.*parts) in Dangerous)
inv7 O:     │                                                                                       └──  all p : Product | no (p.*parts & Dangerous) or (p.*parts in Dangerous)
inv7 O:     │                                                                                           └──  all p : Product | (no p.*parts & Dangerous) or (p.*parts in Dangerous)
inv7 O:     │                                                                                               └──  all p : Product | (no (p.*parts & Dangerous)) or (p.*parts in Dangerous)
inv7 B:     │                                                                                                   └──  all p : Product | p in Dangerous => p.^parts in Dangerous
inv7 B:     │                                                                                                       └──  all p : Product | p in Dangerous => p.parts in Dangerous
inv7 O:     │                                                                                                           └──  all p : Product | p in Dangerous => parts.p in Dangerous
inv8 B:     │                                                                                                               └──  all c : Component | c in Dangerous => c.workstation.workers not in Human
inv9 E:     │                                                                                                                   └──   
inv9 S:     │                                                                                                                       └──  all
inv9 E:     │                                                                                                                           └──   
inv9 U:     │                                                                                                                               └──  all w : Workstation | w in begin => no succ.w
inv9 U:     │                                                                                                                                   └──  all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ
inv9 U:     │                                                                                                                                       └──  all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ all w : Workstation | w not in begin + end => one w.succ
inv9 U:     │                                                                                                                                           └──  all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ all w : Workstation | w not in w.^succ and w not in begin + end => one w.succ
inv9 U:     │                                                                                                                                               └──  all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ all w : Workstation | (w not in w.^succ) and w not in begin + end => one w.succ
inv9 U:     │                                                                                                                                                   └──  all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ all w : Workstation | (w not in w.^succ) and (w not in begin + end) => one w.succ
inv9 U:     │                                                                                                                                                       └──  all w : Workstation | w not in w.^succ all w : Workstation | w in begin => no succ.w all w : Workstation | w in end => no w.succ all w : Workstation | (w not in begin + end) => one w.succ
inv9 C:     │                                                                                                                                                           └──  all w : Workstation | w not in w.^succ all w : Workstation | no w.succ => w in end all w : Workstation | no succ.w => w in begin all w : Workstation | (w not in end) => one w.succ
inv10 E:    │                                                                                                                                                               └──   
inv10 B:    │                                                                                                                                                                   └──  all c : Component | c.parts not in succ.c.workstation
inv10 B:    │                                                                                                                                                                       └──  all c : Component | c.parts not in succ.(c.workstation)
inv9 C:     │                                                                                                                                                                           └──  all w : Workstation | w not in w.^succ all w : Workstation | no w.succ => w in end all w : Workstation | no succ.w => w in begin all w : Workstation | (w not in end) => one w.succ
inv10 B:    │                                                                                                                                                                               └──  all c : Component | c.parts not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                   └──  all c : Component | c.parts.workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                       └──  all p : Product | p.parts.workstation not in succ.(p.workstation)
inv10 B:    │                                                                                                                                                                                           └──  all p : Product | one p.workstation all p : Product | p.parts.workstation not in succ.(p.workstation)
inv10 B:    │                                                                                                                                                                                               └──  all p : Product | one p.workstation all p : Product | p.parts.workstation not in succ.(p.workstation)
inv10 B:    │                                                                                                                                                                                                   └──  all m : Material | one parts.m all p : Product | p.parts.workstation not in succ.(p.workstation)
inv10 B:    │                                                                                                                                                                                                       └──  all m : Material | some parts.m all p : Product | p.parts.workstation not in succ.(p.workstation)
inv10 B:    │                                                                                                                                                                                                           └──  all m : Material | some parts.m all c : Component | c.parts.workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                               └──  all c : Component | c.parts.workstation not in succ.(c.workstation)
inv10 S:    │                                                                                                                                                                                                                   └──  all c : Component | (c.parts - Materials).workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                                       └──  all c : Component | (c.parts - Material).workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                                           └──  all c : Component | c.parts.workstation not in succ.(c.workstation)
inv10 T:    │                                                                                                                                                                                                                               └──  all c : Component | c.parts.workstation not in succ.*(c.workstation)
inv10 B:    │                                                                                                                                                                                                                                   └──  all c : Component | c.parts.workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                                                       └──  all c : Component | c.*parts.workstation not in succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                                                           └──  all c : Component | c.^parts.workstation not in succ.(c.workstation)
inv10 T:    │                                                                                                                                                                                                                                               └──  all c : Component | c.^parts.workstation not in succ.^(c.workstation)
inv10 B:    │                                                                                                                                                                                                                                                   └──  all c : Component | c.^parts.workstation not in ^succ.(c.workstation)
inv10 B:    │                                                                                                                                                                                                                                                       └──  all c : Component | no c.^parts.workstation or (c.^parts.workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                           └──  all c : Component | no c.^parts.workstation or ((c.^parts - Material).workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                               └──  all c : Component | no c.^parts.workstation or (((c.^parts) - Material).workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                                   └──  all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                                       └──  all m : Material | some parts.m all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                                           └──  all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in ^succ.(c.workstation))
inv10 B:    │                                                                                                                                                                                                                                                                               └──  all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in *succ.(c.workstation))
inv2 S:     ├──  all ws in Workstation | #w.workers>0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 S:     │   └──  all ws in Workstation | #w.workers>0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 S:     │       └──  all ws in Workstation | #w.workers>0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv8 T:     │           └──  all c: Component, h: Human | c.Dangerous and h in c.workstation => not h.Worker
inv1 C:     │               └──  all w : Worker | w in Human+Robot
inv2 S:     │                   └──  all ws in Workstation | #w.workers>0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 S:     │                       └──  all ws in Workstation | #w.workers>0 all w: Worker | one w.workstation
inv2 S:     │                           └──  all ws in Workstation | #ws.workers>0 all w: Worker | one w.workstation
inv2 S:     │                               └──  all s in Workstation | #s.workers>0 all w: Worker | one w.workstation
inv2 B:     │                                   └──  all w: Worker | one w.workstation
inv2 S:     │                                       └──  all s in Workstation | #s.workers>0
inv2 U:     │                                           └──  all s : Workstation | #s.workers>0
inv2 O:     │                                               └──  all s : Workstation | #s.workers>0 all w: Worker | one w.workstation
inv2 U:     │                                                   └──  all s : Workstation | #s.workers>0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 C:     │                                                       └──  workers in Workstation one -> some Worker all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 U:     │                                                           └──  all s : Workstation | some s.workers all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 U:     │                                                               └──  all s : Workstation | #s.workers>=0 all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv2 C:     │                                                                   └──  workers in Workstation one -> some Worker all w,x : Workstation | w != x implies no (w.workers & x.workers)
inv3 C:     │                                                                       └──  all c: Component | one c.workstation
inv4 B:     │                                                                           └──  all c : Component | #c.parts>0 all m :Material | #m.parts>0
inv4 B:     │                                                                               └──  all c : Component | (#c.parts)>0 all m :Material | (#m.parts)>0
inv4 C:     │                                                                                   └──  all c : Component | (#c.parts)>0 all m :Material | (#m.parts)=0
inv5 S:     │                                                                                       └──  all w in Workstation | (w.workers in Robot) implies
inv5 S:     │                                                                                           └──  all w in Workstation | (w.workers in Robot) implies (w.workers not in Human)
inv5 B:     │                                                                                               └──  all w : Workstation | (w.workers in Robot) implies (w.workers not in Human)
inv5 T:     │                                                                                                   └──  all w : Workstation | no ( w.workers.Human & w.workers.Robot)
inv5 O:     │                                                                                                       └──  all w : Workstation | w.workers in Robot or w.workers in Human
inv5 O:     │                                                                                                           └──  all w : Workstation | w.workers in Robot or w.workers in Human
inv6 U:     │                                                                                                               └──  all c: Component | c not in c.parts
inv7 C:     │                                                                                                                   └──  all c : Component | all p : c.parts | (p in Dangerous) implies (c in Dangerous )
inv6 U:     │                                                                                                                       └──  all c: Component | c not in c.parts
inv8 T:     │                                                                                                                           └──  all c: Component, h: Human | c.Dangerous and h in c.workstation => not h.Worker
inv8 T:     │                                                                                                                               └──  all c: Component | c.Dangerous implies  c.workstation.worker not in Human
inv8 S:     │                                                                                                                                   └──  all c: Component | c in Dangerous implies  c.workstation.worker not in Human
inv8 B:     │                                                                                                                                       └──  all c: Component | c in Dangerous implies  c.workstation.workers not in Human
TZi4FHgXyDJvkwnNJ M:     │                                                                                                                                           └──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 S:     │   └──  all ws : Workstation | some w : Worker | w in ws.workers and (all w2 : Worker | one work : WorkStation | w2 in work.workers)
inv2 C:     │       └──  all ws : Workstation | some w : Worker | w in ws.workers and (all w2 : Worker | one work : Workstation | w2 in work.workers)
inv4 S:     │           └──  all c : Component | some c.parts all c : Materials | no c.parts
inv4 S:     │               └──  all c : Component | some c.parts all c : Materials | no c.parts
inv6 U:     │                   └──  all c: Component | not c in c.parts
inv6 U:     │                       └──  all c: Component | not c in c.parts
inv6 C:     │                           └──  all c: Component | not c in c.^parts
inv8 U:     │                               └──  all c : Component | all x : workstation.c | no ( x.workers & Human)
inv8 O:     │                                   └──  all c : Component | all x : c.workstation | no ( x.workers & Human)
inv8 C:     │                                       └──  all c : Dangerous & Component | all x : c.workstation | no ( x.workers & Human)
inv1 C:     ├──  all p: Worker | p in Human or p in Robot
inv2 B:     │   └──  all p: Workstation | one p.workers all x: Worker | x in Workstation.workers
inv2 O:     │       └──  all p: Workstation | one p.workers all x: Worker | one v: Workstation | x in v.workers
inv2 O:     │           └──  all p: Workstation | one p.workers all x: Worker | (one v: Workstation | x in v.workers)
inv2 C:     │               └──  all p: Workstation | some p.workers all x: Worker | (one v: Workstation | x in v.workers)
inv2 C:     │                   └──  all p: Workstation | some p.workers all x: Worker | one v: Workstation | x in v.workers
inv3 O:     │                       └──  all x: Component | x in #(Workstation)
inv3 O:     │                           └──  all x: Component | one v: Workstation | x in v
inv3 C:     │                               └──  all x: Component | one x.workstation
inv4 S:     │                                   └──  all x: Components | some x.parts all y: Material | no y.parts
inv4 C:     │                                       └──  all x: Component | some x.parts all y: Material | no y.parts
inv5 S:     │                                           └──  all x,y in Workstation.workers implies x = y
inv5 S:     │                                               └──  all x,y in Workstation.workers implies x == y
inv5 S:     │                                                   └──  all x in Workstation.workers implies x in Human or x in Robot
inv5 S:     │                                                       └──  (all x in Workstation.workers) implies (x in Human or x in Robot)
inv5 S:     │                                                           └──  (all x: Workstation.workers) implies (x in Human or x in Robot)
inv5 S:     │                                                               └──  all x: Workstation.workers implies x in Human or x in Robot
inv5 B:     │                                                                   └──  all x: Workstation.workers | x in Human or x in Robot
inv5 S:     │                                                                       └──  all x,y: Workstation.workers | x,y in Human or x,y in Robot
inv5 O:     │                                                                           └──  all x: Workstation | x.workers in Human or x.workers in Robot
inv6 C:     │                                                                               └──  all x: Component | x not in x.^parts
inv7 B:     │                                                                                   └──  all x: Component | (x.parts in Dangerous) implies x in Dangerous
inv7 B:     │                                                                                       └──  all x: Component | (x.parts in Dangerous) implies (x in Dangerous)
inv2 C:     ├──  (all ws : Workstation | (some w : Worker | w in ws.workers)) and (all w :Worker | one ws : Workstation | ws in workers.w)
inv3 S:     │   └──  all c : Component | one w : Workstation | ws in c.workstation
inv3 C:     │       └──  all c : Component | one w : Workstation | w in c.workstation
inv4 S:     │           └──  (all c : Components | some p: Product | p in c.parts) and (all m : Materials | no Product in m.parts)
inv4 T:     │               └──  (all c : Component | some p: Product | p in c.parts) and (all m : Material | no Product in m.parts)
inv4 C:     │                   └──  (all c : Component | some p: Product | p in c.parts) and (all m : Material | no p : Product| p in m.parts)
inv6 B:     │                       └──  all c,e : Component | e in c.parts iff e!=c
inv6 T:     │                           └──  all c : Component | no c in c.parts
inv6 U:     │                               └──  all c : Component | c not in c.parts
inv6 C:     │                                   └──  all c : Component | c not in c.^(parts)
qWvTFAn4sGaWN2wuP M:     │                                       └──  user added theme options. same as previous submission
inv1 C:     ├──  all w: Worker| w in Human or w in Robot
inv2 U:     │   └──  all w: Workstation| some p: Worker| p in w.workers
inv2 U:     │       └──  all w: Workstation| some p: Worker| p in w.workers and one workers.p
inv2 C:     │           └──  (all w: Workstation| some p: Worker| p in w.workers) && (all p: Worker| one workers.p)
inv3 O:     │               └──  all c: Component| one workstation.c
inv3 C:     │                   └──  all c: Component| one c.workstation
inv4 C:     │                       └──  (all c: Component| some c.parts) && (all m: Material| no m.parts)
inv5 B:     │                           └──  all w: Workstation| all h: Human| some r: Robot| h in w.workers => r not in w.workers
inv5 C:     │                               └──  all w: Workstation| all h: Human| all r: Robot| h in w.workers => r not in w.workers
inv6 U:     │                                   └──  all c: Component| c not in c.parts
inv6 C:     │                                       └──  all c: Component| c not in c.^(parts)
inv7 B:     │                                           └──  all c: Component| some d: c.parts| d in Dangerous => c.parts in Dangerous
inv7 B:     │                                               └──  all c: Component| some d: c.parts| d in Dangerous => c in Dangerous
inv7 C:     │                                                   └──  all c: Component| all d: c.parts| d in Dangerous => c in Dangerous
inv8 C:     │                                                       └──  all c: Component & Dangerous| all s: c.workstation| no (s.workers & Human)
inv9 S:     │                                                           └──  all w: Workstation| one w.^(succs)
inv9 B:     │                                                               └──  all w: Workstation| one w.^(succ)
inv9 B:     │                                                                   └──  all w: Workstation| one w.*(succ)
inv9 B:     │                                                                       └──  all w: Workstation| one w.^(succ)
inv9 S:     │                                                                           └──  all w, wb: Workstation|(wb in Begin and w!=wb) implies w in wb.^(succ)
inv9 U:     │                                                                               └──  all w, wb: Workstation|(wb in begin and w!=wb) implies w in wb.^(succ)
inv9 S:     │                                                                                   └──  all w, wb: Workstation|(wb in begin and w!=wb) implies w in wb.^(succ) all w: Workstation| w not in end implies one w.succ all w: Workstation| w not in w.^(succs)
inv9 C:     │                                                                                       └──  all w, wb: Workstation|(wb in begin and w!=wb) implies w in wb.^(succ) all w: Workstation| w not in end implies one w.succ all w: Workstation| w not in w.^(succ)
inv1 O:     ├──  Worker in Human or Worker in Robot
inv1 C:     │   └──  all x:Worker| x in Human or x in Robot
4zRdkv4Ax5RzGTiXG M:     ├──  user added theme options. same as previous submission
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 S:     │   └──  all w:Worker| s:Workstation | w in s.workers and s.worker != none
inv2 S:     │       └──  all w:Worker| s:Workstation | w in s.workers and #s.worker > 0
inv2 S:     │           └──  all w:Worker| s:Workstation | w in s.workers all s:Workstation| some s.workers
inv2 S:     │               └──  all w:Workers | s:Workstation | w in s.workers all s:Workstation| some s.workers
inv2 S:     │                   └──  all w : Workers | s : Workstation | w in s.workers all s : Workstation | some s.workers
inv2 S:     │                       └──  all w : Workers | all s : Workstation | w in s.workers all s : Workstation | some s.workers
inv2 B:     │                           └──  all w : Worker | all s : Workstation | w in s.workers all s : Workstation | some s.workers
inv2 B:     │                               └──  all w : Worker | all s : Workstation | w in s.workers
inv2 T:     │                                   └──  all w : Worker | all s : Workstation | w in s.workers and s.workers
inv2 B:     │                                       └──  all w : Worker | all s : Workstation | w in s.workers and some s.workers
inv2 B:     │                                           └──  all w : Worker | all s : Workstation | w in s.workers <=> some s.workers
inv2 C:     │                                               └──  all s : Workstation | some s.workers all w : Worker | one s : Workstation | w in s.workers
inv3 O:     │                                                   └──  all w : Component | one s : Workstation | w in s.workstation
inv3 O:     │                                                       └──  all w : Component | one s : Workstation | w in s.workstation
inv3 C:     │                                                           └──  all w : Component | one s : Workstation | s in w.workstation
inv4 S:     │                                                               └──  all p : Product | p in Material <=> no p.parts all p : Product | p in Components <=> some p.parts
inv4 C:     │                                                                   └──  all p : Product | p in Material <=> no p.parts all p : Product | p in Component <=> some p.parts
inv5 O:     │                                                                       └──  all s : Workstation | s.workers in Human or s.workers in Robot
inv6 C:     │                                                                           └──  all c : Component | c not in c.^parts
inv7 T:     │                                                                               └──  all c : Component | some c.^parts in Dangerous implies c in Dangerous
inv7 B:     │                                                                                   └──  all c : Component | c.^parts in Dangerous implies c in Dangerous
inv7 O:     │                                                                                       └──  all c : Component | all p : Product | p in c.^parts and p in Dangerous implies c in Dangerous
inv8 S:     │                                                                                           └──  all c : Component | s in c.workstation implies c.workstation.workers in Human
inv8 B:     │                                                                                               └──  all c : Component | c in Dangerous implies c.workstation.workers in Human
inv8 O:     │                                                                                                   └──  all c : Component | c in Dangerous implies c.workstation.workers in Robot
inv9 B:     │                                                                                                       └──  all w : Workstation | one w.succ
inv9 U:     │                                                                                                           └──  all w : Workstation | one w.succ or w in end
inv9 U:     │                                                                                                               └──  all w : Workstation | one w.succ or w = end all w : Workstation | w not in w.^succ
inv9 U:     │                                                                                                                   └──  all w : Workstation | one w.succ or w = end all w : Workstation | w not in w.^succ all w : Workstation | begin not in w.^succ
inv9 O:     │                                                                                                                       └──  all w : Workstation | one w.succ all w : Workstation | w not in w.^succ all w : Workstation | begin not in w.^succ
inv9 O:     │                                                                                                                           └──  all w : Workstation | one w.succ and begin != end all w : Workstation | w not in w.^succ all w : Workstation | begin not in w.^succ
inv9 U:     │                                                                                                                               └──  all w : Workstation | one w.succ or w = end or begin = end all w : Workstation | w not in w.^succ all w : Workstation | begin not in w.^succ
inv9 U:     │                                                                                                                                   └──  all w : Workstation - end | one w.succ or begin=end
inv9 U:     │                                                                                                                                       └──  all w : Workstation - end | one w.succ or begin=end all w : Workstation | w not in w.^succ
inv9 U:     │                                                                                                                                           └──  all w : Workstation - end | one w.succ or begin=end all w : Workstation | w not in w.^succ all w : Workstation - begin | w in Workstation.succ
inv9 O:     │                                                                                                                                               └──  no end.succ all w : Workstation - end | lone w.succ all w :Workstation - begin | w in begin.succ
inv9 S:     │                                                                                                                                                   └──  no end.succ all w : Workstation - end | lone w.succ Workstation - begin | w in begin.succ
inv9 O:     │                                                                                                                                                       └──  no end.succ all w : Workstation - end | lone w.succ Workstation - begin in begin.succ
inv9 O:     │                                                                                                                                                           └──  no end.succ all w : Workstation - end | lone w.succ and w not in w.^succ Workstation - begin in begin.succ
inv9 O:     │                                                                                                                                                               └──  no end.succ all w : Workstation - end | lone w.succ all w : Workstation | begin not in w.succ  Workstation - begin in begin.succ
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 U:     │   └──  all wo:Worker | one w:Workstation | wo in w.workers
inv2 C:     │       └──  all wo:Worker | one w:Workstation | wo in w.workers all w:Workstation | some wo:Worker | wo in w.workers
inv3 C:     │           └──  all c:Component | one w:Workstation | w in c.workstation
inv4 C:     │               └──  all c:Component | some p:Product | p in c.parts all m:Material | no m.parts
inv5 O:     │                   └──  all w:Workstation,r:Robot  | some h:Human | h in w.workers => r not in w.workers all w:Workstation,h:Human | some r:Robot | r in w.workers => h not in w.workers
inv5 O:     │                       └──  all w:Workstation,r:Robot  | one h:Human | h in w.workers => r not in w.workers all w:Workstation,h:Human | one r:Robot | r in w.workers => h not in w.workers
inv5 O:     │                           └──  all w:Workstation,r:Robot  | some h:Human | h in w.workers => r not in w.workers all w:Workstation,h:Human | some r:Robot | r in w.workers => h not in w.workers
inv5 O:     │                               └──  all w:Workstation,r:Robot | some h:Human | h in w.workers => r not in w.workers all w:Workstation,h:Human | some r:Robot | r in w.workers => h not in w.workers
inv6 U:     │                                   └──  all c:Component | c not in c.parts
inv5 C:     │                                       └──  all w:Workstation,r:Robot,h:Human| r not in w.workers or h not in w.workers
inv6 U:     │                                           └──  all c:Component | not c in c.parts
inv6 C:     │                                               └──  all c:Component | not c in c.^parts
inv7 U:     │                                                   └──  all c:Component | some p:Product | (p in Dangerous && p in c.parts) => c in Component
inv7 B:     │                                                       └──  all c:Component | Dangerous in c.^parts => c in Dangerous
inv7 B:     │                                                           └──  all c:Component | Dangerous in c.^parts => some (c & Dangerous & Component)
inv8 C:     │                                                               └──  all c:Component & Dangerous | all w:c.workstation | no (w.workers & Human)
inv1 C:     ├──  all w:Worker | w in Robot or w in Human
inv2 S:     │   └──  all ws:Workstation | all w:Worker | w in ws.workeres implies (one wss:Worstation | wss in workers.w)
inv2 S:     │       └──  all ws:Workstation | some w:Worker | w in ws.workeres and all w:Worker |one wss:Worstation | w in wss.workers)
inv2 C:     │           └──  (all ws : Workstation | some w : Worker | ws->w in workers) and (all w : Worker | one ws : Workstation | ws->w in workers)
inv2 C:     │               └──  (all ws : Workstation | some w : Worker | w in ws.workers) and (all w : Worker | one ws : Workstation | w in ws.workers)
inv3 S:     │                   └──  all c:Component | one ws:Worstation | ws in c.workstation
inv3 S:     │                       └──  all c:Component | one ws:Worstation | ws in c.workstation
inv3 S:     │                           └──  all c:Component | one ws:Worstation | ws in c.workstation
inv3 S:     │                               └──  all c : Component | one ws : Worstation | ws in c.workstation
inv1 C:     ├──  all w: Worker | w in Human or w in Robot
inv2 C:     │   └──  all w : Worker | one ws : Workstation | w in ws.workers all ws : Workstation | some w : Worker | w in ws.workers
inv5 S:     │       └──  all w : Workstation | all w : Worker | w in Human and w in ws.workers implies w not in Robot
inv5 U:     │           └──  all ws : Workstation | all w : Worker | w in Human and w in ws.workers implies w not in Robot
inv5 S:     │               └──  all h : Human | all r : Robots | all ws : Workstation | (r in ws.workers) implies (h not in ws.workers)
inv6 S:     │                   └──  all c:Components | c not in c.^(parts)
inv6 C:     │                       └──  all c:Component | c not in c.^(parts)
inv8 S:     │                           └──  all c : Components | all h : Human | c in Dangerous implies h not in c.workstation
inv7 S:     │                               └──  all c : Components | (some d: Dangerous | d in c.parts) implies c in Dangerous
inv8 U:     │                                   └──  all c : Component | all h : Human | c in Dangerous implies h not in c.workstation
inv1 T:     ├──  all h: Human, r: Robot | h in workers
inv1 T:     │   └──  all h: Human | h in workers
inv1 T:     │       └──  all h : Human | h in workers
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 S:     │   └──  all ws:Workstation | some w:Worker | w in ws.workers and (all wk:Worker | one ws1:Worktation | wk in ws1.workers)
inv2 C:     │       └──  all ws:Workstation | some w:Worker | w in ws.workers and (all wk:Worker | one ws1:Workstation | wk in ws1.workers)
inv3 S:     │           └──  all c:Component | one ws:Worktation | ws in c.workstation
inv3 C:     │               └──  all c:Component | one ws:Workstation | ws in c.workstation
inv4 T:     │                   └──  all c:Component | some p:Product | p in c.parts and (all m:Material | all p:Product | no p in m.parts)
inv4 U:     │                       └──  all c:Component | some p:Product | p in c.parts and (all m:Material | all p:Product | p not in m.parts)
inv4 U:     │                           └──  all c:Component | some p:Product | p in c.parts and (all m:Material | all p1:Product | p1 not in m.parts)
inv4 S:     │                               └──  (all c:Component | some p:Produt | p in c.parts) and (all m:Material | all p:Product | p not in m.parts)
inv4 C:     │                                   └──  (all c:Component | some p:Product | p in c.parts) and (all m:Material | all p:Product | p not in m.parts)
inv5 C:     │                                       └──  all h:Human, r:Robot, ws:Workstation | h in ws.workers implies r not in ws.workers
inv6 U:     │                                           └──  all c1,c2 : Component | c2 in c1.parts implies c1!=c2
inv6 O:     │                                               └──  all c1,c2 : Component | c2 in c1.parts and c1!=c2
inv6 O:     │                                                   └──  all c1,c2 : Component | c2 in c1.parts and c1!=c2
inv6 O:     │                                                       └──  all c1: Component, c2 : Component | c2 in c1.parts and c1!=c2
inv6 O:     │                                                           └──  all c:Component, c1:Component | c1 in c.parts and c!=c1
inv6 U:     │                                                               └──  all c:Component | c not in c.parts
inv6 U:     │                                                                   └──  all c1, c2 : Component | c2 in c1.parts implies c2!=c1
inv6 O:     │                                                                       └──  all c1, c2 : Component | c2 in c1.parts and c2!=c1
inv6 B:     │                                                                           └──  all c1, c2 : Component | c2 in c1.parts <=> c2!=c1
inv6 C:     │                                                                               └──  all c:Component | c not in c.^(parts)
inv6 S:     │                                                                                   └──  all c:Component, c1:Component | c1 not in c.parts and c1==c2
inv6 S:     │                                                                                       └──  all c:Component, c1:Component | c1 in c.parts and c1!=c2
inv6 O:     │                                                                                           └──  all c:Component, c1:Component | c1 in c.parts and c1!=c
inv6 C:     │                                                                                               └──  all c:Component | c not in c.^(parts)
inv7 C:     │                                                                                                   └──  all p:Product, c:Component | p in c.parts and p in Dangerous implies c in Dangerous
inv8 U:     │                                                                                                       └──  all d:Dangerous, h:Human, ws:Workstation | ws in d.workstation implies ws not in h.workstation
inv8 C:     │                                                                                                           └──  all d:Dangerous, h:Human, ws:Workstation | ws in d.workstation implies h not in ws.workers
EWf7sbfXwj7s52ncC M:     │                                                                                                               └──  user added theme options. same as previous submission
inv1 T:     ├──  all w:Worker | w in ( Human or Robot)
inv1 T:     │   └──  Worker in ( Human or Robot)
inv1 T:     │       └──  Human or Robot
inv1 T:     │           └──  all w:Worker | w in Human or Robot
inv1 C:     │               └──  all w:Worker | w in Human or w in Robot
inv1 C:     │                   └──  all w:Worker | w in Human or w in Robot
inv2 B:     │                       └──  all wk:Workstation, w:Worker | wk->w in workers and one Workstation.workers
inv2 B:     │                           └──  all wk:Workstation, w:Worker | wk->w in workers
inv2 B:     │                               └──  all wk:Workstation, w:Worker | wk->w in workers and one wk.workers
inv1 S:     ├──  all w: Worker | w in human or w in Robot
inv1 C:     │   └──  all w: Worker | w in Human or w in Robot
inv2 S:     │       └──  all w : Worker , one ws:Workstation | w in ws.workers
inv2 B:     │           └──  all w : Worker , ws:Workstation | w in ws.workers
inv2 S:     │               └──  all ws:Workstation | some ws.workers all w : Worker, one ws:Workstation | w in ws.workers
inv2 C:     │                   └──  all ws:Workstation | some ws.workers all w : Worker | one ws:Workstation | w in ws.workers
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 C:     │   └──  all ws : Workstation | some ws.workers all w : Worker | one ws:Workstation | w in ws.workers
inv3 T:     │       └──  all c : Component | one ws:Workstation| ws on c.workstation
inv3 C:     │           └──  all c : Component | one ws:Workstation| ws in c.workstation
inv4 B:     │               └──  all c : Component, m : Material | no c.parts and no m.parts
inv4 U:     │                   └──  all c : Component, m : Material | some c.parts and no m.parts
inv4 U:     │                       └──  all c : Component, m : Material | some c.^parts and no m.^parts
inv4 C:     │                           └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 U:     │                               └──  all ws : Workstation, w : Worker | ws.workers in Human implies not ws.workers in Robot and ws.workers in Robot implies not ws.workers in Human
inv5 U:     │                                   └──  all ws : Workstation | ws.workers in Human implies not ws.workers in Robot and ws.workers in Robot implies not ws.workers in Human
inv5 B:     │                                       └──  all ws : Workstation | (ws.workers in Human implies not ws.workers in Robot) and (ws.workers in Robot implies not ws.workers in Human)
inv5 B:     │                                           └──  all ws : Workstation | (ws.workers in Human implies not ws.workers in Robot) or (ws.workers in Robot implies not ws.workers in Human)
inv5 B:     │                                               └──  all ws : Workstation | (ws.workers in Human implies not (ws.workers in Robot)) or (ws.workers in Robot implies not (ws.workers in Human))
inv5 S:     │                                                   └──  None
inv5 S:     │                                                       └──  None
inv5 S:     │                                                           └──  None
inv5 S:     │                                                               └──  None
inv5 S:     │                                                                   └──  None
inv5 C:     │                                                                       └──  all ws : Workstation |  no (ws.workers & Robot) or no (ws.workers & Human)
inv5 T:     │                                                                           └──  all ws : Workstation | no (Robot & Human in ws.workers)
inv5 O:     │                                                                               └──  all ws : Workstation | (Robot & Human not in ws.workers)
inv5 B:     │                                                                                   └──  all ws : Workstation | (ws.workers in Human implies (ws.workers not in Robot)) or (ws.workers in Robot implies (ws.workers not in Human))
inv5 U:     │                                                                                       └──  all ws : Workstation | (Human in ws.workers implies (Robot in ws.workers)) or (Robot in ws.workers implies (Human in ws.workers))
inv5 C:     │                                                                                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv5 C:     │                                                                                               └──  all w: Workstation | no w.workers or (no w.workers & Robot) or (no w.workers & Human)
inv5 C:     │                                                                                                   └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv5 U:     │                                                                                                       └──  all w: Workstation | no (w.workers & Robot & Human)
inv5 C:     │                                                                                                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 C:     │                                                                                                               └──  all c : Component | c not in c.^parts
inv7 B:     │                                                                                                                   └──  all c : Component | c.parts in Dangerous implies c.^parts in Dangerous
inv7 U:     │                                                                                                                       └──  all c : Component | c.^parts in Dangerous <=> c.^parts in Dangerous
inv7 O:     │                                                                                                                           └──  all c : Component, d : Dangerous | d in c.^parts implies c in Dangerous
inv8 S:     │                                                                                                                               └──  all c : Components, h : Human | c in Dangerous implies h not in c.workstation.workers
inv8 C:     │                                                                                                                                   └──  all c : Component, h : Human | c in Dangerous implies h not in c.workstation.workers
inv9 S:     │                                                                                                                                       └──  all ws : Workstation | one b:Begin | one e:End | end in begin.succs
inv9 S:     │                                                                                                                                           └──  all ws : Workstation | one b:Begin | one e:End | end in b.succs
inv9 T:     │                                                                                                                                               └──  all ws : Workstation | end in begin.ws.succs and one end and one begin
inv9 T:     │                                                                                                                                                   └──  all ws : Workstation | end in begin.ws.succs
inv9 T:     │                                                                                                                                                       └──  all ws : Workstation | ws.end in ws.begin.succs
inv9 T:     │                                                                                                                                                           └──  all ws : Workstation | ws->end in ws.begin.succs
inv9 S:     │                                                                                                                                                               └──  all ws : Workstation | one end : Workstation | one begin : Workstation | end in begin.succs
inv9 T:     │                                                                                                                                                                   └──  all ws : Workstation | one end : Workstation | one begin : Workstation | end in begin.ws.succs
inv9 S:     │                                                                                                                                                                       └──  all ws : Workstation | one end : Workstation | one begin : Workstation | end in ws.succs
inv9 B:     │                                                                                                                                                                           └──  all ws : Workstation | one end : Workstation | one begin : Workstation | end in begin.succ
inv9 U:     │                                                                                                                                                                               └──  all ws : Workstation | one end : Workstation | one begin : Workstation | end in begin.*succ
inv9 U:     │                                                                                                                                                                                   └──  one end : Workstation | one begin : Workstation | end in begin.*succ
inv9 B:     │                                                                                                                                                                                       └──  all begin : Workstation, end : Workstation | end in begin.*succ
inv9 S:     │                                                                                                                                                                                           ├──  all begin : Workstation, end : Workstation | begin not in begin.succs and end in begin.*succs
inv9 B:     │                                                                                                                                                                                           │   └──  all begin : Workstation, end : Workstation | begin not in begin.succ and end in begin.*succ
inv9 B:     │                                                                                                                                                                                           │       └──  all begin : Workstation, end : Workstation | one begin and begin not in begin.succ and end in begin.*succ
inv9 S:     │                                                                                                                                                                                           └──  all begin : Workstation, end : Workstation | begin not in begin.succs and end in begin.*succs
inv1 U:     ├──  no Human & Robot
inv1 U:     │   └──  no Human & Robot
inv1 C:     │       └──  all w : Worker | w in Human or w in Robot
inv2 U:     │           └──  all w : Workstation | all worker : Worker | some w.workers and lone workers.worker
inv2 S:     │               └──  all worker : Worker | some w.workers and one workers.worker
inv2 U:     │                   └──  all w : Workstation | all worker : Worker | some w.workers and one workers.worker
inv2 C:     │                       └──  all w : Workstation | some w.workers all worker : Worker |  one workers.worker
inv3 C:     │                           └──  all c : Component | one c.workstation
inv4 S:     │                               └──  all p ; Product | p in Component => some p.parts and p in MAterial => no p.parts
inv4 S:     │                                   └──  all p ; Product | p in Component => some p.parts and p in Mterial => no p.parts
inv4 S:     │                                       └──  all p : Product | p in Component => some p.parts and p in Mterial => no p.parts
inv4 U:     │                                           └──  all p : Product | p in Component => some p.parts and p in Material => no p.parts
inv4 B:     │                                               └──  all p: Material | some p.parts all p: Component | no p.parts
inv4 C:     │                                                   └──  all c: Component | some c.parts all c: Material | no c.parts
inv5 C:     │                                                       └──  all w : Workstation  | no w.workers & Robot or no w.workers & Human
inv6 C:     │                                                           └──  all c : Component | c not in c.^parts
inv7 T:     │                                                               └──  all c : Component | c.^parts & Dangerous implies c in Dangerous
inv7 T:     │                                                                   └──  all c : Component | (c.^parts & Dangerous) implies c in Dangerous
inv7 O:     │                                                                       └──  all c : Component | some (c.^parts & Dangerous) implies c in Dangerous
inv8 C:     │                                                                           └──  all d : Dangerous | all w: d.workstation | no h : Human | h in w.workers
inv9 B:     │                                                                               └──  all w : Workstation | one c: begin.^succ | one d: ^succ.end | w in c and w in d
inv9 U:     │                                                                                   └──  all w : Workstation | one c: begin.*succ | one d: *succ.end | w in c and w in d
inv1 C:     ├──  Worker = Human + Robot
inv2 U:     │   └──  all w : Worker | all ws : Workstation | one (w.(~workers)) and some (ws.workers)
inv3 O:     │       └──  all c : Component | one c.(~workstation)
inv3 B:     │           └──  all c1, c2 : Component | all w : Workstation | (w in c1.workstation) implies (w not in c2.workstation)
inv2 U:     │               └──  all w : Worker | all ws : Workstation | one (w.(~workers)) and some (ws.workers)
inv1 C:     │                   └──  Worker = Human + Robot
inv4 U:     │                       └──  all c : Component | all m : Material | no m.parts and some c.parts
inv4 U:     │                           └──  all c : Component | all m : Material | no m.^parts and some c.parts
inv4 U:     │                               └──  all c : Component | all m : Material | no m.(^parts) and some c.parts
inv4 T:     │                                   └──  all c : Component | no m : Material | m.(^parts) and some c.parts
inv4 U:     │                                       └──  all c : Component | no m : Material | some m.(^parts) and some c.parts
inv4 U:     │                                           └──  all c : Component | all m : Material | no m.(^parts) or some c.parts
inv4 C:     │                                               └──  all c : Component | some (c.parts) all m : Material | no (m.parts)
inv2 U:     │                                                   └──  all w : Worker | all ws : Workstation | one (w.(~workers)) and some (ws.workers)
inv2 C:     │                                                       └──  all w : Worker | one (w.(~workers)) all ws : Workstation | some (ws.workers)
inv5 B:     │                                                           └──  no w : Workstation | all h : Human | all r : Robot | (h in w.workers) and (r in w.workers)
inv3 B:     │                                                               └──  all c1, c2 : Component | all w : Workstation | (w in c1.workstation) implies (w not in c2.workstation)
inv4 C:     │                                                                   └──  all c : Component | some (c.parts) all m : Material | no (m.parts)
inv5 B:     │                                                                       └──  no w : Workstation | all h : Human | all r : Robot | (h in w.workers) and (r in w.workers)
inv6 C:     │                                                                           └──  no c : Component | c in c.^(~parts)
inv7 O:     │                                                                               └──  all c : Component | all d : Dangerous | (d in c.^(parts)) implies (c in Dangerous)
inv3 B:     │                                                                                   └──  all c1, c2 : Component | all w : Workstation | (w in c1.workstation) implies (w not in c2.workstation)
inv4 C:     │                                                                                       └──  all c : Component | some (c.parts) all m : Material | no (m.parts)
inv5 B:     │                                                                                           └──  no w : Workstation | all h : Human | all r : Robot | (h in w.workers) and (r in w.workers)
inv5 C:     │                                                                                               └──  no (workers.Human & workers.Robot)
inv1 O:     ├──  all w : Worker | (w in Human or w in Robot) and no Human & Worker
inv1 B:     │   └──  all w : Worker | no Human & Worker
inv1 B:     │       └──  no Human & Worker
inv1 S:     │           └──  all w : Worker | (w in Human or w in Robot) and (w not in Human or w not in Robot
inv1 C:     │               └──  all w : Worker | (w in Human or w in Robot) and (w not in Human or w not in Robot)
inv2 T:     │                   └──  all w : Workstation | some worker : Worker | worker in w.workers and all wo : Worker | workers.wo
inv2 U:     │                       └──  all w : Workstation, v : Worker | some worker : Worker | worker in w.workers and some workers.v
inv2 S:     │                           └──  all w : Workstation, v : Worker | some worker : Worker
inv2 S:     │                               └──  all w : Workstation, v : Worker | some worker : Worker
inv3 C:     │                                   └──  all c : Component | one c.workstation
inv4 U:     │                                       └──  all c : Component | all m : Material | some c.parts and no m.parts
inv4 U:     │                                           └──  all c : Component | all m : Material |  no m.parts and some c.parts
inv4 U:     │                                               └──  all c : Component | all m : Material |  (no m.parts) and (some c.parts)
inv5 C:     │                                                   └──  all w : Workstation | (some Human & w.workers) implies (no Robot & w.workers)
inv6 S:     │                                                       └──  all c : Components | c not in c.parts
inv6 U:     │                                                           └──  all c : Component | c not in c.parts
inv6 O:     │                                                               └──  all c : Component | c not in c.*parts
inv6 C:     │                                                                   └──  all c : Component | c not in c.^parts
inv4 U:     │                                                                       └──  all c : Component, m : Material |  (no m.parts) and (some c.parts)
inv4 U:     │                                                                           └──  all c : Component, m : Material |  (no m.parts) and (some c.parts)
inv4 C:     │                                                                               └──  all c : Component | (some c.parts) all m : Material | no m.parts
inv4 C:     │                                                                                   └──  all c : Component | (some c.parts) all m : Material | no m.parts  no Material.parts
inv2 S:     │                                                                                       └──  all w : Workstation | some w.workers all wo : Worker | one workers.w
inv2 C:     │                                                                                           └──  all w : Workstation | some w.workers all wo : Worker | one workers.wo
inv7 B:     │                                                                                               └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 B:     │                                                                                                   └──  all c : Component | Dangerous in c.*parts implies c in Dangerous
inv7 O:     │                                                                                                       └──  all c : Component | some (Dangerous & c.*parts) implies c in Dangerous
inv8 T:     │                                                                                                           └──  no (workers.Human and Dangerous.workstation)
inv8 T:     │                                                                                                               └──  no (workers.Human and Dangerous.workstation)
inv8 C:     │                                                                                                                   └──  no (workers.Human & Dangerous.workstation)
inv8 C:     │                                                                                                                       └──  no (workers.Human & Dangerous.workstation)
inv9 U:     │                                                                                                                           └──  all w : Workstation | one w.succ or w in end
inv9 S:     │                                                                                                                               └──  all w : Workstation-w | one w.succ or w in end
inv9 U:     │                                                                                                                                   └──  all w : Workstation | one w.succ or w in end or w = w
inv9 B:     │                                                                                                                                       └──  all w : Workstation | one w.succ
inv9 B:     │                                                                                                                                           └──  one Workstation.succ
inv9 U:     │                                                                                                                                               └──  all w: Workstation | w not in w.succ
inv9 U:     │                                                                                                                                                   └──  all w: Workstation-end | (w not in w.succ) and one w.succ
inv9 U:     │                                                                                                                                                       └──  all w: Workstation-end | (w not in w.^succ) and one w.succ
inv9 B:     │                                                                                                                                                           └──  all w: Workstation-end | (w not in w.*succ) and one w.succ
inv9 S:     │                                                                                                                                                               └──  all w: Workstationd | (w not in w.*succ)
inv9 O:     │                                                                                                                                                                   └──  all w: Workstation | (w not in w.*succ)
inv9 O:     │                                                                                                                                                                       └──  all w: Workstation | (w not in w.*succ)
inv9 U:     │                                                                                                                                                                           └──  all w: Workstation | (w not in w.^succ)
inv9 U:     │                                                                                                                                                                               └──  all w: Workstation | (w not in w.^succ) and (one w.succ or w in end)
inv9 S:     │                                                                                                                                                                                   └──  all w: Workstation | (w not in w.^succ no end.succ
inv9 U:     │                                                                                                                                                                                       └──  all w: Workstation | (w not in w.^succ) no end.succ
inv9 T:     │                                                                                                                                                                                           └──  one Workstation.succ or end
inv9 B:     │                                                                                                                                                                                               └──  one Workstation-end.succ
inv9 S:     │                                                                                                                                                                                                   └──  all w : Workstations | w not in w.^succs
inv9 S:     │                                                                                                                                                                                                       └──  all w : Workstation | w not in w.^succs
inv9 U:     │                                                                                                                                                                                                           └──  all w : Workstation | w not in w.^succ
inv9 U:     │                                                                                                                                                                                                               └──  all w : Workstation-end | (w not in w.^succ) and (one w.succ) no end.succ no succ.begin
inv9 O:     │                                                                                                                                                                                                                   └──  all w : Workstation | (w not in w.^succ) and (one w.succ) no end.succ no succ.begin
inv9 S:     │                                                                                                                                                                                                                       └──  all w: Workstation | one w.succ all w, w': Workstation | w' in w.succ implies not w' in w.succ one begin.succ no end.succ
inv9 O:     │                                                                                                                                                                                                                           └──  all w: Workstation | one w.succ all w, v: Workstation | w' in w.succ implies not w' in w.succ one begin.succ no end.succ
inv9 O:     │                                                                                                                                                                                                                               └──  all w: Workstation | one w.succ all w, v: Workstation | v in w.succ implies not w in v.succ one begin.succ no end.succ
inv9 O:     │                                                                                                                                                                                                                                   └──  all w,v: Workstation | one w.succ and (w in v.*succ implies v not in w.*succ)  one begin.succ no end.succ
inv9 O:     │                                                                                                                                                                                                                                       └──  all w,v: Workstation | one w.succ and (w in v.*succ implies v not in w.*succ)  one begin.succ iff some Workstation-begin no end.succ
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 T:     │   └──  all ws : Workstation | some w : Worker | ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv2 C:     │       └──  all ws : Workstation | some w : Worker | w in ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv2 U:     │           └──  all ws : Workstation | some w : Worker | w in ws.workers
inv2 B:     │               └──  all ws : Workstation | lone w : Worker | w in ws.workers
inv2 C:     │                   └──  all ws : Workstation | some w : Worker | w in ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv2 C:     │                       └──  all ws : Workstation | some w : Worker | w in ws.workers all w : Worker | one ws : Workstation | w in ws.workers
inv4 S:     │                           └──  all c : Component | some
inv4 S:     │                               └──  all c : Component | some
inv4 S:     │                                   └──  all c : Component | some
inv4 S:     │                                       └──  all c : Component | some
inv4 S:     │                                           └──  all c : Component | some
inv3 U:     │                                               └──  all p : Product | (some p.parts => p in Component) or p in Material
inv3 U:     │                                                   └──  all p : Product | some p.parts => p in Component or p in Material
inv3 B:     │                                                       └──  all p : Product | (some p.parts and p in Component) or p in Material
inv3 B:     │                                                           └──  all p : Product | some p.parts and p in Component or p in Material
inv3 B:     │                                                               └──  all c : Component | some c.parts all m : Material | no m.parts
inv3 C:     │                                                                   └──  all c : Component | one c.workstation
inv4 U:     │                                                                       └──  all p : Product | some p.parts => p in Product or p in Material
inv4 U:     │                                                                           └──  all p : Product | (some p.parts and p in Product) or p in Material
inv5 C:     │                                                                               └──  all h : Human | all r : Robot | all ws : Workstation | (h in ws.workers => r not in ws.workers) and (r in ws.workers => h not in ws.workers)
inv6 U:     │                                                                                   └──  all c : Component | all p : c.parts | p != c
inv6 U:     │                                                                                       └──  all c : Component | all p : c.parts | c not in p
inv6 C:     │                                                                                           └──  all c : Component | not c in c.^parts
inv4 U:     │                                                                                               └──  all p : Product | (some p.parts and p in Component) or p in Material
inv4 U:     │                                                                                                   └──  all p : Product | (some p.parts => p in Component) or p in Material
inv4 S:     │                                                                                                       └──  all p : Product | some p.parts => p in Component ; p in Material
inv4 S:     │                                                                                                           └──  all p : Product | some p.parts in Component or p in Material
inv4 S:     │                                                                                                               └──  all p : Product | some p.parts in Component or p in Material
inv4 T:     │                                                                                                                   └──  all p : Product | some p.parts in Component or p in Material
inv4 C:     │                                                                                                                       └──  all c : Component | some c.parts all m : Material | no m.parts
inv7 O:     │                                                                                                                           └──  all c : Component | all d : Dangerous | d in c.^parts => c in Dangerous
inv8 B:     │                                                                                                                               └──  all c : Component | some h : Human | c in Dangerous => h not in c.workstation.workers
inv8 T:     │                                                                                                                                   └──  all c : Component & Dangerous | not (c.workstation & Human)
inv8 C:     │                                                                                                                                       └──  all c : Component | all h : Human | c in Dangerous => h not in c.workstation.workers
inv1 C:     ├──  all w: Worker | w in Human or w in Robot
inv2 T:     │   └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv2 T:     │       └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv2 T:     │           └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv2 T:     │               └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv2 T:     │                   └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv2 T:     │                       └──  all workstation: Workstation, worker: Worker| some workstation.Workstation
inv3 E:     │                           └──   
inv1 C:     │                               └──  all w: Worker | w in Human or w in Robot
inv2 U:     │                                   └──  all w: Worker | lone w.workstation
inv2 C:     │                                       └──  all x:Workstation | some x.workers all x:Worker | one workers.x
inv2 T:     │                                           └──  all w: workstation | some w.workstation
inv2 T:     │                                               └──  all w: workstation | some w.workstation all w: Worker | one workstation.w
inv2 T:     │                                                   └──  all w: workstation | some w.workstation all w: Worker | one workstation.w
inv2 T:     │                                                       └──  all w: workstation | some w.workers all w: Worker | one workers.w
inv2 C:     │                                                           └──  all x: Workstation | some x.workers all x: Worker | one workers.x
inv2 S:     │                                                               └──  all w Workstation | some w.workers all w Worker | one workers.w
inv2 C:     │                                                                   └──  all x: Workstation | some x.workers all x: Worker | one workers.x
inv1 C:     │                                                                       └──  all w: Worker | w in Human or w in Robot
inv1 C:     │                                                                           └──  all w: Worker | w in Human or w in Robot
inv3 C:     │                                                                               └──  all x: Component | one x.workstation
inv3 C:     │                                                                                   └──  all x: Component | one x.workstation
inv4 U:     │                                                                                       └──  all c:Component, m:Material | some c.parts and no m.parts
inv4 C:     │                                                                                           └──  all x:Component | some x.parts all x:Material | no x.parts
inv4 C:     │                                                                                               └──  all x:Component | some x.parts all x:Material | no x.parts
inv5 U:     │                                                                                                   └──  all x:Worker, y:Workstation| x in workers.y implies (not x in Human or not x in Robot)
inv5 C:     │                                                                                                       └──  all x:Human, y:Robot | no workers.x & workers.y
inv5 C:     │                                                                                                           └──  all x:Human, y:Robot | no workers.x & workers.y
inv6 U:     │                                                                                                               └──  all x:Component | x not in x.parts
inv6 C:     │                                                                                                                   └──  all x:Component | x not in x.^parts
inv7 O:     │                                                                                                                       └──  all x:Component | some (Dangerous & x.^parts) implies x in Dangerous
inv7 O:     │                                                                                                                           └──  all x:Component | some (Dangerous & x.^parts) implies x in Dangerous
inv8 B:     │                                                                                                                               └──  all x:Component| x in Dangerous implies x.workstation.workers not in Human
inv9 S:     │                                                                                                                                   └──  all x: Workstation | no x.succ & x != end implies some x.succ all x: Workstation | no x.succ & x != begin implies some x.^succ all x: Workstation | x != begin & x != end implies some x.^succ & some x.succ
inv8 B:     │                                                                                                                                       └──  all x:Component| x in Dangerous implies x.workstation.workers not in Human
inv9 U:     │                                                                                                                                           └──  all x: Workstation | x in begin or x in end or some x.succ
inv9 U:     │                                                                                                                                               └──  all x: Workstation | x not in x.^succ
inv1 U:     ├──  no Human & Robot
inv1 C:     │   └──  no Human & Robot Worker = Human + Robot
inv1 C:     │       └──  Worker = Human + Robot
inv2 C:     │           └──  all w:Workstation | some w.workers all wo:Worker | one workers.wo
inv3 O:     │               └──  all c:Component | one workstation.c
inv3 U:     │                   └──  all m:Material | m in Component  => one workstation.m
inv3 C:     │                       └──  all c:Component | one c.workstation
inv4 C:     │                           └──  all c:Component|some c.parts all m:Material | no m.parts
inv5 T:     │                               └──  all w:Workstation, wo:Worker | no ((w.workers & Human) and (w.workers & Robot))
inv5 U:     │                                   └──  all w:Workstation, wo:Worker | no ((w.workers & Human) & (w.workers & Robot))
inv5 U:     │                                       └──  all w:Workstation, wo:Worker | no (w.workers & Human & Robot)
inv5 C:     │                                           └──  all w:Workstation, wo:Worker | no (w.workers & Human) or no (w.workers & Robot)
inv6 C:     │                                               └──  all c:Component | c not in c.^(parts)
inv7 O:     │                                                   └──  all c :Component, d :Dangerous | d in c.^(parts) => c in Dangerous
inv8 S:     │                                                       └──  all d:Dangerous & Components, c:d.workstation | no (c.workers & Human)
inv8 C:     │                                                           └──  all d:Dangerous & Component, c:d.workstation | no (c.workers & Human)
inv8 C:     │                                                               └──  all d:Dangerous & Component, c:d.workstation, w:Worker | w in c.workers => w not in Human
inv9 B:     │                                                                   └──  all w:Workstation| w in end => w in begin.^(succ)
inv9 T:     │                                                                       └──  all w:Workstation|  end => w in begin.^(succ)
inv9 U:     │                                                                           └──  all disj b,e:Workstation| b in end and e in begin => b in e.^(succ)
inv9 U:     │                                                                               └──  all disj b,e:Workstation| b in end and e in begin => b in e.*(succ)
inv9 U:     │                                                                                   └──  all b,e:Workstation| b in end and e in begin and b !=e => b in e.*(succ)
inv9 U:     │                                                                                       └──  all b,e:Workstation| b in end and e in begin => b in e.*(succ) or b = e
C5JFayTwmTjheBJvY M:     │                                                                                           ├──  user added theme options. same as previous submission
inv1 C:     │                                                                                           │   └──  all w:Worker| w in Human <=> w not in Robot
inv9 U:     │                                                                                           └──  all disj w,x:Workstation| w in begin and x in end => x in w.^(succ)
inv9 U:     │                                                                                               └──  all disj w,x:Workstation| w in begin and x in end => x in w.*(succ)
inv9 B:     │                                                                                                   └──  all w,x:Workstation| w in begin and x in end => x in w.^(succ)
inv9 B:     │                                                                                                       └──  all w,x:Workstation| w in begin and x in end <=> x in w.^(succ)
inv1 C:     ├──  all x : Worker | x in Human or x in Robot
inv2 U:     │   └──  all x : Workstation | some y : Worker | y in x.workers
inv2 U:     │       └──  all x : Workstation | some y : Worker | y in x.workers all x : Worker | some y : Workstation | x in y.workers
inv2 U:     │           └──  all x : Workstation | #(x.workers) > 0 all x : Worker | some y : Workstation | x in y.workers
inv2 B:     │               └──  all x : Workstation | #(x.workers) > 0 all x : Worker | all y : Workstation | x in y.workers
inv2 C:     │                   └──  all x : Workstation | #(x.workers) > 0 all x : Worker | one y : Workstation | x in y.workers
inv3 S:     │                       └──  all x : Component | one y : Workstation | y in x.worktation
inv3 C:     │                           └──  all x : Component | one y : Workstation | y in x.workstation
inv4 B:     │                               └──  all y : Product | y.parts in Component all y : Product | y.parts not in Material
inv4 B:     │                                   └──  some y : Product | y.parts in Component some y : Product | y.parts not in Material
inv4 C:     │                                       └──  all x : Component | #(x.parts) > 0 all x : Material | #(x.parts) = 0
inv5 C:     │                                           └──  all x1,x2 : Worker | all y : Workstation | x1 in Human and x2 in Robot and x1 in y.workers implies x2 not in y.workers all x1,x2 : Worker | all y : Workstation | x1 in Human and x2 in Robot and x2 in y.workers implies x1 not in y.workers
inv6 S:     │                                               └──  all x1,x2 : Component |
inv5 C:     │                                                   └──  all x1,x2 : Worker | all y : Workstation | x1 in Human and x2 in Robot and x1 in y.workers implies x2 not in y.workers
inv6 U:     │                                                       └──  all x1,x2 : Component | x2 in x1.parts implies x2 != x1
inv6 O:     │                                                           └──  all x1,x2 : Product | x2 in x1.parts implies x2 not in Component
inv6 U:     │                                                               └──  all x1,x2 : Component | x2 in x1.parts implies x2 != x1
inv6 U:     │                                                                   └──  all x1,x2 : Component | x1 not in x1.parts
inv6 U:     │                                                                       └──  all x1 : Component | x1 not in x1.parts
inv6 C:     │                                                                           └──  all x1 : Component | x1 not in x1.^parts
inv6 C:     │                                                                               └──  all x1 : Component | x1 not in x1.^parts
inv7 B:     │                                                                                   └──  all x : Dangerous | x.^parts in Dangerous
inv7 S:     │                                                                                       └──  None
inv7 S:     │                                                                                           └──  None
inv7 B:     │                                                                                               └──  all x : Product | x.^parts in Dangerous implies x in Dangerous
inv7 B:     │                                                                                                   └──  all x : Product | Dangerous in x.^parts implies x in Dangerous
inv7 O:     │                                                                                                       └──  all x : Product | all y : Dangerous | y in x.^parts implies x in Dangerous
inv8 S:     │                                                                                                           └──  all x : Component | all y : Workstation |y in c.workstation and c in Dangerous implies y.workers not in Human
inv7 O:     │                                                                                                               └──  all x : Product | all y : Dangerous | y in x.^parts implies x in Dangerous
inv8 U:     │                                                                                                                   └──  all x : Component | all y : Workstation |y in y.workstation and y in Dangerous implies y.workers not in Human
inv8 U:     │                                                                                                                       └──  all x : Component | all y : Workstation |y in x.workstation and y in Dangerous implies y.workers not in Human
inv8 B:     │                                                                                                                           └──  all x : Component | all y : Workstation |y in x.workstation and x in Dangerous implies y.workers not in Human
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv1 S:     ├──  all w : Worker | w in Human or w in robots and (w not in Human or w not in robots)
inv1 C:     │   └──  all w : Worker | w in Human or w in Robot and (w not in Human or w not in Robot)
inv2 U:     │       └──  all w : Workstation, worker : Worker | #w.workers>0 and #workers.worker>0
inv2 U:     │           └──  all w : Workstation, worker : Worker | #w.workers>0 and #workers.worker=1
inv1 C:     │               └──  all w : Worker | w in Human or w in Robot and (w not in Human or w not in Robot)
inv2 U:     │                   └──  all w : Workstation, worker : Worker | #w.workers>0 and #workers.worker=1
inv2 C:     │                       └──  all w : Workstation | #w.workers>0 all worker : Worker | #workers.worker=1
inv2 U:     │                           └──  all w : Workstation|all worker : Worker | #w.workers>0 and #workers.worker=1
inv2 S:     │                               └──  all w : Workstation| #w.workers>0 all w : Worker | #w.worker=1
inv2 C:     │                                   └──  all w : Workstation| #w.workers>0 all w : Worker | #workers.w=1
2CqJpiByLkf2Ro6Ai M:     │                                       └──  user added theme options. same as previous submission
inv3 C:     │                                           └──  all c : Component | #c.workstation = 1
inv4 S:     │                                               └──  all m : Material | #m.parts=0 all c : Components | #c.parts>0
inv4 C:     │                                                   └──  all m : Material | #m.parts=0 all c : Component | #c.parts>0
inv5 O:     │                                                       └──  all w:Workstation | ( w.workers in Human or w.workers in Robot ) and ( w.workers not in Human or w.workers not in Robot)
inv6 U:     │                                                           └──  all c : Component | c not in c.parts
inv6 U:     │                                                               └──  all c,c1 : Component | c=c1 implies c not in c.parts
inv6 B:     │                                                                   └──  all c: Component | c.parts in Material
inv6 U:     │                                                                       └──  all c,c1 : Component | c!=c1 implies c not in c.parts
inv6 S:     │                                                                           └──  all c,c1 : Component | c==c1 implies c not in c.parts
inv6 S:     │                                                                               └──  all c,c1 : Component | c==c1 implies c not in c.parts
inv6 U:     │                                                                                   └──  all c,c1 : Component | c=c1 implies c not in c.parts
inv6 C:     │                                                                                       └──  all c : Component | c not in c.^parts
inv6 C:     │                                                                                           └──  all c : Component | c not in ^parts.c
inv6 C:     │                                                                                               └──  all c : Component | c not in ^parts.c
inv7 O:     │                                                                                                   └──  all c: Component | #c.^parts&Dangerous>0 implies c in Dangerous
inv8 S:     │                                                                                                       └──  all c : Components | c in Dangerous implies c.workstation.workers in Robot
inv8 O:     │                                                                                                           └──  all c : Component | c in Dangerous implies c.workstation.workers in Robot
inv9 T:     │                                                                                                               └──  all w:workstation | ( w in begin and #w.succ=1 and #succ.w=0   ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 )
inv9 T:     │                                                                                                                   └──  all w:workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 )
inv9 B:     │                                                                                                                       └──  all w:Workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 )
inv9 S:     │                                                                                                                           └──  all w:Workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end adn #w.succ=0 and #succ.w=0)
inv9 U:     │                                                                                                                               └──  all w:Workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)
inv9 B:     │                                                                                                                                   └──  all w:Workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=1 and #succ.w=1)
inv9 U:     │                                                                                                                                       └──  all w:Workstation | ( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)
inv9 B:     │                                                                                                                                           └──  all w:Workstation | #w.succ=1 and #succ.w=1
inv9 B:     │                                                                                                                                               └──  all w:Workstation | #w.succ=1 and #succ.w=1 and w not in w.succ and w not in succ.w
inv9 U:     │                                                                                                                                                   └──  all w:Workstation | (( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)) and w not in w.succ and w not in succ.w
inv9 C:     │                                                                                                                                                       └──  all w:Workstation | (( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)) and w not in w.^succ and w not in ^succ.w
inv9 C:     │                                                                                                                                                           └──  all w:Workstation | (( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)) and w not in w.^succ and w not in ^succ.w
inv10 O:    │                                                                                                                                                               └──  all c : Component | c.^parts.workstation in ^succ.(c.workstation)
oMMhYJjnv94avuA53 M:     │                                                                                                                                                                   └──  user added theme options. same as previous submission
inv9 C:     │                                                                                                                                                                       └──  all w:Workstation | (( w in begin and #w.succ=1 and #succ.w=0  ) or ( w in end and #w.succ=0 and #succ.w=1   ) or ( #w.succ=1 and #succ.w=1 ) or (w in begin and w in end and #w.succ=0 and #succ.w=0)) and w not in w.^succ and w not in ^succ.w
inv1 T:     ├──  all a:Worker | Human.a || Robot.a
inv1 T:     │   └──  all a:Worker | one a.Human or one a.Robot
inv1 T:     │       └──  all a:Human | all b:Robot | not a& b
inv1 S:     │           └──  worker = Human + Robot
inv1 C:     │               └──  Worker = Human + Robot
inv2 T:     │                   └──  all w:Workstation | some w.workers all w:Worker | one Workstation.w
inv2 C:     │                       └──  all w:Workstation | some w.workers all w:Worker | one work:Workstation|  w in work.workers
inv3 O:     │                           └──  all c:Component | one w:Workstation | c in w.workstation
inv3 C:     │                               └──  all c:Component | one c.workstation
inv4 C:     │                                   └──  all c:Component | some c.parts all c:Material | no c.parts
inv5 T:     │                                       └──  all w:Workstation |all a:w.workers | no Human.a & Robot.a
inv5 T:     │                                           └──  all w:Workstation |all a:w.workers | no Human.a & Robot.a
inv5 C:     │                                               └──  all w:Workstation | no (w.workers & Human) or no (w.workers & Robot)
inv5 T:     │                                                   └──  all w:Workstation |  (w.workers & Human) or  (w.workers & Robot)
inv6 U:     │                                                       └──  all c: Component | c not in c.parts
inv6 C:     │                                                           └──  all c: Component | c not in c.^parts
inv7 S:     │                                                               └──  all c :Component | dangerous in c.parts implies Dangerous in c
inv7 B:     │                                                                   └──  all c :Component | Dangerous in c.parts implies Dangerous in c
inv7 B:     │                                                                       └──  all c :Component | Dangerous in c.^parts implies Dangerous in c
inv7 B:     │                                                                           └──  all c :Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                               └──  all c :Component | Dangerous in c.parts implies  Dangerous in c
inv7 U:     │                                                                                   └──  all c :Component | Dangerous in c.*parts implies Dangerous in c.*parts
inv7 B:     │                                                                                       └──  all c :Component | Dangerous in c.*parts implies Dangerous in c.parts
inv7 B:     │                                                                                           └──  all c :Component | Dangerous in c.^parts implies Dangerous in c
inv7 B:     │                                                                                               └──  all c :Component | Dangerous in c.^parts implies  Dangerous in c
inv8 S:     │                                                                                                   └──  all c:Component |some w:Workstation |Dangerous in c implies (w.worksers & Robot)
inv8 T:     │                                                                                                       └──  all c:Component |some w:Workstation |Dangerous in c implies (w.workers & Robot)
inv8 T:     │                                                                                                           └──  all c:Component |all w:Workstation | Dangerous in c implies (w.workers & Robot)
inv7 B:     │                                                                                                               └──  all c :Component | Dangerous in c.^parts implies  Dangerous in c
inv8 T:     │                                                                                                                   └──  all c:Component & Dangerous |all w: c.Workstation | no (w.workers & Human)
inv8 T:     │                                                                                                                       └──  all c:Component & Dangerous |all w: c.Workstation | no (w.workers & Human)
inv8 C:     │                                                                                                                           └──  all c:Component & Dangerous |all w: c.workstation | no (w.workers & Human)
inv1 C:     ├──  all x: Worker| x in Human or x in Robot
inv7 E:     │   └──   
inv8 O:     │       └──  all x: Component, y: Worker, z: Workstation | x in Dangerous and y in z.workers implies y not in Human
inv8 O:     │           └──  all x: Component, y: Worker, z: Workstation | x in Dangerous and y in z.workers implies y in Robot
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 C:     │   └──  ( all work : Workstation | some w : Worker | work->w in workers) and (all w : Worker | one ws : Workstation | ws->w in workers)
inv2 B:     │       └──  ( all work : Workstation | all w : Worker | work->w in workers) and (all w : Worker | one ws : Workstation | ws->w in workers)
inv3 C:     │           └──  all c : Component | one w : Workstation | c->w in workstation
inv4 U:     │               └──  all c : Component | all m : Material | some p : Product | c->p in parts and m->p not in parts
inv5 S:     │                   └──  all w1,w2 : Worker | all w : workstation |( w->w1 in workers and w->w2 and w1 in ) implies w2 in Human)
inv5 S:     │                       └──  all w1,w2 : Worker | all w : Workstation |( w->w1 in workers and w->w2 in workers and w1 in Human ) implies w2 in Human)
inv5 O:     │                           └──  all w1,w2 : Worker | all w : Workstation |( w->w1 in workers and w->w2 in workers and w1 in Human ) implies w2 in Human
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 C:     │   └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv2 U:     │       └──  all ws : Workstation, w : Worker | some ws.workers && one workers.w
inv2 S:     │           └──  all ws : Workstation, w : Worker | some ws.workers & one workers.w
inv2 C:     │               └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv3 C:     │                   └──  all c : Component | one c.workstation
inv4 C:     │                       └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 C:     │                           └──  all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 not in Robot)
inv5 O:     │                               └──  all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv5 O:     │                                   └──  all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv6 U:     │                                       └──  all c : Component | c not in c.parts
inv5 O:     │                                           └──  all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv6 U:     │                                               └──  all c : Component | c not in c.parts
inv7 C:     │                                                   └──  all c : Component, d : Dangerous | d in c.parts implies c in Dangerous
inv6 O:     │                                                       └──  all c : Component | no parts.c
inv6 U:     │                                                           └──  all p : Product | p in Component implies p not in p.parts
inv6 C:     │                                                               └──  all c : Component | c not in c.^(parts)
inv8 S:     │                                                                   └──  all c : component, w : Worker | c in Dangerous implies c.workstation.workers not in Human
inv8 B:     │                                                                       └──  all c : Component, w : Worker | c in Dangerous implies c.workstation.workers not in Human
inv8 B:     │                                                                           └──  all c : Component | c in Dangerous implies c.workstation.workers not in Human
inv9 S:     │                                                                               └──  all e : entry | end in e.*(succs)
inv9 S:     │                                                                                   └──  all b : begin | end in e.*(succs)
inv9 S:     │                                                                                       └──  all b : begin | end in b.*(succs)
inv9 S:     │                                                                                           └──  all ws : Workstation| ws in begin implies ws.*(succs) in end
inv9 S:     │                                                                                               └──  all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succs) && ws1 in end)
inv9 U:     │                                                                                                   └──  all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succ) && ws1 in end)
inv9 U:     │                                                                                                       └──  all b: begin | end in b.*(succ)
inv9 B:     │                                                                                                           └──  all b: begin | end in b.^(succ)
inv9 B:     │                                                                                                               └──  all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.^(succ) && ws1 in end)
inv9 U:     │                                                                                                                   └──  all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succ) && ws1 in end)
inv9 B:     │                                                                                                                       └──  all ws : Workstation| ws in begin implies (some ws1 : end | end in ws.^(succ))
inv9 B:     │                                                                                                                           └──  all ws : Workstation| ws in begin implies (some ws1 : end | end in ws1.^(succ))
inv9 U:     │                                                                                                                               └──  all ws : Workstation| ws in begin implies (some ws1 : end | end in ws1.*(succ))
inv9 B:     │                                                                                                                                   └──  all ws : Workstation| ws in begin implies (some ws1 : end | end in ws.^(succ))
inv9 B:     │                                                                                                                                       └──  all ws : Workstation| ws in begin implies (some ws1 : end | ws1 in ws.^(succ))
inv9 U:     │                                                                                                                                           └──  all ws : Workstation| ws in begin implies (some ws1 : end | ws1 in ws.^(succ)) or ws in end
inv9 S:     │                                                                                                                                               └──  all ws : Workstation| ws in begin implies end in ws.^(succs)
inv9 U:     │                                                                                                                                                   └──  all ws : Workstation| ws in begin implies end in ws.*(succ)
inv9 S:     │                                                                                                                                                       └──  all ws : Workstation| ws in begin implies some succs.end
inv9 S:     │                                                                                                                                                           └──  all ws : Workstation| ws in begin implies one ws.^(succs).end
inv9 T:     │                                                                                                                                                               └──  all ws : Workstation| ws in begin implies one ws.^(succ).end
inv9 T:     │                                                                                                                                                                   └──  all ws : Workstation| ws in begin implies one ws.^(succ) in end
inv9 B:     │                                                                                                                                                                       └──  all ws : Workstation| ws in begin implies ws.^(succ) in end
inv9 B:     │                                                                                                                                                                           └──  all ws : Workstation | ws in begin implies some ws.^(succ) & end
inv9 U:     │                                                                                                                                                                               └──  all ws : Workstation | ws in begin implies some ws.*(succ) & end
inv9 T:     │                                                                                                                                                                                   └──  all ws : Workstation | ws in begin implies ws.*(succ) & end
inv9 U:     │                                                                                                                                                                                       └──  all ws : Workstation | ws in begin implies one (ws.*(succ) & end)
inv9 B:     │                                                                                                                                                                                           └──  all ws : Workstation | one (ws.*(succ) & end) && one ws.*(succ) & begin
inv9 S:     │                                                                                                                                                                                               └──  all ws : Workstation | (ws in begin implies some ws.*(succ) & end) && (ws in end implies no ws.succ
inv9 U:     │                                                                                                                                                                                                   └──  all ws : Workstation | (ws in begin implies some ws.*(succ) & end) && (ws in end implies no ws.succ)
inv9 U:     │                                                                                                                                                                                                       └──  all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end))
inv9 U:     │                                                                                                                                                                                                           └──  all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or begin = end
inv9 U:     │                                                                                                                                                                                                               └──  all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (ws in begin && ws in end)
inv9 U:     │                                                                                                                                                                                                                   └──  all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (begin.succ in end)
inv9 U:     │                                                                                                                                                                                                                       └──  all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (ws in begin and ws.succ in end)
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 S:     │   └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws2.wokers and ws1 != ws2
inv2 U:     │       └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in succ.ws1
inv2 U:     │           └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ
inv2 T:     │               └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in succ
inv2 T:     │                   └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in succ.workers
inv2 T:     │                       └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies no worker in succ.workers
inv2 T:     │                           └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies no worker in succ.workers
inv2 T:     │                               └──  some ws1 : Workstation | all worker : Worker | worker in ws1.workers implies no worker in succ.workers
inv2 T:     │                                   └──  some ws1 : Workstation | all worker : Worker | worker in workers.ws1 implies no worker in ws1.succ.workers
inv2 T:     │                                       └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies no worker in ws1.succ.workers
inv2 T:     │                                           └──  all ws1 : Workstation | all worker : Worker |some worker in ws1.workers implies no worker in ws1.succ.workers
inv2 T:     │                                               └──  all ws1 : Workstation | all worker : Worker |some worker in ws1.workers and no worker in ws1.succ.workers
inv2 T:     │                                                   └──  all worker : Worker | worker in workers and no worker in succ.workers
inv2 T:     │                                                       └──  all worker : Worker | worker in workers and worker not in succ.workers
inv2 B:     │                                                           └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers and worker not in ws1.succ.workers
inv2 B:     │                                                               └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers
inv2 T:     │                                                                   └──  all ws1 : Workstation | all worker : Worker | some worker in ws1.workers implies worker not in ws1.succ.workers
inv2 T:     │                                                                       └──  all ws1 : Workstation | all worker : Worker | some worker in ws1.workers implies no worker in ws1.succ.workers
inv2 B:     │                                                                           └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers
inv2 T:     │                                                                               └──  all ws : Workstation | all worker : Worker | some ws.workers.worker and no worker in ws.succ.workers
inv2 S:     │                                                                                   └──  all ws : Workstation | all worker : Worker | worker in ws.workers implies worker not in ws1.succ.workers
inv2 B:     │                                                                                       └──  all ws : Workstation | all worker : Worker | worker in ws.workers implies worker not in ws.succ.workers
inv2 B:     │                                                                                           └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws2.workers and ws1 != ws2
inv2 U:     │                                                                                               └──  all ws1,ws2 : Workstation | all worker : Worker | worker in workers.ws1 implies worker not in ws2.workers and ws1 != ws2
inv2 U:     │                                                                                                   └──  all ws1,ws2 : Workstation | all worker : Worker | worker in workers.ws1 implies worker not in workers.ws2 and ws1 != ws2
inv2 B:     │                                                                                                       └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws2.workers and ws1 != ws2
inv2 B:     │                                                                                                           └──  all ws1,ws2 : Workstation | some worker : Worker | worker in ws1.workers implies worker not in ws2.workers and ws1 != ws2
inv2 B:     │                                                                                                               └──  all ws1 : Workstation | some worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers
inv2 B:     │                                                                                                                   └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers
inv2 S:     │                                                                                                                       └──  all ws1 : Workstation | all w1,w2 : Worker | w1 in ws1.workers  and w2 in ws1.workers implies ws1 != ws2
inv2 B:     │                                                                                                                           └──  all ws1 : Workstation | all w1,w2 : Worker | w1 in ws1.workers  and w2 in ws1.workers implies w1 != w2
inv2 B:     │                                                                                                                               └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers and no succ.workers.worker
inv2 T:     │                                                                                                                                   └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers and no succ.*(workers.worker)
inv2 B:     │                                                                                                                                       └──  all ws1 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws1.succ.workers
inv2 B:     │                                                                                                                                           └──  all ws1,ws2 : Workstation | all worker : Worker | worker in ws1.workers implies worker not in ws2.workers
inv1 C:     ├──  Worker = Human + Robot
inv2 U:     │   └──  all w:Worker | some a:Workstation | w in a.workers
inv2 T:     │       └──  all w:Worker | all a:Workstation | some (w in a.workers)
inv2 S:     │           └──  all a:worker|one w:Workstation | a in w.workers all w:Workstation | some w.workers
inv2 S:     │               └──  all a:worker|(one w:Workstation | a in w.workers) all w:Workstation | some w.workers
inv2 C:     │                   └──  all a:Worker|(one w:Workstation | a in w.workers) all w:Workstation | some w.workers
inv3 O:     │                       └──  all c:Component | one workstation.c
inv3 C:     │                           └──  all c:Component | #c.workstation=1
inv4 C:     │                               └──  all c:Component | some c.parts all m:Material | no m.parts
inv4 C:     │                                   └──  all c:Component | some c.parts all m:Material | no m.parts
inv5 U:     │                                       └──  all w:Workstation | (Human.workers + Robot.workers) in w
inv5 T:     │                                           └──  all w:Workstation | Human in w.workers implies no Robot in w.workers
inv5 B:     │                                               └──  all w:Workstation | Human in w.workers implies Robot not in w.workers
inv5 C:     │                                                   └──  all w:Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 U:     │                                                       └──  all c:Component| c not in c.parts
inv6 U:     │                                                           └──  all c:Component| not c in c.parts
inv6 C:     │                                                               └──  all c:Component| not c in c.^parts
inv7 S:     │                                                                   └──  all c:Component | p:c.parts| p in Dangerous implies c in Dangerous
inv7 C:     │                                                                       └──  all c:Component | all p:c.parts| p in Dangerous implies c in Dangerous
inv8 B:     │                                                                           └──  all c:Component|all w:c.workstation |c in Dangerous implies Human not in w.workers
inv8 C:     │                                                                               └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv1 C:     ├──  Human & Robot = none Worker = Human + Robot
inv1 C:     │   └──  Worker = Human + Robot
inv2 U:     │       └──  all ws : Workstation | ws.workers != none all w : Worker | some ws : Workstation | w in ws.workers
inv2 C:     │           └──  all ws : Workstation | ws.workers != none all w : Worker | one ws : Workstation | w in ws.workers
inv3 C:     │               └──  all c: Component | one ws: Workstation | ws in c.workstation
inv4 S:     │                   └──  all c: Components | c.parts <> none all m: Materials | m.parts = none
inv4 S:     │                       └──  all c: Components | c.parts != none all m: Materials | m.parts = none
inv4 S:     │                           └──  all c: Component | c.parts != none all m: Materials | m.parts = none
inv4 C:     │                               └──  all c: Component | c.parts != none all m: Material | m.parts = none
inv5 O:     │                                   └──  all ws: Workstation | ws.workers in Human or ws.workers in Robot
inv6 U:     │                                       └──  all c: Component | c not in c.parts
inv6 C:     │                                           └──  all c: Component | c not in c.^parts
inv6 O:     │                                               └──  all c: Component | c not in c.*parts
inv6 C:     │                                                   └──  all c: Component | c not in c.^parts
inv7 B:     │                                                       └──  all c: Component | some p: c.parts | p in Dangerous implies c in Dangerous
inv7 B:     │                                                           └──  all c: Component | some p: c.^parts | p in Dangerous implies c in Dangerous
inv7 C:     │                                                               └──  all c: Component | all p: c.parts | p in Dangerous implies c in Dangerous
inv8 S:     │                                                                   └──  all c: Components + Dangerous | no h: Human | some wc: c.workstation | h in wc.workers
inv8 O:     │                                                                       └──  all c: Component + Dangerous | no h: Human | some wc: c.workstation | h in wc.workers
inv8 O:     │                                                                           └──  all c: Component + Dangerous | no h: Human | some wc: c.^workstation | h in wc.workers
inv8 U:     │                                                                               └──  all wc: Human.workstation | no d: Dangerous | d in wc
inv8 O:     │                                                                                   └──  all d: Dangerous | all wc: d.workstation | wc.workers in Robot
inv9 U:     │                                                                                       └──  all wc: Workstation | wc not in wc.^succ
inv9 S:     │                                                                                           └──  all wc: Workstation | wc not in wc.^succ and all wc1, wc2: wc.succ | wc1 == wc2
inv9 U:     │                                                                                               └──  all wc: Workstation | wc not in wc.^succ and all wc1, wc2: wc.succ | wc1 = wc2
inv10 S:    │                                                                                                   └──  all c: Component |
inv9 O:     │                                                                                                       └──  all wc: Workstation | wc not in wc.^succ and #wc.succ = 1
inv9 B:     │                                                                                                           └──  all wc: Workstation | #wc.succ = 1
inv9 O:     │                                                                                                               └──  all wc: Workstation | wc not in wc.^succ and #wc.succ = 1
inv9 U:     │                                                                                                                   └──  all wc: Workstation | wc not in wc.^succ and (#wc.succ = 1 or #wc.succ = 0)
inv9 O:     │                                                                                                                       └──  all wc: Workstation | wc not in wc.^succ and (#wc.succ = 1 or #wc.succ = 0) and all wc2: Workstation - wc | wc2 in wc.^succ
inv9 U:     │                                                                                                                           └──  all wc: Workstation | wc not in wc.^succ all wc: Workstation | (wc in begin and #wc.succ = 1 and all wc2: Workstation - wc | wc2 in wc.^succ) or (wc in end and wc.succ = none) or (wc not in begin and wc not in end and #wc.succ = 1)
inv9 C:     │                                                                                                                               └──  all wc: Workstation | wc not in wc.^succ all wc: Workstation | (wc in begin and #wc.succ = 1 and all wc2: Workstation - wc | wc2 in wc.^succ) or (wc in end and wc.succ = none) or (wc not in begin and wc not in end and #wc.succ = 1 and one wc3: Workstation - wc | wc3.succ = wc)
inv10 B:    │                                                                                                                                   └──  all c: Component | all p: c.parts | p.workstation in c.^workstation
inv10 O:    │                                                                                                                                       └──  all c: Component | all p: c.parts | p.workstation in c.workstation.^workstation
inv10 O:    │                                                                                                                                           └──  all c: Component | all p: c.parts | p.workstation in (c.workstation).^workstation
inv10 B:    │                                                                                                                                               └──  all c: Component | all p: c.parts | p.workstation in (c.workstation).^succ
inv10 B:    │                                                                                                                                                   └──  all c: Component | all p: c.parts | c.workstation in (p.workstation).^succ
inv10 B:    │                                                                                                                                                       └──  all c: Component | all p: c.parts | c.workstation in (p.workstation).*succ
inv10 B:    │                                                                                                                                                           └──  all c: Component | all p: c.parts | c.workstation in (p.workstation).^succ
inv10 B:    │                                                                                                                                                               └──  all c: Component | all p: c.parts | c.workstation in (p.workstation).^succ
inv10 B:    │                                                                                                                                                                   └──  all c: Component | all p: c.parts & Component | c.workstation in (p.workstation).^succ
inv10 B:    │                                                                                                                                                                       └──  all c: Component | all p: c.parts & Component | c.workstation in (p.workstation).*succ
inv10 B:    │                                                                                                                                                                           └──  all c: Component | all p: c.parts & Component | c.workstation in (p.workstation).^succ
inv1 C:     ├──  all u : Worker | u in Human or u in Robot
inv2 S:     │   └──  all ws : Workstation | some ws.workers | all w : Worker | w in Workstation.workers
inv2 S:     │       └──  all ws : Workstation | some ws.workers | all w : Worker | w in Workstation.workers
inv2 S:     │           └──  some Workstation.workers | all w : Worker | w in Workstation.workers
inv2 U:     │               └──  all w : Worker | w in Workstation.workers
inv2 S:     │                   └──  all ws : Workstation | some sw.workers | all w : Worker | w in Workstation.workers
inv2 S:     │                       └──  all ws : Workstation | some sw.workers | all w : Worker | w in Workstation.workers
inv2 S:     │                           └──  all ws : Workstation | some ws.workers | all w : Worker | w in Workstation.workers
inv2 U:     │                               └──  all w : Worker | w in Workstation.workers
inv2 S:     │                                   └──  all w : Worker | lone w & Workstation.workers | all ws : Workstation | some ws.workers
inv2 U:     │                                       └──  all w : Worker | lone w & Workstation.workers
inv2 U:     │                                           └──  all w : Worker | one w & Workstation.workers
inv2 S:     │                                               └──  all w : Worker | one w & Workstation.workers | some Workstation.workers
inv2 S:     │                                                   └──  all w : Worker | one w & Workstation.workers | all ws: Workstation | some ws.workers
inv2 U:     │                                                       └──  all w : Worker | one w & Workstation.workers all ws: Workstation | some ws.workers
inv2 U:     │                                                           └──  all w : Worker | one w & Workstation.workers all ws: Workstation | some ws.workers
inv2 B:     │                                                               └──  all w : Worker | all ws: Workstation | one w & ws.workers all ws: Workstation | some ws.workers
inv2 C:     │                                                                   └──  all w : Worker | one ws: Workstation | one w & ws.workers all ws: Workstation | some ws.workers
inv2 T:     │                                                                       └──  all w : Worker | one ws: Workstation | w & ws.workers all ws: Workstation | some ws.workers
inv2 C:     │                                                                           └──  all w : Worker | one ws: Workstation | some w & ws.workers all ws: Workstation | some ws.workers
inv3 C:     │                                                                               └──  all c : Component | one ws : Workstation | one c.workstation & ws
inv4 C:     │                                                                                   └──  all p : Product | (p in Component implies some p.parts) and (p in Material implies no p.parts)
inv5 C:     │                                                                                       └──  all ws : Workstation | some Human & ws.workers implies no Robot & ws.workers all ws : Workstation | some Robot & ws.workers implies no Human & ws.workers
inv6 O:     │                                                                                           └──  all p : Product | no p & p.^parts
inv7 O:     │                                                                                               └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv7 O:     │                                                                                                   └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 C:     │                                                                                                       └──  all p : Dangerous & Component | all ws : p.workstation | no Human & ws.workers
inv8 B:     │                                                                                                           └──  all p : Dangerous & Component | all ws : p.workstation | one Human & ws.workers
inv8 C:     │                                                                                                               └──  all p : Dangerous & Component | all ws : p.workstation | no Human & ws.workers
inv9 U:     │                                                                                                                   └──  all ws : Workstation | ws not in end implies one ws.succ all ws : Workstation | ws in end implies no ws.succ
inv9 U:     │                                                                                                                       └──  all ws : Workstation | ws not in end and ws not in begin implies one ws.succ all ws : Workstation | ws in end implies no ws.succ
inv9 S:     │                                                                                                                           └──  all ws : Workstation | (ws not in end and ws not in begin) implies one ws.succ all ws : Workstation | (ws in end ow ws in begin) implies no ws.succ
inv9 S:     │                                                                                                                               └──  all ws : Workstation | (ws not in end and ws not in begin) implies one ws.succ all ws : Workstation | (ws in end ow ws in begin) implies no ws.succ
inv9 B:     │                                                                                                                                   └──  all ws : Workstation | (ws not in end and ws not in begin) implies one ws.succ all ws : Workstation | (ws in end or ws in begin) implies no ws.succ
inv9 U:     │                                                                                                                                       └──  all ws : Workstation | (ws not in end and ws not in begin) implies one ws.succ all ws : Workstation | (ws in end) implies no ws.succ
inv9 U:     │                                                                                                                                           └──  all ws : Workstation | (ws not in end) implies one ws.succ all ws : Workstation | (ws in end) implies no ws.succ
inv10 E:    │                                                                                                                                               └──   
inv10 B:    │                                                                                                                                                   └──  all p : Component | all c : p.parts | no p.workstation.succ
inv10 B:    │                                                                                                                                                       └──  all p : Component | all c : p.parts | no c.workstation.succ
inv6 B:     ├──  all c:Component | all p:Product | c in p.parts implies p not in Component
inv6 B:     │   └──  all c:Component | all p:Product | p in c.parts implies p not in Component
inv6 C:     │       └──  all c:Component | c not in c.^(parts)
inv7 O:     │           └──  all c:Component | all p:Product | p in Dangerous and p in c.^(parts) implies c in Dangerous
inv8 S:     │               └──  all c:Components | all ws:Workstation | c in Dangerous and w in c.workstation implies(all h:Human | h not in ws.workers )
inv8 S:     │                   └──  all c:Component | all ws:Workstation | c in Dangerous and w in c.workstation implies(all h:Human | h not in ws.workers )
inv7 O:     │                       └──  all c:Component | all p:Product | p in Dangerous and p in c.^(parts) implies c in Dangerous
inv8 C:     │                           └──  all c:Component | all ws:Workstation | c in Dangerous and ws in c.workstation implies(all h:Human | h not in ws.workers )
vRhyPpquRduCtrwn3 M:     │                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 S:     │   └──  (all ws: Workstation, w:Worker | w in ws.workers) and (all ws:Workstion | one w:Worker | w in ws.workers)
inv1 C:     │       └──  all w:Worker | w in Human or w in Robot
inv3 S:     │           └──  all c:Component | one ws:Workstation | w in c.workstation
inv2 B:     │               └──  (all ws: Workstation, w:Worker | w in ws.workers) and (all ws:Workstation | one w:Worker | w in ws.workers)
inv2 B:     │                   └──  (all ws: Workstation, w:Worker | w in ws.workers) and (all w:Worker | all ws:Workstation | w in ws.workers)
inv1 S:     ├──  all w:Worker | w in Human or h in Robot
inv1 C:     │   └──  all w:Worker | w in Human or w in Robot
inv2 U:     │       └──  all ws:Workstation, w1:Worker | one ws1:Workstation | some w:Worker | w in ws.workers and w1 in ws1.workers
inv2 C:     │           └──  all w: Workstation | some w.workers all w: Worker | one work : Workstation | w in work.workers
inv2 C:     │               └──  all ws: Workstation | some w:Worker | w in ws.workers all w: Worker | one work : Workstation | w in work.workers
inv2 C:     │                   └──  all ws: Workstation | some w:Worker | w in ws.workers all w: Worker | one work : Workstation | w in work.workers
inv3 C:     │                       └──  all c:Component | one ws:Workstation | ws in c.workstation
inv3 C:     │                           └──  all c:Component | one ws:Workstation | ws in c.workstation
inv4 B:     │                               └──  all p1:Product | all c:Component , m:Material | p1 in c.parts and p1 in m.parts
inv4 B:     │                                   └──  some p1:Product | all c:Component , m:Material | p1 in c.parts and p1 not in m.parts
inv4 C:     │                                       └──  all c:Component | some c.parts all m:Material | no m.parts
inv4 C:     │                                           └──  all c:Component | some c.parts all m:Material | no m.parts
inv5 U:     │                                               └──  all w:Worker, ws:Workstation | w in ws.workers and w in Human implies w not in Robot
inv5 B:     │                                                   └──  all w:Worker, ws:Workstation | w in ws.workers implies (w in Human) or (w in Robot)
inv5 O:     │                                                       └──  all w:Worker, ws:Workstation | w in ws.workers implies (w in Human) or (w not in Robot)
inv5 U:     │                                                           └──  all w:Worker, ws:Workstation | w in ws.workers implies (w not in Human) or (w not in Robot)
inv5 U:     │                                                               └──  all w:Worker, ws:Workstation | w in ws.workers implies no (w & Human) or no (w & Robot)
inv5 T:     │                                                                   └──  all w:Worker, ws:Workstation | w in ws.workers implies (w & Human) or (w & Robot)
inv5 U:     │                                                                       └──  all w:Worker, ws:Workstation | w in ws.workers and w in Human implies w not in Robot
inv5 C:     │                                                                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv5 C:     │                                                                               └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 B:     │                                                                                   └──  all c:Component, p:Product | c in p.parts implies p not in Component
inv6 T:     │                                                                                       └──  all c:Component, p:Product | no c in c.^parts
inv6 C:     │                                                                                           └──  all c:Component, p:Product | not c in c.^parts
inv5 C:     │                                                                                               └──  all ws: Workstation | all w1,w2:Worker | w1 in ws.workers and w2 in ws.workers and w1 in Human implies w2 not in Robot
inv7 E:     │                                                                                                   └──   
inv6 C:     │                                                                                                       └──  all c:Component| not c in c.^parts
inv6 C:     │                                                                                                           └──  all c:Component| not c in c.^parts
inv7 O:     │                                                                                                               └──  all c:Component | all p:Product | p in c.^parts and p in Dangerous implies c in Dangerous
inv7 O:     │                                                                                                                   └──  all c:Component | all p:Product | p in c.^parts and p in Dangerous implies c in Dangerous
inv8 B:     │                                                                                                                       └──  all c:Component, w:Worker | c in Dangerous implies (c.workstation.workers & w in Human)
inv8 B:     │                                                                                                                           └──  all c:Component, ws:Workstation | c in Dangerous and ws in c.workstation implies( all w:Worker | w in ws.workers and w in Human )
inv8 C:     │                                                                                                                               └──  all c:Component, ws:Workstation | c in Dangerous and ws in c.workstation implies( all h:Human | h not in ws.workers )
inv9 S:     │                                                                                                                                   └──  all ws1,ws2:Workstation | (ws2 in begin and ws1 != ws2) implies
inv8 C:     │                                                                                                                                       └──  all c:Component, ws:Workstation | c in Dangerous and ws in c.workstation implies( all h:Human | h not in ws.workers )
inv10 B:    │                                                                                                                                           └──  all c1,c2:Component | all w1,w2:Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv1 S:     ├──  all w : Worker : w in Human+Robot
inv1 C:     │   └──  all w : Worker | w in Human+Robot
inv2 T:     │       └──  all ws: Workstation, w: Worker | some w in ws.workers
inv2 T:     │           └──  all ws: Workstation, w: Worker | some w in ws.workers
inv1 C:     │               └──  all w : Worker | w in Human+Robot
inv3 E:     │                   └──   
inv2 U:     │                       └──  all ws: Workstation | some w: Worker | w in ws.workers
inv1 C:     │                           └──  Worker = Human + Robot
inv2 C:     │                               └──  all w: Workstation | some w.workers all w: Worker |one work : Workstation | w in work.workers
inv2 C:     │                                   └──  all w: Workstation | some w.workers all w: Worker | one work : Workstation | w in work.workers
inv3 C:     │                                       └──  all c : Component | one c.workstation
inv3 C:     │                                           └──  all c : Component | one c.workstation
inv4 C:     │                                               └──  all c: Component | some c.parts all m: Material | no m.parts
inv5 B:     │                                                   └──  Human in Workstation.workers implies Robot not in Workstation.workers
inv5 B:     │                                                       └──  Human in Workstation.workers implies Robot not in Workstation.workers Robot in Workstation.workers implies Human not in Workstation.workers
inv5 B:     │                                                           └──  all w: Workstation | (Robot in w.workers => Human not in w.workers) or (Human in w.workers => Robot not in w.workers)
inv5 T:     │                                                               └──  all w: Workstation | (Robot in w.workers => no Human in w.workers) or (Human in w.workers => Robot not in w.workers)
inv5 C:     │                                                                   └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 U:     │                                                                       └──  all c : Component | c not in c.parts
inv6 C:     │                                                                           └──  all c : Component | c not in c.^parts
inv8 S:     │                                                                               └──  aall c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv6 C:     │                                                                                   └──  all c : Component | c not in c.^parts
inv7 B:     │                                                                                       └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 O:     │                                                                                           └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 C:     │                                                                                               └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv9 B:     │                                                                                                   └──  all w : Workstation | one w.succ
inv9 B:     │                                                                                                       └──  all w : Workstation | one w.^succ
inv9 S:     │                                                                                                           └──  all w : Workstation | w in begin => one w.succs
inv9 B:     │                                                                                                               └──  all w : Workstation | w in begin => one w.succ
inv9 U:     │                                                                                                                   └──  all w : Workstation | w in begin => one w.succ && w in end => one succ.w
inv9 U:     │                                                                                                                       └──  all w : Workstation | w in begin => lone w.succ && w in end => lone succ.w
inv9 T:     │                                                                                                                           └──  all w : Workstation | w in begin => set w.succ && w in end => set succ.w
inv9 U:     │                                                                                                                               └──  all w : Workstation | w in begin => lone w.^succ && w in end => lone ^succ.w
inv9 U:     │                                                                                                                                   └──  all w : Workstation | w in begin => lone w.succ && w in end => lone succ.w
inv9 U:     │                                                                                                                                       └──  all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w
inv9 S:     │                                                                                                                                           └──  all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w nad no w.succ
inv9 U:     │                                                                                                                                               └──  all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w and no w.succ
inv1 T:     ├──  all a:Worker | Human or Robot
inv1 C:     │   └──  all a:Worker | a in Human or a in Robot
inv2 B:     │       └──  all w:Workstation | some h:Worker | h in w.workers some w:Workstation | all h:Worker |h in w.workers
inv2 O:     │           └──  all w:Workstation | some h:Worker | h in workers.w some w:Workstation | all h:Worker |h in workers.w
inv2 S:     │               └──  all w:Workstation | some h:Worker all w: Worker | (one work : Workstation | w in work.workers)
inv2 T:     │                   └──  all w:Workstation | some w.Worker all w: Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                       └──  all w:Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 O:     │                           └──  all c:Component | one workstation.c
inv3 C:     │                               └──  all c:Component | one c.workstation
inv4 U:     │                                   └──  all c:Component | some c.parts
inv4 C:     │                                       └──  all c:Component | some c.parts all c:Material |no c.parts
inv5 T:     │                                           └──  all c:Workstation | no (c.workers and Human) or no (c.workers and Robot)
inv5 C:     │                                               └──  all c:Workstation | no (c.workers & Human) or no (c.workers & Robot)
inv6 S:     │                                                   └──  all c:Component | c not in c.component
inv6 S:     │                                                       └──  all c:Component | c not in c.part
inv6 U:     │                                                           └──  all c:Component | c not in c.parts
inv6 T:     │                                                               └──  all c:Component | no c in  c.parts
inv6 T:     │                                                                   └──  all c:Component | no c in  c.^parts
inv6 C:     │                                                                       └──  all c:Component | not c in  c.^parts
inv7 C:     │                                                                           └──  all c:Component  | all a:c.parts| a in Dangerous implies c in Dangerous
inv8 U:     │                                                                               └──  all c:Component | c in Dangerous implies workstation.c.workers in Robot
inv8 U:     │                                                                                   └──  all c:Component | c in Dangerous implies (no workstation.c.workers & Human)
inv8 C:     │                                                                                       └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv1 C:     ├──  all x : Worker - Human - Robot | #x = 0
inv2 O:     │   └──  all wst : Workstation | some w : Worker | w in wst all w : Worker | all wst : Workstation | w in wst
inv2 B:     │       └──  all wst : Workstation | some w : Worker | w in wst.workers all w : Worker | all wst : Workstation | w in wst.workers
inv2 B:     │           └──  all wst : Workstation | all w : Worker | w in wst.workers
inv1 C:     ├──  all x : Worker | x in Human-Robot || x in Robot-Human
inv1 C:     │   └──  all x : Worker | x in Human-Robot || x in Robot-Human
inv1 S:     │       └──  all x : Worker | x in Human\Robot || x in Robot\Human
inv1 C:     │           └──  all x : Worker | (x in Human-Robot) || (x in Robot-Human)
inv1 C:     │               ├──  all x : Worker | x in Human || x in Robot
inv1 C:     │               └──  all x : Worker | x in Human || x in Robot
inv2 S:     │                   └──  all x in Workstation | some x.workers all y in Worker | one workers.y
inv2 S:     │                       └──  some Workstation.workers && one workers.y
inv2 B:     │                           └──  some Workstation.workers && one workers.Worker
inv3 S:     │                               └──  all x in Component | one x.workstation
inv3 C:     │                                   └──  all x : Component | one x.workstation
inv3 B:     │                                       └──  one Component.workstation
inv4 S:     │                                           └──  all x : Product | (x in Components & some x.parts) || (x in Materials & no x.parts)
inv4 S:     │                                               └──  all x : Product | (x in Components && some x.parts) || (x in Materials && no x.parts)
inv4 C:     │                                                   └──  all x : Product | (x in Component && some x.parts) || (x in Material && no x.parts)
7PHqgMFrTtrH79gJQ M:     │                                                       └──  user added theme options. same as previous submission
inv2 B:     │                                                           └──  some Workstation.workers && one workers.Worker
inv4 C:     │                                                               └──  all x : Product | (x in Component && some x.parts) || (x in Material && no x.parts)
inv1 T:     ├──  all x: Worker | x in Human or x iin Robot
inv1 C:     │   └──  all x: Worker | x in Human or x in Robot
inv2 T:     │       └──  all x: Worker| all s: Workstation| one x in s.worker
inv2 S:     │           └──  all x: Worker| all s: Workstation| #(x in s.worker)=1
inv2 T:     │               └──  all x: Worker| all s: Workstation| #(x in s.workers)=1
inv2 T:     │                   └──  all x: Worker| all s: Workstation| one x in s.workers
inv2 T:     │                       └──  all x: Worker| all s: Workstation| #s.workers.x=1
inv2 T:     │                           └──  all x: Worker| all s: Workstation| one (x in s.workers)
inv2 T:     │                               └──  all x: Worker| all s: Workstation| #s.workstation.x=1
inv2 C:     │                                   └──  (all w: Workstation | some r: Worker | r in w.workers) && (all w: Worker | one workers.w)
inv3 O:     │                                       └──  all c: Component | one workstation.c
inv3 O:     │                                           └──  all c: Component| some x: Workstation| c in x.workstation
inv3 O:     │                                               └──  (all c: Component| some x: Workstation| c in x.workstation) && (all c: Component| one workstation.c)
inv3 O:     │                                                   └──  all c: Component| one workstation.c
inv4 B:     │                                                       └──  (all c: Component| some parts.c) && (all m: Material| #parts.m=0)
inv4 B:     │                                                           └──  (all c: Component| some parts.c) && (all m: Material| no parts.m)
inv4 B:     │                                                               └──  (all c: Component| some c.parts) && (all m: Material| no parts.m)
inv4 C:     │                                                                   └──  (all c: Component| some c.parts) && (all m: Material| no m.parts)
inv4 C:     │                                                                       └──  (all c: Component| some c.parts) && (all m: Material| #m.parts=0)
inv5 U:     │                                                                           └──  all h: Human| all r: Robot| some w: Workstation| (h in w.workers implies r not in w.workers) && (r in w.workers implies h not in w.workers)
inv5 C:     │                                                                               └──  all h: Human| all r: Robot| all w: Workstation| (h in w.workers implies r not in w.workers) && (r in w.workers implies h not in w.workers)
inv6 U:     │                                                                                   └──  all c1, c2: Component| c1 in c2.parts and c2 in c1.parts implies c1=c2
inv6 U:     │                                                                                       └──  all c1, c2: Component| c1 in c2.parts and c2 in c1.parts implies c1!=c2
inv6 U:     │                                                                                           └──  all c1, c2: Component| c1 not in c1.parts and c2 not in c2.parts
inv6 S:     │                                                                                               └──  all c Component| c not in c.parts
inv6 U:     │                                                                                                   └──  all c: Component| c not in c.parts
inv6 U:     │                                                                                                       └──  all c1,c2: Component| (c1 not in c1.parts) && (c2 not in c2.parts)
inv6 C:     │                                                                                                           └──  all c: Component| c not in c.^(parts)
inv1 C:     ├──  all w: Worker | w in Human or w in Robot
inv2 U:     │   └──  all ws: Workstation, w: Worker | #ws.workers>0 && #w.~workers = 1
inv2 B:     │       └──  all ws: Workstation, w: Worker | some ws.workers && w in ws.workers
inv2 S:     │           └──  all ws: Workstation | w: Worker | some ws.workers && w in ws.workers
inv2 B:     │               └──  all ws: Workstation | all w: Worker | some ws.workers && w in ws.workers
inv2 B:     │                   └──  all ws: Workstation | all w: Worker | some ws.workers && one ws.workers
inv2 B:     │                       └──  all ws: Workstation | all w: Worker | some ws.workers && one w.workers
inv2 U:     │                           └──  all ws: Workstation | all w: Worker | some ws.workers && one w.~workers
inv2 U:     │                               └──  all ws: Workstation | all w: Worker | some ws.workers && #w.~workers=1
inv2 T:     │                                   └──  all ws: Workstation | all w: Worker | ws.workers>1 && #w.~workers=1
inv2 B:     │                                       └──  all ws: Workstation | all w: Worker | #ws.workers>1 && #w.~workers=1
inv2 B:     │                                           └──  all ws: Workstation | all w: Worker | #ws.workers>2 && #w.~workers=1
inv2 U:     │                                               └──  all ws: Workstation | all w: Worker | #ws.workers> 0  && #w.~workers=1
inv2 S:     │                                                   └──  all ws: Workstation | some w: ws.workers all w: Worker | one ws: w.workstation
inv2 S:     │                                                       └──  all ws: Workstation | some w: ws.workers all w: Worker | one ws: w.workstation
inv2 S:     │                                                           └──  all ws: Workstation | some w: ws.workers && one ws.workers.~workers
inv2 U:     │                                                               └──  all ws: Workstation | all w: Worker | #ws.workers> 0  && #w.~workers=1
inv2 O:     │                                                                   └──  all ws: Workstation | ws.workers != none && all w: ws.workers | w.workstation = ws
inv2 U:     │                                                                       └──  all ws: Workstation  | #ws.workers> 0  && one ws.workers.~workers
inv2 C:     │                                                                           └──  all w: Worker | one ws: Workstation | w in ws.workers all ws: Workstation | some w: Worker | w in ws.workers
inv2 U:     │                                                                               └──  all ws: Workstation | all w: Worker | one ws2: Workstation |#ws.workers> 0  &&  w in ws2.workers
inv2 C:     │                                                                                   └──  all ws: Workstation |  some ws.workers   all w: Worker | one ws: Workstation | w in ws.workers
inv2 U:     │                                                                                       └──  all ws: Workstation | all w: Worker | some ws.workers
inv2 T:     │                                                                                           └──  all ws: Workstation | all w: Worker | some ws.workers  &&  (one w) in ws.workers
inv2 B:     │                                                                                               └──  all ws: Workstation | all w: Worker | some ws.workers  &&  w in ws.workers
inv2 U:     │                                                                                                   └──  all ws: Workstation | all w: Worker | some ws.workers  &&  one w.~workers
inv2 U:     │                                                                                                       └──  all ws: Workstation,  w: Worker | some ws.workers  &&  one w.~workers
inv2 C:     │                                                                                                           └──  all ws: Workstation | some ws.workers all w: Worker | one w.~workers
inv2 U:     │                                                                                                               └──  all ws: Workstation, w: Worker | some ws.workers  &&  one w.~workers
inv2 S:     │                                                                                                                   └──  all ws: Workstation | some ws.workers  &&  all  w: Worker one w.~workers
inv2 C:     │                                                                                                                       └──  all ws: Workstation | some ws.workers  &&  all  w: Worker | one w.~workers
inv2 U:     │                                                                                                                           └──  all ws: Workstation | all  w: Worker | some ws.workers  &&   one w.~workers
inv2 U:     │                                                                                                                               └──  all ws: Workstation, w: Worker | some ws.workers  &&   one w.~workers
inv3 C:     │                                                                                                                                   └──  all c: Component | one c.workstation
inv3 C:     │                                                                                                                                       └──  all c: Component | one ws: Workstation | c in ws.~workstation
inv4 B:     │                                                                                                                                           └──  all c: Component | some c.parts && (all m: Material | #m.parts = none )
inv4 B:     │                                                                                                                                               └──  all c: Component | all m: Material | some c.parts && #m.parts = none
inv4 B:     │                                                                                                                                                   └──  all c: Component | all m: Material | #c.parts>0 && #m.parts = none
inv4 B:     │                                                                                                                                                       └──  all p: Product, c: Component | p.parts in c && (all m: Material | #m.parts = none)
inv4 B:     │                                                                                                                                                           └──  all c: Component | all m: Material | #c.parts>0 && #m.parts = none
inv4 B:     │                                                                                                                                                               └──  all c: Component, p: c.parts-(c+Dangerous) | all m: Material | p in c && #m.parts = none
inv4 U:     │                                                                                                                                                                   └──  all c: Component | #c.parts>0 && (all m: Material | no m.parts)
inv4 C:     │                                                                                                                                                                       └──  all c: Component | some c.parts all m: Material | no m.parts
inv4 U:     │                                                                                                                                                                           └──  all c: Component | some c.parts && (all m: Material | no m.parts)
inv4 C:     │                                                                                                                                                                               └──  all c: Component | some c.parts (all m: Material | no m.parts)
inv4 C:     │                                                                                                                                                                                   └──  all c: Component | #c.parts>0 (all m: Material | no m.parts)
inv4 U:     │                                                                                                                                                                                       └──  all c: Component | #c.parts>0 && (all m: Material | no m.parts)
inv4 U:     │                                                                                                                                                                                           └──  all c: Component | #c.parts>0 && (all m: Material | no m.parts)
inv4 U:     │                                                                                                                                                                                               └──  all c: Component |all m: Material | #c.parts>0 &&  no m.parts
inv4 U:     │                                                                                                                                                                                                   └──  all c: Component, m: Material | #c.parts>0 &&  no m.parts
inv4 U:     │                                                                                                                                                                                                       └──  all c: Component | #c.parts>0 &&  all m: Material | no m.parts
inv4 C:     │                                                                                                                                                                                                           └──  all c: Component | #c.parts>0 all m: Material | no m.parts
inv4 O:     │                                                                                                                                                                                                               └──  all c: Component | #c.parts>0 all m: Material | #m.parts = none
inv4 C:     │                                                                                                                                                                                                                   └──  all c: Component | #c.parts>0 all m: Material | #m.parts = 0
inv5 B:     │                                                                                                                                                                                                                       └──  all h: Human, r:Robot | h.~workers != r.workers
inv5 B:     │                                                                                                                                                                                                                           └──  all h: Human, r:Robot | h.~workers != r.~workers
inv5 C:     │                                                                                                                                                                                                                               └──  all h: Human, r:Robot, ws: Workstation | h in ws.workers => r not in ws.workers
r3MQrWA4ReBZ2dCgt M:     │                                                                                                                                                                                                                                   └──  user added theme options. same as previous submission
inv4 S:     ├──  all c : Components | one p : Product | p in c.parts and all m : Material | no p: Product | p in m.parts
inv4 B:     │   └──  all c : Component | one p : Product | p in c.parts and all m : Material | no p: Product | p in m.parts
inv4 U:     │       └──  all c : Component | some p : Product | p in c.parts and all m : Material | no p: Product | p in m.parts
inv4 C:     │           └──  (all c : Component | some p : Product | p in c.parts) and (all m : Material | no p: Product | p in m.parts)
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv2 U:     │   └──  all ws : Workstation | some ws.workers all w : Worker | some workers.w
inv2 C:     │       └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv3 C:     │           └──  all c : Component | one c.workstation
inv4 C:     │               └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 C:     │                   └──  all ws : Workstation, h : Human, r : Robot | h in ws.workers implies r not in ws.workers
inv6 C:     │                       └──  all c : Component | c not in c.^(parts)
inv7 O:     │                           └──  all c : Component | (some d : Dangerous | d in c.^(parts)) implies c in Dangerous
inv7 C:     │                               └──  all c : Component | (some d : Dangerous | d in c.(parts)) implies c in Dangerous
inv7 C:     │                                   └──  all c : Component | (some d : Dangerous | d in c.parts) implies c in Dangerous
inv7 B:     │                                       └──  all c : Component | c.parts in Dangerous implies c in Dangerous
inv7 B:     │                                           └──  all c : Component | Dangerous in c.parts implies c in Dangerous
inv8 U:     │                                               └──  all c : Component | c in Dangerous implies (all h : Human | c not in workstation.workstation.h)
inv8 U:     │                                                   └──  all c : Dangerous | (all h : Human | c not in workstation.workstation.h)
RntZZML9rnGjs4gpE M:     │                                                       └──  user added theme options. same as previous submission
inv8 U:     │                                                           ├──  all c : Dangerous | (all h : Human | c not in workstation.workstation.h)
inv8 C:     │                                                           │   └──  all c : Dangerous | (all h : Human | c not in workstation.workers.h)
inv7 C:     │                                                           └──  all c : Component | (some d : Dangerous | d in c.parts) implies c in Dangerous
inv1 S:     ├──  Workers = Human + Robot
inv1 C:     │   └──  Worker = Human + Robot
inv2 U:     │       └──  all w: Workstation | some workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 E:     │           └──   
inv2 C:     │               └──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                   └──  all c: Component | one c.workstation
inv3 C:     │                       └──  all c: Component | one c.workstation
inv4 C:     │                           └──  all c: Component | some c.parts all c: Material | no c.parts
inv5 U:     │                               └──  all w: Workstation | no (w.workers & Human & Robot)
inv6 E:     │                                   └──   
inv5 C:     │                                       └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 U:     │                                           └──  all c: Component | not c in c.parts
inv6 O:     │                                               └──  all c: Component | not c in c.*parts
inv6 C:     │                                                   └──  all c: Component | not c in c.^parts
inv7 B:     │                                                       └──  all c: Component | Dangerous in c.^parts implies Dangerous in c
inv7 B:     │                                                           └──  all c: Component | Dangerous in c.*parts implies Dangerous in c
inv7 B:     │                                                               └──  all c: Component | Dangerous in c.^parts implies Dangerous in c
inv7 B:     │                                                                   └──  all c: Dangerous | Dangerous in c.^parts
inv7 B:     │                                                                       └──  all c: Component | Dangerous in c.^parts implies some c & Dangerous
inv7 B:     │                                                                           └──  all c: Component | Dangerous in c.^parts implies (some c & Dangerous)
inv8 O:     │                                                                               └──  all c: Component & Dangerous | all x : Workstation | no (x.workers & Human)
inv8 C:     │                                                                                   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv7 B:     │                                                                                       └──  all c: Component | Dangerous in c.^parts implies (some c & Dangerous)
inv7 T:     │                                                                                           └──  all c: Component | Dangerous in c.^parts implies (c & Dangerous)
inv7 B:     │                                                                                               └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous)
inv7 B:     │                                                                                                   └──  all c: Component | Dangerous in c.^parts implies no (c & Dangerous)
inv7 B:     │                                                                                                       └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv1 C:     │                                                                                                           ├──  Worker = Human + Robot
inv2 C:     │                                                                                                           │   └──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                                                                                                           │       └──  all c: Component | one c.workstation
inv4 C:     │                                                                                                           │           └──  all c: Component | some c.parts all c: Material | no c.parts
inv5 C:     │                                                                                                           │               └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 C:     │                                                                                                           │                   └──  all c: Component | not c in c.^parts
inv7 B:     │                                                                                                           │                       └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                           │                           └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv9 E:     │                                                                                                           │                               └──   
xgXRHrEwTo5dRpM4r M:     │                                                                                                           └──  user added theme options. same as previous submission
inv4 C:     │                                                                                                               ├──  all c: Component | some c.parts all c: Material | no c.parts
inv3 C:     │                                                                                                               ├──  all c: Component | one c.workstation
inv8 C:     │                                                                                                               │   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv7 S:     │                                                                                                               ├──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv7 O:     │                                                                                                               │   └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 C:     │                                                                                                               │       └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv3 C:     │                                                                                                               ├──  all c: Component |one wo:Workstation| wo in  c.workstation
inv5 C:     │                                                                                                               ├──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv7 B:     │                                                                                                               │   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 O:     │                                                                                                               │       └──  all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 C:     │                                                                                                               │           └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv1 S:     │                                                                                                               ├──  all w in Worker | w in Human or w in Robot
inv1 C:     │                                                                                                               │   └──  all w : Worker | w in Human or w in Robot
inv2 C:     │                                                                                                               │       └──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv2 S:     │                                                                                                               │           └──  all w: Workstation | some wo : Workers | wo in w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                                                                                                               │               └──  all w: Workstation | some wo : Worker | wo in w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                                                                                                               │                   └──  all c: Component | #c.workstation = 1
inv4 S:     │                                                                                                               │                       └──  all c: Component | some p : Parts | p in c.parts all c: Material | no c.parts
inv4 C:     │                                                                                                               │                           └──  all c: Component | some p : Product | p in c.parts all c: Material | no c.parts
inv5 O:     │                                                                                                               │                               └──  all w: Workstation | all wo : w.workers | wo in Human
inv5 T:     │                                                                                                               │                                   └──  all w: Workstation | #(w.workers in Human) = 0 or #(w.workers in Robot) = 0
inv5 T:     │                                                                                                               │                                       └──  all w: Workstation | #w.workers in Human = 0 or #w.workers in Robot = 0
inv5 T:     │                                                                                                               │                                           └──  all w: Workstation | #(w.workers in Human) = 0 or #(w.workers in Robot) = 0
inv5 T:     │                                                                                                               │                                               └──  all w: Workstation | (#w.workers in Human) = 0 or (#w.workers in Robot) = 0
inv5 S:     │                                                                                                               │                                                   └──  all w: Workstation | (#w.workers in Human) == 0 or (#w.workers in Robot) == 0
inv5 T:     │                                                                                                               │                                                       └──  all w: Workstation | (#w.workers in Human) =0 or (#w.workers in Robot) = 0
inv5 C:     │                                                                                                               │                                                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 C:     │                                                                                                               │                                                               └──  all c: Component | not c in c.^parts
inv6 U:     │                                                                                                               │                                                                   └──  all c: Component | not c in c.parts
inv6 C:     │                                                                                                               │                                                                       └──  all c: Component | not c in c.^parts
inv7 T:     │                                                                                                               │                                                                           └──  all c: Component | some c.^parts in Dangerous => c in Dangerous
inv7 S:     │                                                                                                               │                                                                               └──  all c: Component | some c.^parts: Dangerous | c in Dangerous
inv7 S:     │                                                                                                               │                                                                                   └──  all c: Component | c.^parts: Dangerous => c in Dangerous
inv7 S:     │                                                                                                               │                                                                                       └──  all c: Component | c.^parts: Dangerous implies c in Dangerous
inv7 B:     │                                                                                                               │                                                                                           └──  all c: Component | c.^parts in Dangerous => c in Dangerous
inv7 B:     │                                                                                                               │                                                                                               └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                               │                                                                                                   └──  all c: Component| all x : c.workstation | c in Dangerous => no (x.workers & Human)
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv2 T:     │                                                                                                               ├──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work->workers)
inv2 C:     │                                                                                                               │   └──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv10 T:    │                                                                                                               ├──  all c : Component | c in parts.Component implies c.workstation in succ.workstation
inv10 T:    │                                                                                                               │   └──  all c : Component | c in parts.Component implies (c.workstation in succ.workstation)
inv10 T:    │                                                                                                               │       └──  all c : Component | c in parts.Component implies c.workstation & succ = c.workstation
inv10 T:    │                                                                                                               │           └──  all c : Component | c in parts.Component implies c.workstation && succ = c.workstation
inv10 T:    │                                                                                                               │               └──  all c : Component | c in parts.Component implies c.workstation & succ = c.workstation
inv10 T:    │                                                                                                               │                   └──  all c : Component | c in parts.Component implies c.workstation in succ
inv10 T:    │                                                                                                               │                       └──  all c : Component | c in parts.Component implies {c.workstation
inv10 T:    │                                                                                                               │                           └──  all c : Component | c in parts.Component implies (c.workstation in succ)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv1 C:     │                                                                                                               ├──  all w: Worker | w in Human or w in Robot
inv2 C:     │                                                                                                               │   └──  all w: Workstation | some wo: Worker |wo in w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                                                                                                               │       └──  all w: Workstation |some wo: Worker | wo in w.workers all w: Worker | one work : Workstation | w in work.workers
inv3 C:     │                                                                                                               │           └──  all c: Component | one w: Workstation |w in c.workstation
inv4 C:     │                                                                                                               │               └──  all c: Component | some p: Product| p in c.parts all c: Material | no c.parts
inv4 C:     │                                                                                                               │                   └──  all c: Component | some p: Product| p in c.parts all c: Material | all p: Product| p not in c.parts
inv5 U:     │                                                                                                               │                       └──  all w: Workstation | all wo: Worker|wo not in (w.workers & Robot) or wo not in (w.workers & Human)
inv5 C:     │                                                                                                               │                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv5 U:     │                                                                                                               │                               └──  all w: Workstation |all tr: Worker| (tr not in (w.workers & Robot)) or (tr not in (w.workers & Human))
inv5 C:     │                                                                                                               │                                   └──  all w: Workstation| no (w.workers & Robot) or no (w.workers & Human)
inv5 C:     │                                                                                                               │                                       └──  all w: Workstation| no (w.workers & Robot) or no (w.workers & Human)
inv6 U:     │                                                                                                               │                                           └──  all c: Component | not c in c.parts
inv6 C:     │                                                                                                               │                                               └──  all c: Component | not c in c.^parts
inv6 C:     │                                                                                                               │                                                   └──  all c: Component | c not in c.^parts
inv2 C:     │                                                                                                               ├──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv2 C:     │                                                                                                               │   └──  all ws : Workstation | #ws.workers > 0 all w: Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                                                                                                               │       └──  all c: Component | one c.workstation
inv5 C:     │                                                                                                               │           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv5 B:     │                                                                                                               │               └──  all ws : Workstation | Worker in ws.workers implies Robot not in ws.workers
inv6 C:     │                                                                                                               │                   └──  all c: Component | not c in c.^parts
inv6 C:     │                                                                                                               │                       └──  all c: Component | c not in c.^parts
inv6 O:     │                                                                                                               │                           └──  all c: Component | c not in c.*parts
inv6 C:     │                                                                                                               │                               └──  all c: Component | c not in c.^parts
inv7 B:     │                                                                                                               │                                   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 S:     │                                                                                                               │                                       └──  all c : Components | c.^parts in Dangerous implies c in Dangerous
inv7 B:     │                                                                                                               │                                           └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 S:     │                                                                                                               │                                               └──  all c : Components | Dangerous in c.^parts implies c = Dangerous
inv7 S:     │                                                                                                               │                                                   └──  all c : Components | Dangerous in c.^parts implies c in Dangerous
inv7 B:     │                                                                                                               │                                                       └──  all c : Component | Dangerous in c.^parts implies c = Dangerous
inv7 B:     │                                                                                                               │                                                           └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 B:     │                                                                                                               │                                                               └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                               │                                                                   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv8 B:     │                                                                                                               │                                                                       └──  all c : Component | c = Dangerous implies Human not in c.workstation.workers
inv8 B:     │                                                                                                               │                                                                           └──  all c : Component | c in Dangerous implies Human not in c.workstation.workers
inv8 S:     │                                                                                                               │                                                                               └──  all c : Component | c == Dangerous implies Human not in c.workstation.workers
inv8 C:     │                                                                                                               │                                                                                   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv9 E:     │                                                                                                               │                                                                                       └──   
inv8 B:     │                                                                                                               │                                                                                           └──  all dc : Component & Dangerous | Human not in dc.workstation.workers
inv8 C:     │                                                                                                               │                                                                                               └──  all dc : Component & Dangerous | no (dc.workstation.workers & Human)
inv9 S:     │                                                                                                               │                                                                                                   └──  one fws : Workstation & begin | #ws.^succ - 1 = #ws.^succ - end
inv9 B:     │                                                                                                               │                                                                                                       └──  one fws : Workstation & begin | #fws.^succ - 1 = #fws.^succ - end
inv9 B:     │                                                                                                               │                                                                                                           └──  one fws : Workstation & begin | #fws.^succ - 1 = #(fws.^succ - end)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                               │   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv8 C:     │                                                                                                               │       └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv7 B:     │                                                                                                               │           └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv5 C:     │                                                                                                               ├──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv7 B:     │                                                                                                               │   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv6 C:     │                                                                                                               ├──  all c: Component | not c in c.^parts
inv9 S:     │                                                                                                               ├──  all x : Workstation | gt[x]
inv9 S:     │                                                                                                               │   └──  all x : Workstation | gt(x)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv8 C:     │                                                                                                               │   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv7 B:     │                                                                                                               │   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv9 E:     │                                                                                                               │       └──   
inv10 E:    │                                                                                                               │           └──   
inv7 B:     │                                                                                                               │               └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                               │                   └──  all c: Component | (Dangerous in c.^parts) <=> (Dangerous in c)
inv7 B:     │                                                                                                               │                       └──  all c: Component | (Dangerous in c.^parts) <=> (Dangerous in c)
inv7 B:     │                                                                                                               │                           └──  all c: Component | (Dangerous in c.parts) <=> (Dangerous in c)
inv7 B:     │                                                                                                               │                               └──  all c: Component | (Dangerous in c.^parts) => (Dangerous in c)
inv7 B:     │                                                                                                               │                                   └──  all c: Component | (Dangerous in c.parts) => (Dangerous in c)
inv7 B:     │                                                                                                               │                                       └──  all c: Component | (Dangerous in c.^parts) <=> (c in Dangerous)
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 S:     │                                                                                                               ├──  all c: Component & Dangerous | c.workstation not in (x.workers & Human)
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                               │   └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv7 S:     │                                                                                                               ├──  all c: Component | Dangerous in c.parts^ implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                               ├──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv2 C:     │                                                                                                               │   └──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv3 C:     │                                                                                                               │       └──  all c: Component | one c.workstation
inv4 C:     │                                                                                                               │           └──  all c: Component | some c.parts all c: Material | no c.parts
inv5 C:     │                                                                                                               │               └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 C:     │                                                                                                               │                   └──  all c: Component | not c in c.^parts
inv7 B:     │                                                                                                               │                       └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv8 C:     │                                                                                                               │                           └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv9 E:     │                                                                                                               │                               └──   
inv10 E:    │                                                                                                               │                                   └──   
inv2 C:     │                                                                                                               │                                       └──  all ws: Workstation | some ws.workers all w: Worker | one workers.w
inv6 C:     │                                                                                                               │                                           └──  all c : Component | c not in c.^parts
inv8 C:     │                                                                                                               │                                               └──  all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv10 B:    │                                                                                                               │                                                   └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv9 C:     │                                                                                                               │                                                       └──  all b, w : Workstation | b in begin and b != w implies w in b.^succ all w : Workstation | w not in w.^succ all w : Workstation | w not in end implies one w.succ
inv7 C:     │                                                                                                               │                                                           └──  all c : Component | all p : Product | p in Dangerous and p in c.parts implies c in Dangerous
inv5 C:     │                                                                                                               ├──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv7 B:     │                                                                                                               │   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv1 C:     │                                                                                                               ├──  all w:Worker | w in Human <=> w not in Robot
inv2 C:     │                                                                                                               ├──  all w: Workstation | some w.workers all w: Worker | (one work : Workstation | w in work.workers)
inv7 B:     │                                                                                                               │   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv1 C:     │                                                                                                               ├──  Worker = Human + Robot
inv6 C:     │                                                                                                               │   └──  all c: Component | not c in c.^parts
inv6 O:     │                                                                                                               │       └──  all c: Component | not c in c.*parts
inv6 C:     │                                                                                                               │           └──  all c: Component | c not in c.^parts
inv7 B:     │                                                                                                               │               └──  all c: Component | c.^parts in Dangerous implies some (c & Dangerous & Component)
inv7 B:     │                                                                                                               │                   └──  all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 U:     │                                                                                                               │                       └──  all c: Component | c.*parts in Dangerous implies some (c & Dangerous & Component)
inv7 U:     │                                                                                                               │                           └──  all c: Component | c.*parts in Dangerous implies some (c & Dangerous)
inv2 C:     │                                                                                                               └──  all w : Worker | #(workers.w) = 1 all  wt : Workstation | #(wt.workers) > 0
inv4 C:     │                                                                                                                   └──  all m : Material | no m.parts all c : Component | some c.parts
inv4 C:     │                                                                                                                       └──  all c : Component | some c.parts all m : Material | no m.parts
inv4 C:     │                                                                                                                           └──  all c : Component - Material | some c.parts all m : Material | no m.parts
inv5 O:     │                                                                                                                               └──  all  wt : Workstation | (wt.workers in Human) or (wt.workers in Robot)
inv5 O:     │                                                                                                                                   └──  all  wt : Workstation | (wt.workers in Human) or (wt.workers in Robot)
inv10 B:    │                                                                                                                                       └──  all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in *succ.(c.workstation))
inv9 C:     │                                                                                                                                           └──  all w : Workstation | w not in w.^succ all w : Workstation | no w.succ => w in end all w : Workstation | no succ.w => w in begin all w : Workstation | (w not in end) => one w.succ
inv10 B:    │                                                                                                                                               └──  all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in *succ.(c.workstation))
inv8 B:     │                                                                                                                                                   └──  all c : Component | c in Dangerous => c.workstation.workers not in Human
inv1 E:     ├──   
inv1 C:     ├──  Worker in (Human + Robot)
inv1 C:     │   └──  Worker in Human+Robot
inv2 C:     │       └──  (all ws : Workstation | some ws.workers) and (all wo : Worker | one workers.wo)
inv3 C:     │           └──  all c : Component | one c.workstation
inv4 S:     │               └──  (all c : Components | some c.parts) and (no Material.parts)
inv4 S:     │                   └──  (all c : Components | some c.parts) and (no Material.parts)
inv4 C:     │                       └──  (all c : Component | some c.parts) and (no Material.parts)
inv5 C:     │                           └──  no workers.Human & workers.Robot
inv6 S:     │                               └──  all c : Component | c not in p.^parts
inv6 C:     │                                   └──  all c : Component | c not in c.^parts
inv7 O:     │                                       └──  all c : Component | some c.^parts & Dangerous implies c in Dangerous
inv8 B:     │                                           └──  all d : Dangerous | d.workstation.workers not in Human
inv10 B:    │                                               └──  all c : Component, p : Product | p in c.^parts implies c.workstation in (p.workstation).^succ
inv10 B:    │                                                   └──  all c : Component, p : Product | p in c.^parts implies p.workstation in (c.workstation).^succ
inv10 B:    │                                                       └──  all c : Component, p : Product | p in c.^parts implies c.workstation in (p.workstation).^succ
inv10 B:    │                                                           └──  all c : Component, p : Product | p in c.^parts implies p.workstation in (c.workstation).^succ
inv10 B:    │                                                               └──  all c : Component, p : Product | p in c.^parts implies c.workstation in (p.workstation).^succ
inv9 E:     │                                                                   └──   
inv9 B:     │                                                                       └──  all w : Workstation | (w in begin and one w.succ) or (w in end and one succ.w) or (one w.succ and one succ.w)
inv9 B:     │                                                                           └──  all w : Workstation | (w in begin and one w.succ) or (w in end and one succ.w) or (one w.succ and one succ.w)
inv9 B:     │                                                                               └──  all w : Workstation | (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w)
inv9 U:     │                                                                                   └──  all w : Workstation | (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin and w in end)
inv9 S:     │                                                                                       └──  all w : Workstation | (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin and w in end and one Worstation)
inv9 U:     │                                                                                           └──  all w : Workstation | (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin and w in end and one Workstation)
inv9 U:     │                                                                                               └──  all w : Workstation | (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin and w in end and no succ)
inv9 U:     │                                                                                                   └──  all w : Workstation | (no succ & iden) and (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin and w in end and no succ)
inv9 B:     │                                                                                                       └──  all w : Workstation | (no succ & iden) and (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w)
inv9 U:     │                                                                                                           └──  all w : Workstation | (no succ & iden) and (w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end)
inv9 U:     │                                                                                                               └──  all w : Workstation | (no succ & iden) and ((w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end))
inv1 C:     ├──  all w : Worker | w in (Human + Robot)
inv2 O:     │   └──  all ws : Workstation | some ws.workers all w : Worker | one workstation.w
inv2 O:     │       └──  all ws : Workstation | some ws.workers all w : Worker | one ws : Workstation | w in ws.workstation
inv2 C:     │           └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv3 C:     │               └──  all c : Component | one c.workstation
inv4 S:     │                   └──  all p : Product | p in Component implies some p.parts all p : Product | p in Materials implies none p.parts
inv4 T:     │                       └──  all p : Product | p in Component implies some p.parts all p : Product | p in Material implies none p.parts
inv4 T:     │                           └──  all p : Product | p in Component implies some p.parts all p : Product | p in Material implies none p.parts
inv4 C:     │                               └──  all p : Product | p in Component implies some p.parts all p : Product | p in Material implies no p.parts
inv5 C:     │                                   └──  all h : Human, r : Robot | no (workers.h & workers.r)
inv6 U:     │                                       └──  all c : Component | c not in c.parts
inv6 C:     │                                           └──  all c : Component | c not in c.^(parts)
inv7 B:     │                                               └──  all c : Component | c.^(parts) in Dangerous implies c in Dangerous
inv7 O:     │                                                   └──  all c : Component | some (c.^(parts) & Dangerous) implies c in Dangerous
inv7 B:     │                                                       └──  all c : Component | Dangerous in c.^(parts) implies c in Dangerous
inv7 O:     │                                                           └──  all c : Component | some (c.^(parts) & Dangerous) implies c in Dangerous
inv8 C:     │                                                               └──  all c : Component, h : Human | c in Dangerous implies (h not in c.workstation.workers)
inv10 B:    │                                                                   └──  all c1,c2 : Component | c2 in c1.^(parts) implies c1 not in c2.^(parts)
inv10 O:    │                                                                       └──  all c1,c2 : Component | c2 in c1.*(parts) implies c1 not in c2.*(parts)
inv10 B:    │                                                                           └──  all c1,c2 : Component | (c2 in c1.^(parts)) implies (c1 not in c2.^(parts))
NxzMsJzQCopE5p3Q4 M:     │                                                                               └──  user added theme options. same as previous submission
inv1 C:     ├──  all w: Worker| w in (Human + Robot)
inv2 C:     │   └──  all w: Worker| one ws:Workstation| w in ws.workers all ws:Workstation| some ws.workers
inv3 C:     │       └──  all c:Component| one ws:Workstation| ws in c.workstation
inv4 U:     │           └──  all c:Component, m:Material| some c.parts and no m.parts
inv4 C:     │               └──  all c:Component| some c.parts all m:Material| no m.parts
inv5 O:     │                   └──  all ws:Workstation, h:Human,r:Robot| h in ws.workers iff r not in ws.workers
inv5 C:     │                       └──  all ws:Workstation, h:Human,r:Robot| h in ws.workers implies r not in ws.workers
inv6 U:     │                           └──  all c:Component| c not in c.parts
inv6 O:     │                               └──  all c:Component| c not in c.*parts
inv6 C:     │                                   └──  all c:Component| c not in c.^parts
inv6 O:     │                                       └──  all c:Component| c not in c.*parts
inv6 C:     │                                           └──  all c:Component| c not in c.^parts
inv7 S:     │                                               └──  all c:Component| some part: c.^parts| part in Dangerous implies c in Dangerous
inv7 B:     │                                                   └──  all c:Component| some p: c.^parts| p in Dangerous implies c in Dangerous
inv7 U:     │                                                       └──  all c:Component| some p: c.*parts| p in Dangerous implies c in Dangerous
inv7 B:     │                                                           └──  all c:Component| some p: c.^parts| p in Dangerous implies c in Dangerous
inv7 O:     │                                                               └──  all c:Component| all p: c.^parts| p in Dangerous implies c in Dangerous
inv8 C:     │                                                                   └──  all c:Component| all ws:c.workstation| all w : ws.workers| c in Dangerous implies w not in Human
inv9 S:     │                                                                       └──  all ws:Workstation-Begin| ws in Begin.^succ no End.succ
inv9 U:     │                                                                           └──  all ws:Workstation-begin| ws in begin.^succ no end.succ
inv9 U:     │                                                                               └──  all ws:Workstation| ws!=begin implies ws in begin.^succ no end.succ
inv9 U:     │                                                                                   └──  all ws:Workstation| ws not in begin implies ws in begin.^succ no end.succ
inv9 U:     │                                                                                       └──  all ws:Workstation| begin not in ws.succ all ws:Workstation-begin| ws in begin.^succ no end.succ
inv9 O:     │                                                                                           └──  all ws:Workstation| one ws.succ and begin not in ws.succ all ws:Workstation-begin| ws in begin.^succ no end.succ
inv9 C:     │                                                                                               └──  all ws:Workstation-end| one ws.succ and begin not in ws.succ all ws:Workstation-begin| ws in begin.^succ no end.succ
inv10 S:    │                                                                                                   └──  all c:Component| c.ws in c.^parts.workstation.succ
inv9 C:     │                                                                                                       └──  all ws:Workstation-end| one ws.succ and begin not in ws.succ all ws:Workstation-begin| ws in begin.^succ no end.succ
inv10 B:    │                                                                                                           └──  all c:Component| c.workstation in c.^parts.workstation.succ
inv10 B:    │                                                                                                               └──  all c:Component| c.workstation in c.^(parts.workstation.succ)
inv10 B:    │                                                                                                                   └──  all c:Component| c.parts in Component implies c.workstation in c.parts.workstation.^succ
FN5h5HQ3zp9zm7tiN M:     │                                                                                                                       └──  user added theme options. same as previous submission
inv10 B:    │                                                                                                                           └──  all c:Component| c.parts in Component implies c.workstation in c.parts.workstation.^succ
inv10 B:    │                                                                                                                               └──  all c:Component| c.parts in Component implies c.workstation in c.parts.workstation.^succ
inv10 B:    │                                                                                                                                   └──  all c:Component| c.parts in Component implies c.parts.workstation in c.workstation.^succ
inv10 B:    │                                                                                                                                       └──  all c:Component| c.parts in Component implies c.parts.workstation in c.workstation.^succ
inv10 B:    │                                                                                                                                           └──  all c:Component| c.parts in Component implies c.parts.workstation in c.^workstation.succ
inv10 B:    │                                                                                                                                               └──  all c:Component| c.parts in Component implies c.parts.workstation in c.^(workstation.succ)
inv10 B:    │                                                                                                                                                   └──  all c:Component| c.parts in Component implies c.workstation in c.^(parts.workstation.succ)
inv4 U:     ├──  all p : Product | (some p.parts and p in Product) or (no p.parts and p in Material)
inv1 S:     ├──  Workers = no Human +Robot
inv1 S:     │   └──  Workers = not Human +Robot
inv1 S:     │       └──  Workers =  Human +Robot
inv1 C:     │           └──  Worker =  Human +Robot
inv1 T:     │               └──  Worker =  Human or Robot
inv2 C:     │                   └──  all w:Workstation | some w.workers all w:Worker | one workers.w
inv3 C:     │                       └──  all c:Component | one c.workstation
inv4 B:     │                           └──  all p:Component | some Product.parts all c:Material | no Product.parts
inv4 T:     │                               └──  all p:Product | p in Component implies p.parts all p:Product | p in Material implies no p.parts
inv4 C:     │                                   └──  all p:Product | p in Component implies some  p.parts all p:Product | p in Material implies no p.parts
inv5 O:     │                                       └──  all w:Workstation,w1:w.workers|w1 =Human +Robot
inv5 C:     │                                           └──  all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 S:     │                                               └──  all c:Product | p in Component implies p not in c.parts
inv6 U:     │                                                   └──  all c:Product | c in Component implies c not in c.parts
inv6 U:     │                                                       └──  all c:Product | c in Component implies not c in c.parts
inv6 C:     │                                                           └──  all c:Product | c in Component implies not c in c.^parts
inv7 B:     │                                                               └──  all c:Component | some p:c.parts | p in Dangerous implies c in Dangerous
inv7 B:     │                                                                   └──  all c:Component | some p:c.^parts | p in Dangerous implies c in Dangerous
inv7 B:     │                                                                       └──  all c:Component | some p:c.^parts | Dangerous in p implies c in Dangerous
inv7 B:     │                                                                           └──  all c:Component | some p:c.^parts | Dangerous in p implies  Dangerous in c
inv7 B:     │                                                                               └──  all c:Component | some p:c.^parts | Dangerous in p implies some (c & Dangerous & Component)
inv7 T:     │                                                                                   └──  all c:Component | some p:c.^parts | Dangerous in p implies  (c & Dangerous & Component)
inv7 S:     │                                                                                       └──  all c:Component |  | Dangerous in c.^parts implies some  (c & Dangerous & Component)
inv7 B:     │                                                                                           └──  all c:Component |Dangerous in c.^parts implies some  (c & Dangerous & Component)
inv7 B:     │                                                                                               └──  all c:Component | some p:c.parts | p in Dangerous implies c in Dangerous
inv7 C:     │                                                                                                   └──  all c:Component, p:c.parts | p in Dangerous implies c in Dangerous
inv8 U:     │                                                                                                       └──  all c:Product | c in Dangerous implies no (c.workers & Human)
inv8 C:     │                                                                                                           └──  all c:Product | c in Dangerous implies no (c.workstation.workers & Human)
inv9 S:     ├──  one begin.succ and one succ.end and  (no succ & iden) and ((w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end))
inv9 S:     │   └──  one begin.succ and one succ.end and  (no succ & iden) and ((w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end))
inv9 S:     │       └──  one begin.succ and one succ.end and  (no succ & iden) and ((w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end))
inv9 S:     │           └──  one begin.succ and one succ.end and
inv9 S:     │               └──  one begin.succ and one succ.end and
inv1 C:     │                   └──  Worker in Human+Robot
inv2 C:     │                       └──  (all ws : Workstation | some ws.workers) and (all wo : Worker | one workers.wo)
inv3 C:     │                           └──  all c : Component | one c.workstation
inv4 C:     │                               └──  (all c : Component | some c.parts) and (no Material.parts)
inv5 C:     │                                   └──  no workers.Human & workers.Robot
inv6 C:     │                                       └──  all c : Component | c not in c.^parts
inv7 O:     │                                           └──  all c : Component | some c.^parts & Dangerous implies c in Dangerous
inv8 B:     │                                               └──  all d : Dangerous | d.workstation.workers not in Human
inv9 E:     │                                                   └──   
inv10 B:    │                                                       └──  all c : Component, p : Product | p in c.^parts implies c.workstation in (p.workstation).^succ
inv8 B:     │                                                           └──  all d : Dangerous | d.workstation.workers not in Human
inv7 O:     │                                                               └──  all c : Component | some c.^parts & Dangerous implies c in Dangerous
inv8 B:     │                                                                   └──  all d : Dangerous | d.workstation.workers not in Human
inv8 T:     │                                                                       └──  no Dangerous.Workstation & workers.Human
inv8 C:     │                                                                           └──  no Dangerous.workstation & workers.Human
inv8 B:     │                                                                               └──  all d : Dangerous | d.workstation.workers not in Human
inv1 S:     ├──  some Human and some Robots
inv1 B:     │   └──  some Human and some Robot
inv1 U:     │       └──  all w: Worker | w in Human => w not in Robot
inv1 U:     │           └──  all w: Worker | w in Human => w not in Robot all w: Worker | w in Robot => w not in Human
inv1 C:     │               └──  all w: Worker | w in Human or w in Robot
inv1 U:     │                   └──  all h: Human, r: Robot | #(h & r) = 0
inv1 C:     │                       └──  all w: Worker | w in Human or w in Robot
inv2 S:     │                           └──  all ws: Workstation| some w: worker | w in ws.workers all w: worker | one ws: Workstation | w in ws.workstation
inv1 C:     │                               └──  all w: Worker | w in Human or w in Robot
inv1 C:     │                                   └──  all w: Worker | w in Human or w in Robot
inv2 C:     │                                       └──  all ws: Workstation| some w: Worker | w in ws.workers all w: Worker | one ws: Workstation | w in ws.workers
inv2 C:     │                                           └──  all ws: Workstation| some w: Worker | w in ws.workers all w: Worker | one ws: Workstation | w in ws.workers
inv3 S:     │                                               └──  all c: Component| one c.worktations
inv3 S:     │                                                   └──  all c: Component| one c.worktation
inv3 C:     │                                                       └──  all c: Component| one c.workstation
inv4 S:     │                                                           └──  all c: Compinent | some c.parts all m: Material | no m.parts
inv4 C:     │                                                               └──  all c: Component | some c.parts all m: Material | no m.parts
inv5 S:     │                                                                   └──  all ws: Workstation, w:worker | w in Human and w in ws.workers => ws.workers not in Robot
inv5 U:     │                                                                       └──  all ws: Workstation, w: Worker | w in Human and w in ws.workers => ws.workers not in Robot
inv5 U:     │                                                                           └──  all ws: Workstation, w: Worker | w in Human and w in ws.workers => ws.workers not in Robot all ws: Workstation, w: Worker | w in Robot and w in ws.workers => ws.workers not in Human
inv5 B:     │                                                                               └──  all ws: Workstation| some w: Worker | w in Human and w in ws.workers => ws.workers not in Robot all ws: Workstation |some  w: Worker | w in Robot and w in ws.workers => ws.workers not in Human
inv5 C:     │                                                                                   └──  all ws: Workstation, r: Robot, h: Human | h in ws.workers => r not in ws.workers
inv6 C:     │                                                                                       └──  all c: Component| c not in c.^parts
inv7 S:     │                                                                                           └──  all c: Components | c.^parts in Dangerous => c in Dangerous
inv7 B:     │                                                                                               └──  all c: Component | c.^parts in Dangerous => c in Dangerous
inv7 B:     │                                                                                                   └──  all c: Product | c.^parts in Dangerous => c in Dangerous
inv7 O:     │                                                                                                       └──  all d: Dangerous |parts.d in Dangerous
inv8 S:     │                                                                                                           └──  all c: Components| c in Dangerous => c.workstation.workers not in Human
inv8 B:     │                                                                                                               └──  all c: Component| c in Dangerous => c.workstation.workers not in Human
inv1 E:     ├──   
inv9 S:     ├──  one begin.succ and one succ.end and  (no succ & iden) and ((w in begin and one w.succ-w) or (w in end and one succ.w-w) or (one w.succ-w and one succ.w-w) or (w in begin+end))
inv8 B:     │   └──  all d : Dangerous | d.workstation.workers not in Human
inv7 O:     │       └──  all c : Component | some c.^parts & Dangerous implies c in Dangerous
inv8 B:     │           └──  all d : Dangerous | d.workstation.workers not in Human
inv8 C:     │               └──  no Dangerous.workstation & workers.Human
inv8 B:     │                   └──  all d : Dangerous | d.workstation.workers not in Human
inv8 B:     │                       └──  all d : Dangerous | (d.workstation.workers) not in Human
inv8 S:     │                           └──  all d : Dangerous | some d.worstation implies (d.workstation.workers) not in Human
inv8 B:     │                               └──  all d : Dangerous | some d.workstation implies (d.workstation.workers) not in Human
inv8 B:     │                                   └──  all d : Dangerous | (d.workstation.workers) not in Human
inv8 C:     │                                       └──  no Dangerous.workstation & workers.Human
inv8 C:     │                                           └──  no Dangerous.workstation & workers.Human
inv9 O:     │                                               └──  one begin.workstation and one workstation.end and (all w : Workstation-begin-end | one w.workstation and one workstation.w)
inv9 O:     │                                                   └──  one begin.workstation and one workstation.end and (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 O:     │                                                       └──  one begin.workstation and one workstation.end and (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 O:     │                                                           └──  one begin.workstation and one workstation.end and (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 B:     │                                                               └──  one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 U:     │                                                                   └──  no succ or (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 U:     │                                                                       └──  one Workstation or (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 B:     │                                                                           └──  (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 T:     │                                                                               └──  no begin->end in succ and (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 B:     │                                                                                   └──  no begin->end & succ and (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 S:     │                                                                                       └──  (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 U:     │                                                                                           └──  (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 B:     │                                                                                               └──  (one begin.succ and one succ.end and (all w : Workstation-begin-end | one w.succ and one succ.w))
inv9 U:     │                                                                                                   └──  all w : Workstation-begin-end | one w.succ and one succ.w
inv9 B:     │                                                                                                       └──  (all w : Workstation-begin-end | one w.succ and one succ.w) one begin.succ one succ.end end in begin.^succ
inv9 B:     │                                                                                                           └──  all w : Workstation-begin-end | one w.succ and one succ.w one begin.succ one succ.end end in begin.^succ
inv9 B:     │                                                                                                               └──  (all w : Workstation-begin-end | one w.succ and one succ.w) and (one begin.succ) and (one succ.end) and (end in begin.^succ)
inv9 B:     │                                                                                                                   └──  (all w : Workstation-begin-end | one w.succ and one succ.w) and (end in begin.^succ)
inv9 S:     │                                                                                                                       └──  (all w : Workstation-begin-end | one w.succ and one succ.w) and
inv9 U:     │                                                                                                                           └──  (all w : Workstation-begin-end | one w.succ and one succ.w)
inv9 B:     │                                                                                                                               └──  (all w : Workstation-begin-end | one w.succ and one succ.w) and (end in begin.^succ)
inv9 U:     │                                                                                                                                   └──  (all w : Workstation-begin-end | one w.succ and one succ.w) and (end in begin.*succ)
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv1 C:     ├──  all w: Worker | w in Human or w in Robot
inv2 B:     │   └──  all w: Worker, ws: Workstation | w in ws.workers
inv2 B:     │       └──  all w: Worker, ws: Workstation | w in ws.workers and some ws.workers
inv2 B:     │           └──  all w: Worker, ws: Workstation | w in ws.workers all ws: Workstation | some ws.workers
inv2 C:     │               └──  all w: Worker | one ws: Workstation | w in ws.workers all ws: Workstation | some ws.workers
inv3 C:     │                   └──  all c: Component | one ws: Workstation | ws in c.workstation
inv4 C:     │                       └──  all p: Product - Material | some p.parts all m: Material | no m.parts
inv5 T:     │                           └──  all ws: Workstation | (ws.workers in Human implies ws.workers not in Robot) & (ws.workers in Robot implies ws.workers not in Human)
inv5 B:     │                               └──  all ws: Workstation | (ws.workers in Human implies ws.workers not in Robot) and (ws.workers in Robot implies ws.workers not in Human)
inv5 B:     │                                   └──  all ws: Workstation | (ws.workers in Human implies ws.workers not in Robot) all ws: Workstation | (ws.workers in Robot implies ws.workers not in Human)
inv5 O:     │                                       └──  all ws: Workstation | ws.workers in Human or ws.workers in Robot
inv6 B:     │                                           └──  all p: Product | p not in p.parts
inv6 O:     │                                               └──  all p: Product | p not in p.^parts
inv7 B:     │                                                   └──  all p: Product | p.parts in Dangerous implies p in Dangerous
inv7 B:     │                                                       └──  some p: Product | p.parts in Dangerous implies p in Dangerous
inv7 B:     │                                                           └──  all p: Product | p.parts in Dangerous implies p in Dangerous
inv7 B:     │                                                               └──  all p: Product | p.^parts in Dangerous implies p in Dangerous
inv7 B:     │                                                                   └──  all p: Product | p.parts in Dangerous implies p in Dangerous
inv8 B:     │                                                                       └──  all c: Component | c in Dangerous implies c.workstation.workers not in Human
inv9 U:     │                                                                           └──  all ws: Workstation | ws not in ws.^succ
inv1 S:     ├──  all x : Worker | x in ((Robot | Human) - (Robot & Human))
inv1 C:     │   └──  all x : Worker | x in ((Robot + Human) - (Robot&Human))
inv1 C:     │       └──  all x : Worker | x in Robot+Human and x not in Robot&Human
inv1 S:     │           └──  all x : Worker | x in Robot|Human and x not in Robot&Human
inv1 C:     │               └──  all x : Worker | x in Robot + Human - Robot&Human
inv1 C:     │                   └──  all x : Worker | x in Robot + Human
inv3 C:     │                       └──  all x: Component | one y: Workstation | y in x.workstation
inv4 T:     │                           └──  all x : Product | x in (Component-Material).parts and no x in (Material-Component).parts
inv4 B:     │                               └──  all x : Product | x in (Component-Material).parts and x not in (Material-Component).parts
inv4 B:     │                                   └──  some x : Product | x in Component.parts and x not in Material.parts
inv4 B:     │                                       └──  some Component.parts and no Material.parts
inv5 S:     │                                           └──  a
inv2 O:     │                                               └──  some Workstation.workers && one workstation.Worker
inv2 B:     │                                                   └──  some Workstation.workers && one workers.Worker
inv2 U:     │                                                       └──  all x: Workstation | some (x.workers)
inv2 C:     │                                                           └──  all x: Workstation | some (x.workers) all y: Worker | one (workers.y)
inv2 U:     │                                                               └──  all x: Workstation, y: Worker | some (x.workers) && one (workers.y)
inv2 C:     │                                                                   └──  all x: Workstation | some (x.workers) && all y: Worker | one (workers.y)
inv6 U:     │                                                                       └──  all x: Component | x not in x.parts
inv4 U:     │                                                                           └──  all x: Component | some (x.parts) && all y: Material | no (y.parts)
inv4 U:     │                                                                               └──  all x: Component | some (x.parts) || all y: Material | no (y.parts)
inv4 S:     │                                                                                   └──  all x: Product | x in Component -> some (x.parts) || x in Material -> no (y.parts)
inv4 S:     │                                                                                       └──  all x: Product | (x in Component && some x.parts) || (x in Material && no y.parts)
inv4 C:     │                                                                                           └──  all x: Product | (x in Component && some x.parts) || (x in Material && no x.parts)
inv6 C:     │                                                                                               └──  all x: Component | x not in x.^parts
inv7 C:     │                                                                                                   └──  all x: Component, y: x.parts | y in Dangerous implies x in Dangerous
inv8 S:     │                                                                                                       └──  all x: Component | x in Dangerous -> no x.workstation.workers in Human
inv8 T:     │                                                                                                           └──  all x: Dangerous | no x.workstation.workers in Human
inv8 B:     │                                                                                                               └──  all x: Dangerous | x.workstation.workers not in Human
inv8 O:     │                                                                                                                   └──  all x: Dangerous | x.workstation.workers in Robot
inv5 O:     │                                                                                                                       └──  all x: Workstation | x.workers in Human or x.workers in Robot
inv8 O:     │                                                                                                                           └──  all x: Dangerous | x.workstation.workers in Robot
inv9 S:     │                                                                                                                               └──  all x: Workstation-end-begin | no ^(succs).begin and no end.^(succs) and one x.^(succs)
inv9 U:     │                                                                                                                                   └──  all x: Workstation-end-begin | no ^(succ).begin and no end.^(succ) and one x.^(succ)
inv9 S:     │                                                                                                                                       └──  all x: Workstation-end-begin-x | no ^(succ).begin and no end.^(succ) and one x.^(succ)
inv9 U:     │                                                                                                                                           └──  all x: Workstation-end-begin | no ^(succ).begin and no end.^(succ) and one x.^(succ)-x
inv9 U:     │                                                                                                                                               └──  all x: Workstation-end-begin | no ^(succ).begin and no end.^(succ) and one x.^(succ) and x.^(succ) not in x
inv9 U:     │                                                                                                                                                   └──  all x: Workstation-end-begin | no ^(succ).begin and no end.^(succ) and one x.^(succ) and x not in x.^(succ)
xm9vYcHXX9amkjRif M:     │                                                                                                                                                       └──  user added theme options. same as previous submission
inv1 C:     ├──  no Worker - Robot - Human
inv2 U:     │   └──  all ws: Workstation, w: Worker | some ws.workers and some workers.w
inv2 U:     │       └──  all ws: Workstation, w: Worker | some ws.workers and one workers.w
inv2 U:     │           └──  all ws: Workstation| some ws.workers
inv2 U:     │               └──  (all ws: Workstation | some ws.workers) and (all w: Worker | some workers.w)
inv2 C:     │                   └──  (all ws: Workstation | some ws.workers) and (all w: Worker | one workers.w)
inv3 C:     │                       └──  all c: Component | one c.workstation
inv4 C:     │                           └──  (all c: Component | some c.parts) and (all m: Material | no m.parts)
inv5 C:     │                               └──  all ws: Workstation | no (ws.workers & Robot) or no (ws.workers & Human)
inv6 U:     │                                   └──  all c1, c2: Component | c2 in c1.parts implies c2 != c1
inv6 T:     │                                       └──  all c1, c2: Component | c2 in ^c1.parts implies c2 != c1
inv6 S:     │                                           └──  all c1, c2: Component | c2 in c1^.parts implies c2 != c1
inv6 C:     │                                               └──  all c1, c2: Component | c2 in c1.^parts implies c2 != c1
inv7 O:     │                                                   └──  all c: Component | some (c.^parts & Dangerous) implies c in Dangerous
inv8 C:     │                                                       └──  all c: Component | c in Dangerous implies (no c.workstation.workers & Human)
inv9 B:     │                                                           └──  end in begin.^succ
inv9 T:     │                                                               └──  end in ^begin.succ
inv9 B:     │                                                                   └──  end in begin.^succ
inv9 B:     │                                                                       └──  end in begin.^succ and (all ws: Workstation | one ws.succ)
inv5 E:     ├──   
inv1 B:     ├──  all w:Workstation | w.workers in Human or w.workers in Robot
inv1 S:     │   └──  all w:Workers | w in Human or w in Robot
inv1 C:     │       └──  all w:Worker | w in Human or w in Robot
inv2 B:     │           └──  all ws:Workstation, w:Worker | w in ws.workers and (some ws1: Workstation | w in ws1.workers)
inv2 S:     │               └──  all ws:Workstation | some w:Workers | w in ws.workers and all w1:Worker | one ws1:workstation | w1 in ws.workers
inv2 T:     │                   └──  all ws:Workstation | some w:Worker | w in ws.workers and all w1:Worker | one ws1:workstation | w1 in ws.workers
inv2 S:     │                       └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w1:Worker | one ws1:workstation | w1 in ws.workers)
inv2 T:     │                           └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w1:Worker | one ws1:workstation | w1 in ws1.workers)
inv2 C:     │                               └──  (all ws:Workstation | some w:Worker | w in ws.workers) and (all w1:Worker | one ws1:Workstation | w1 in ws1.workers)
inv3 C:     │                                   └──  all c:Component | one ws:Workstation | ws in c.workstation
inv4 S:     │                                       └──  all p:Product, p1:Product | (p in Component implies p1 in p1.parts and p!=p1) or (p in Materials implies p1 not in p1.parts and p!=p1)
inv4 U:     │                                           └──  all p:Product, p1:Product | (p in Component implies p1 in p1.parts and p!=p1) or (p in Material implies p1 not in p1.parts and p!=p1)
inv4 U:     │                                               └──  all p:Product, p1:Product | (p in Component implies p in p1.parts and p!=p1) or (p in Material implies p1 not in p1.parts and p!=p1)
inv4 U:     │                                                   └──  all p:Product, p1:Product | (p in Component implies p in p1.parts and p!=p1) or (p in Material implies p not in p1.parts and p!=p1)
inv4 S:     │                                                       └──  None
inv4 B:     │                                                           └──  (all c:Component | some p:Product | p not in c.parts) and (all m:Material | no p:Product | p not in m.parts)
inv4 B:     │                                                               └──  (all c:Component | some p:Product | p in c.parts) and (all m:Material | no p:Product | p not in m.parts)
inv4 C:     │                                                                   └──  (all c:Component | some p:Product | p in c.parts) and (all m:Material | no p:Product | p in m.parts)
inv4 C:     │                                                                       └──  (all c:Component | some p:Product | p in c.parts) and (all m:Material | all p:Product | p not in m.parts)
inv5 C:     │                                                                           └──  all ws:Workstation, h:Human, r:Robot | h in ws.workers implies r not in ws.workers
inv6 O:     │                                                                               └──  all c:Component, c1:Component | c1 in c.parts and c!=c1
inv7 U:     │                                                                                   └──  all c:Component | some p:Component | (p in Dangerous and p in c.parts) implies c in Dangerous
inv7 U:     │                                                                                       └──  all c:Component | all p:Component | (p in Dangerous and p in c.parts) implies c in Dangerous
inv7 U:     │                                                                                           └──  all c:Component | all p:Component | (p in Dangerous &&  p in c.parts) implies c in Dangerous
inv7 C:     │                                                                                               └──  all c:Component | all p:Product | (p in Dangerous and p in c.parts) implies c in Dangerous
inv8 S:     │                                                                                                   └──  all c:Component, h:Human, w:Workstation | c in Dangerous and ws in c.workstation implies h not in ws.workers
inv8 C:     │                                                                                                       └──  all c:Component, h:Human, ws:Workstation | c in Dangerous and ws in c.workstation implies (h not in ws.workers)
inv9 B:     │                                                                                                           └──  all ws:Workstation, w1:Workstation | w1 in ws.succ
inv9 S:     │                                                                                                               └──  (all w1:Workstation, w2:Workstation | (w1 in begin and w1!=w2) implies w1 in w2.succ) and (all w1: Workstation | w not in w.succ) and (all w1:Worktation | w not in end implies one w1.succ)
inv9 S:     │                                                                                                                   └──  (all w1:Workstation, w2:Workstation | (w1 in begin and w1!=w2) implies w1 in w2.succ) and (all w: Workstation | w not in w.succ) and (all w:Worktation | w not in end implies one w.succ)
inv9 B:     │                                                                                                                       └──  (all w1:Workstation, w2:Workstation | (w1 in begin and w1!=w2) implies w1 in w2.succ) and (all w: Workstation | w not in w.succ) and (all w:Workstation | w not in end implies one w.succ)
inv9 B:     │                                                                                                                           └──  (all w1:Workstation, w2:Workstation | (w1 in begin and w1!=w2) implies w1 in w2.succ) and (all w: Workstation | w not in w.^(succ)) and (all w:Workstation | w not in end implies one w.succ)
inv9 S:     │                                                                                                                               └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstation | w not in w.^(succ)) and (all w:Workstation | w not in end implies one w.succ)
inv9 C:     │                                                                                                                                   └──  (all w,wb:Workstation | (wb in begin and wb!=w) implies w in wb.^(succ)) and (all w:Workstation | w not in w.^(succ)) and (all w:Workstation | w not in end implies one w.succ)
inv10 B:    │                                                                                                                                       └──  all c1, c2 : Component | all ws1, ws2 : Workstation | ws1 in c1.workstation and ws2 in c2.workstation and c2 in c1.parts implies ws1 in ws1.succ
inv10 B:    │                                                                                                                                           └──  all c1, c2 : Component | all ws1, ws2 : Workstation | ws1 in c1.workstation and ws2 in c2.workstation and c2 in c1.parts implies ws1 in ws2.succ
inv10 B:    │                                                                                                                                               └──  all c1, c2 : Component | all ws1, ws2 : Workstation | ws1 in c1.workstation and ws2 in c2.workstation and c2 in c1.^(parts) implies ws1 in ws2.^(succ)
inv1 C:     ├──  all w : Worker | w in Human or w in Robot
inv1 C:     │   └──  Worker = Human + Robot
inv2 C:     │       └──  all ws : Workstation | some ws.workers all w : Worker | one workers.w
inv2 U:     │           └──  some Workstation.workers all w : Worker | one workers.w
inv3 C:     │               └──  all c : Component | one c.workstation
inv4 C:     │                   └──  all c : Component | some c.parts all m : Material | no m.parts
inv4 C:     │                       └──  all p : Product | (p in Component && some p.parts) || (p in Material && no p.parts)
inv4 C:     │                           └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 O:     │                               └──  all ws : Workstation | ws.workers in Human || ws.workers in Robot
inv6 U:     │                                   └──  all c : Component | c not in c.parts
inv6 O:     │                                       └──  all c : Component | c not in c.*parts
inv6 C:     │                                           └──  all c : Component | c not in c.^parts
inv7 O:     │                                               └──  all c : Component | all p : c.parts + parts.c | p in Dangerous => c in Dangerous
inv7 B:     │                                                   └──  all c : Component | some p : c.parts | p in Dangerous => c in Dangerous
inv7 B:     │                                                       └──  all c : Component | all p : parts.c | p in Dangerous => c in Dangerous
inv7 B:     │                                                           └──  all c : Component | all p : parts.c | p in Dangerous && c in Dangerous
inv7 B:     │                                                               └──  all c : Component | c.parts in Dangerous => c in Dangerous
inv7 T:     │                                                                   └──  all c : Component | c.Dangerous => c.parts in Dangerous
inv7 B:     │                                                                       └──  all c : Component | c in parts.Dangerous => c.parts in Dangerous
inv7 C:     │                                                                           └──  all c : Component | c in parts.Dangerous => c in Dangerous
inv8 U:     │                                                                               └──  all c : Component | c in Dangerous => no (workstation.c.workers & Human)
inv8 U:     │                                                                                   └──  all c : Component | c in Dangerous => no ((workstation.c).workers & Human)
inv8 T:     │                                                                                       └──  all c : Component | c in Dangerous => no Human in workstation.c.workers
inv8 U:     │                                                                                           └──  all c : Component | c in Dangerous => all ws : workstation.c | no (ws.workers & Human)
inv8 O:     │                                                                                               └──  all c : Component | c in Dangerous => one ws : workstation.c | no (ws.workers & Human)
inv8 U:     │                                                                                                   └──  all c : Component, ws : workstation.c | c in Dangerous => no (Human & ws.workers)
inv8 C:     │                                                                                                       └──  all c : Component, ws : c.workstation | c in Dangerous => no (Human & ws.workers)
inv8 C:     │                                                                                                           └──  all c : Component | c in Dangerous => no (c.workstation.workers & Human)
inv9 U:     │                                                                                                               └──  begin -> end in *succ
inv9 B:     │                                                                                                                   └──  begin -> end in ^succ
inv9 T:     │                                                                                                                       └──  one begin -> end in *succ
inv9 T:     │                                                                                                                           └──  all ws : Workstation | one begin->end in *succ
inv9 U:     │                                                                                                                               └──  all ws : Workstation | begin->end in *succ
inv9 T:     │                                                                                                                                   └──  all ws : Workstation | begin->end in ws.*succ
inv9 T:     │                                                                                                                                       └──  all ws : Workstation | begin->end in ws.^succ
inv9 U:     │                                                                                                                                           └──  begin->end in *succ
inv9 B:     │                                                                                                                                               └──  begin->end in ^succ
inv9 B:     │                                                                                                                                                   └──  end in begin.^succ
inv9 U:     │                                                                                                                                                       └──  end in begin.*succ
inv9 B:     │                                                                                                                                                           └──  end in begin.^succ-begin
inv9 B:     │                                                                                                                                                               └──  end in begin.^succ && no end.succ
inv9 U:     │                                                                                                                                                                   └──  end in begin.*succ && no end.succ
inv9 B:     │                                                                                                                                                                       └──  no (iden & ^succ) && (end in begin.^succ) && no end.succ
inv9 B:     │                                                                                                                                                                           └──  no (iden & ^succ) && (end in begin.^succ) && no end.succ && no succ.begin
inv9 U:     │                                                                                                                                                                               └──  lone ((begin.^succ :> (end + begin)) - begin)
inv9 U:     │                                                                                                                                                                                   └──  lone ((begin.^succ :> (end + begin)) - begin)
inv9 E:     │                                                                                                                                                                                       └──   
inv9 B:     │                                                                                                                                                                                           └──  no succ.begin no end.succ end in begin.^succ
inv9 U:     │                                                                                                                                                                                               └──  no succ.begin no end.succ all ws : Workstation-begin | ws in begin.^succ
inv9 S:     │                                                                                                                                                                                                   └──  no succ.begin no end.succ Workstation-begin in begin.^
inv9 U:     │                                                                                                                                                                                                       └──  no succ.begin no end.succ (Workstation-begin) in begin.^succ
inv9 B:     │                                                                                                                                                                                                           └──  begin.^succ = Workstation no w : Workstation | w in begin.^succ and w !in (begin + end) begin.succ = end
inv9 B:     │                                                                                                                                                                                                               └──  begin.^succ = Workstation no w : Workstation | w in begin.^succ and w !in (begin + end)
inv9 B:     │                                                                                                                                                                                                                   └──  begin.^succ = Workstation begin.succ = end
inv9 B:     │                                                                                                                                                                                                                       └──  begin.^succ = Workstation - begin no w : Workstation | w in begin.^succ and w !in (begin + end) begin.succ = end
inv9 B:     │                                                                                                                                                                                                                           └──  all w : Workstation | (w in begin.^succ) <=> (w in (begin + end)) no w : Workstation | w in begin.^succ and w !in (begin + end)
inv9 E:     │                                                                                                                                                                                                                               └──   
inv9 B:     │                                                                                                                                                                                                                                   └──  begin.^succ = Workstation
inv9 B:     │                                                                                                                                                                                                                                       └──  begin.^succ = Workstation begin != end
inv9 B:     │                                                                                                                                                                                                                                           └──  begin.^succ = Workstation begin.succ = end
inv9 O:     │                                                                                                                                                                                                                                               └──  begin.^succ = Workstation no succ.begin begin.succ = end
inv9 B:     │                                                                                                                                                                                                                                                   └──  begin.*succ = Workstation no succ.begin begin.succ = end
inv9 O:     │                                                                                                                                                                                                                                                       └──  begin.^succ = Workstation no succ.begin no end.succ begin.succ = end
inv9 O:     │                                                                                                                                                                                                                                                           └──  all ws : Workstation | one ws.succ begin.^succ = Workstation no succ.begin no end.succ begin.succ = end
inv9 O:     │                                                                                                                                                                                                                                                               └──  all ws : Workstation | lone ws.succ begin.^succ = Workstation no succ.begin no end.succ begin.succ = end
inv9 S:     │                                                                                                                                                                                                                                                                   └──  begin.succ^* = Workstation  no w : Workstation | (w in begin.succ^*) and (w !in (begin + end))  begin.succ = end no w:Workstation | w.succ = end
inv9 S:     │                                                                                                                                                                                                                                                                       └──  begin.succ^* = Workstation
inv9 U:     │                                                                                                                                                                                                                                                                           └──  begin.^*succ = Workstation
inv9 S:     │                                                                                                                                                                                                                                                                               └──  no begin.succ*
inv9 B:     │                                                                                                                                                                                                                                                                                   └──  Workstation in begin.^succ
inv9 U:     │                                                                                                                                                                                                                                                                                       └──  Workstation in begin.*succ
inv9 U:     │                                                                                                                                                                                                                                                                                           └──  Workstation in begin.*succ no succ.begin no end.succ all ws : begin.^succ - (begin + end) | one ws.succ
inv9 U:     │                                                                                                                                                                                                                                                                                               └──  Workstation in begin.*succ no succ.begin no end.succ all ws : begin.^succ - (begin + end) | one ws.succ no (iden & ^succ)
inv9 U:     │                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ)
inv9 O:     │                                                                                                                                                                                                                                                                                                       └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ
inv9 O:     │                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ
inv9 O:     │                                                                                                                                                                                                                                                                                                               └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin no end.succ no begin&end
inv9 T:     │                                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && end.succ no begin&end
inv9 O:     │                                                                                                                                                                                                                                                                                                                       └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && no end.succ no begin&end
inv9 O:     │                                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && no end.succ #begin.^succ >= 1
inv9 B:     │                                                                                                                                                                                                                                                                                                                               └──  no (iden & ^succ) #begin.^succ >= 1
inv9 O:     │                                                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && no end.succ
inv10 B:    │                                                                                                                                                                                                                                                                                                                                       └──  no (parts :> Component & workstation.*succ.~workstation)
inv9 O:     │                                                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && no end.succ #begin.^succ >= 1
inv9 U:     │                                                                                                                                                                                                                                                                                                                                               └──  lone ((begin.^succ :> (end + begin)) - begin)
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                   └──  all ws : Workstation | ws in begin.^succ && lone ws.succ no succ.begin && no end.succ #begin.^succ >= 1
inv9 E:     │                                                                                                                                                                                                                                                                                                                                                       └──   
inv9 T:     │                                                                                                                                                                                                                                                                                                                                                           └──  no (iden & begin.^succ)
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                               └──  no (iden & ^succ)
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ) Workstation in begin.^succ
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                       └──  no (iden & ^succ) Workstation in begin.^succ no end.succ
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) Workstation in begin.^succ no end.succ no succ.begin all ws : Workstation | lone ws.succ
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                               └──  no (iden & ^succ) Workstation in begin.^succ no end.succ no succ.begin all ws : Workstation | lone ws.succ begin not in end
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ) Workstation in begin.^succ no end.succ no succ.begin all ws : Workstation | lone ws.succ no begin&end
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                                       └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin all ws : Workstation | lone ws.succ no begin&end
inv9 C:     │                                                                                                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin all ws : Workstation | lone ws.succ
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                                               └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin
inv9 C:     │                                                                                                                                                                                                                                                                                                                                                                                                   └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin all ws : Workstation | lone ws.succ
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                                                       └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin
inv9 C:     │                                                                                                                                                                                                                                                                                                                                                                                                           └──  no (iden & ^succ) Workstation in begin.*succ no end.succ no succ.begin all ws : Workstation | lone ws.succ
inv10 B:    │                                                                                                                                                                                                                                                                                                                                                                                                               └──  all c : Component, ws : c.parts.workstation | ws not in c.workstation.^succ
inv10 B:    │                                                                                                                                                                                                                                                                                                                                                                                                                   └──  all c : Component, ws : c.parts.workstation | c.workstation in ws.^succ
Fwoi6XSimPBYmxPxb M:     │                                                                                                                                                                                                                                                                                                                                                                                                                       └──  user added theme options. same as previous submission
inv1 C:     │                                                                                                                                                                                                                                                                                                                                                                                                                           └──  Worker = Human + Robot
inv1 C:     │                                                                                                                                                                                                                                                                                                                                                                                                                               └──  no Human&Robot Worker = Human + Robot
inv1 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  no Human&Robot
inv1 C:     │                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  Worker = Human + Robot
inv1 C:     │                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  Worker = Human + Robot
inv1 T:     │                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  no Human Robot Worker = Human + Robot
inv1 T:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  no Human Robot
inv1 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  no Human&Robot
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 C:     │   └──  all ws: Workstation | some ws.workers all w: Worker | one workers.w
inv3 C:     │       └──  all c: Component | one c.workstation
inv4 C:     │           └──  all c : Component | some c.parts all m : Material | no m.parts
inv5 O:     │               └──  all w : Workstation | w.workers in Human or w.workers in Robot
inv6 C:     │                   └──  all c : Component | c not in c.^parts
inv7 C:     │                       └──  all c : Component | all p : Product | p in Dangerous and p in c.parts implies c in Dangerous
inv8 O:     │                           └──  all c : Component | all w : Workstation | c in Dangerous and w in c.workstation implies w.workers in Robot
inv9 C:     │                               └──  all b, w : Workstation | b in begin and b != w implies w in b.^succ all w : Workstation | w not in w.^succ all w : Workstation | w not in end implies one w.succ
inv10 B:    │                                   └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv1 S:     ├──  all w : Workers | w in Human and w not in Robot
inv1 O:     │   └──  all w : Worker | w in Human and w not in Robot
inv1 C:     │       └──  all w : Worker | w in Human or w in Robot
inv2 U:     │           └──  all a : Worker | all b : Workstation | some b.workers and some workers.a
inv2 U:     │               └──  all a : Worker, b : Workstation | some b.workers and some workers.a
inv2 C:     │                   └──  all a : Workstation | some a.workers all b : Worker | one workers.b
inv3 C:     │                       └──  all c : Component | one c.workstation
inv4 S:     │                           └──  all p : Product | p in Components implies some p.parts all p : Product | p in Materials implies no p.parts
inv4 C:     │                               └──  all p : Product | p in Component implies some p.parts all p : Product | p in Material implies no p.parts
inv5 O:     │                                   └──  all w : Workstation | w.workers in Human or w.workers in Robot
inv6 U:     │                                       └──  all p : Product | p in Component implies p not in p.parts
inv6 C:     │                                           └──  all p : Product | p in Component implies p not in p.^parts
inv6 O:     │                                               └──  all p : Product | p in Component implies p not in p.*parts
inv6 C:     │                                                   └──  all p : Product | p in Component implies p not in p.^parts
Cy4xgv7sT8ePzfPwx M:     │                                                       ├──  user added theme options. same as previous submission
inv7 B:     │                                                       └──  all p : Product | p in Component and p in Dangerous implies p.^parts in Dangerous
inv7 B:     │                                                           └──  all p : Product | p in Component and p in Dangerous implies p.*parts in Dangerous
inv7 B:     │                                                               └──  all p : Product | p in Component and p in Dangerous implies p.parts in Dangerous
inv7 B:     │                                                                   └──  all p : Product | p in Component and Dangerous in p implies Dangerous in p.parts
inv7 B:     │                                                                       └──  all p : Product | p in Component and Dangerous in p implies Dangerous in p.^parts
inv1 C:     │                                                                           └──  Worker = Human + Robot
inv1 C:     │                                                                               └──  all w : Worker | w in Human or w in Robot
inv6 C:     │                                                                                   └──  all c : Component | c not in c.^parts
inv7 B:     │                                                                                       └──  all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 O:     │                                                                                           └──  all c : Component, d : Dangerous | d in c.^parts implies c in Dangerous
inv8 B:     │                                                                                               └──  all c : Component | c in Dangerous implies c.workstation.workers not in Human
inv8 B:     │                                                                                                   └──  all c : Component & Dangerous | c.workstation.workers not in Human
DfPAmqPCXyow2Tnnj M:     │                                                                                                       └──  user added theme options. same as previous submission
inv1 C:     │                                                                                                           ├──  all w : Worker | w in Human + Robot
inv1 S:     │                                                                                                           └──  all w : Woerker | w in Human or w in Robot
inv1 C:     │                                                                                                               └──  all w : Worker | w in Human or w in Robot
inv2 S:     │                                                                                                                   └──  all w : Worktation | some w.workers all w : Worker | some workers.w
inv2 S:     │                                                                                                                       └──  all w : Worksation | some w.workers all w : Worker | some workers.w
inv2 U:     │                                                                                                                           └──  all w : Workstation | some w.workers all w : Worker | some workers.w
inv2 C:     │                                                                                                                               └──  all w : Workstation | some w.workers all w : Worker | one workers.w
inv3 C:     │                                                                                                                                   └──  all c : Component | one c.workstation
inv4 S:     │                                                                                                                                       └──  all p : Product | p in Material implies no p.parts all p : Product | p in Components implies some p.parts
inv4 C:     │                                                                                                                                           └──  all p : Product | p in Material implies no p.parts all p : Product | p in Component implies some p.parts
inv5 O:     │                                                                                                                                               └──  all w : Workstation, h : Human | h in w.workers implies w.workers in Human
inv6 U:     │                                                                                                                                                   └──  all c : Component | c not in c.parts
inv6 C:     │                                                                                                                                                       └──  all c : Component | c not in c.^parts
inv7 T:     │                                                                                                                                                           └──  all c : Component | some c.parts in Dangerous implies c in Dangerous
inv7 O:     │                                                                                                                                                               └──  all c : Component, d : Dangerous | d in c.parts implies c in d
inv7 C:     │                                                                                                                                                                   └──  all c : Component, d : Dangerous | d in c.parts implies c in Dangerous
inv7 C:     │                                                                                                                                                                       └──  all c : Component, d : Dangerous | d in c.parts implies c in Dangerous
inv8 T:     │                                                                                                                                                                           └──  all c : Component & Dangerous | no c.workstation.workers in Human
inv8 O:     │                                                                                                                                                                               └──  all c : Component & Dangerous | c.workstation.workers in Robot
inv1 C:     ├──  all w:Worker | w in Human or w in Robot
inv2 C:     │   └──  all wk:Workstation | some w:Worker | wk in workers.w and (all w2:Worker | one wk2:Workstation | w2 in wk2.workers)
inv3 C:     │       └──  all c:Component | one wk:Workstation | wk in c.workstation
inv4 B:     │           └──  all c:Component, m:Material | c in c.parts and m not in m.parts
inv4 B:     │               └──  all c:Component, m:Material, p:Product | c in p.parts and no m.parts
inv4 B:     │                   └──  all c:Component, m:Material, p:Product | c in p.parts and m not in p.parts
inv4 C:     │                       └──  (all c : Component | some p : Product | c->p in parts) and (all m : Material | no p : Product | m->p in parts)
inv4 B:     │                           └──  (all c : Component | some p : Product | c in p.parts) and (all m : Material | no p : Product | m->p in parts)
inv4 C:     │                               └──  (all c : Component | some p : Product | c in parts.p) and (all m : Material | no p : Product | m->p in parts)
inv4 C:     │                                   └──  (all c : Component | some p : Product | c in parts.p) and (all m : Material | no p : Product | m in parts.p)
inv4 C:     │                                       └──  (all c : Component | some p : Product | c in parts.p) and (all m : Material | no p : Product | m in parts.p)
inv5 C:     │                                           └──  all h:Human, r:Robot, wk1:Workstation, wk2:Workstation | h in wk1.workers and r in wk2.workers implies wk1 != wk2
inv6 U:     │                                               └──  all c:Component | c not in parts.c
inv6 C:     │                                                   └──  all c:Component | c not in c.^(parts)
inv6 C:     │                                                       └──  all c:Component | c not in c.^(parts)
inv7 S:     │                                                           └──  all c:Comonent, p:Product | p in Dangerous and c in p.^(parts) implies c in Dangerous
inv7 B:     │                                                               └──  all c:Component, p:Product | p in Dangerous and c in p.^(parts) implies c in Dangerous
inv7 O:     │                                                                   └──  all c:Component, p:Product | p in Dangerous and p in c.^(parts) implies c in Dangerous
inv8 C:     │                                                                       └──  all c : Component, wk: Workstation | c in Dangerous and wk in c.workstation implies (all h : Human | h not in wk.workers)
inv9 C:     │                                                                           └──  all w,wb : Workstation | (wb in begin and w!=wb) implies w in wb.^(succ) all w : Workstation | w not in w.^(succ) all w : Workstation | w not in end implies one w.succ
inv10 B:    │                                                                               └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
inv10 B:    │                                                                                   └──  all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)
yir98QEvaz98Mxvns M:     │                                                                                       └──  user added theme options. same as previous submission
YNsoTmvHotyMMmNwA M:     ├──  user added theme options. same as previous submission
inv1 E:     ├──   
inv1 S:     │   └──  all w: Workstation | w.workers in Human or w.workers in Robotq
inv1 B:     │       └──  all w: Workstation | w.workers in Human or w.workers in Robot
inv1 E:     │           └──   
inv1 C:     │               └──  Worker = Human + Robot
inv1 E:     │                   └──   
inv1 E:     │                       └──   
inv1 C:     │                           └──  Worker = Human + Robot
inv2 S:     │                               └──  all w: Workstation | some w.workers all w: Worker | one works.w
inv2 C:     │                                   └──  all w: Workstation | some w.workers all w: Worker | one workers.w
inv3 C:     │                                       └──  all c: Component | one c.workstation
inv4 C:     │                                           └──  all c: Component | some c.parts all m: Material | no m.parts
inv5 O:     │                                               └──  all w: Workstation | w.workers in Human or w.workers in Robot
inv6 U:     │                                                   └──  all c: Component | c not in c.parts
inv6 U:     │                                                       └──  all c: Component | Component not in c.parts
inv6 U:     │                                                           └──  all c: Component | c not in c.parts
inv6 U:     │                                                               └──  all c: Component | Component not in c.parts
inv6 B:     │                                                                   └──  Component not in Component.parts
inv6 C:     │                                                                       └──  all c: Component | c not in c.^parts
inv7 O:     │                                                                           └──  all c: Component | some c.^parts implies c in Dangerous
inv7 T:     │                                                                               └──  all c: Component | some (c.^parts in Dangerous) implies c in Dangerous
inv7 T:     │                                                                                   └──  all c: Component | (some c.^parts in Dangerous) implies c in Dangerous
inv7 T:     │                                                                                       └──  all c: Component | (some c.^parts in Dangerous) implies (c in Dangerous)
inv7 T:     │                                                                                           └──  all c: Component | (some c.parts in Dangerous) implies (c in Dangerous)
inv7 T:     │                                                                                               └──  all c: Component | (some c.parts in Dangerous)
inv7 T:     │                                                                                                   └──  all c: Component | (some (c.parts in Dangerous)) implies (c in Dangerous)
inv7 B:     │                                                                                                       └──  all c: Component | (c.parts in Dangerous)
inv7 C:     │                                                                                                           └──  all c: Component | (some (c.parts & Dangerous)) implies (c in Dangerous)
inv7 O:     │                                                                                                               └──  all c: Component | (some (c.^parts & Dangerous)) implies (c in Dangerous)
inv7 C:     │                                                                                                                   └──  all c: Component | (some (c.parts & Dangerous)) implies (c in Dangerous)
inv8 S:     │                                                                                                                       └──  (Dangerous & Components).workstation.workers in Robot
inv8 O:     │                                                                                                                           └──  (Dangerous & Component).workstation.workers in Robot
inv1 C:     ├──  Worker = Human + Robot
inv2 C:     │   └──  all w : Workstation | some (w.workers) all w : Worker | one (w.~workers)
inv3 O:     │       └──  all c : Component | one (c.~workstation)
inv3 C:     │           └──  all c : Component | one (c.workstation)
inv4 C:     │               └──  all m : Material | no m.parts all c : Component | some c.parts
inv5 O:     │                   └──  all w : Workstation | all h : Human | all r : Robot | (h in w.workers) iff (r not in w.workers)
inv5 U:     │                       └──  all w : Workstation | all h : Human | all r : Robot | (h in w.workers) iff (r not in w.workers) and (r in w.workers) iff (h not in w.workers)
inv5 O:     │                           └──  all w : Workstation | all h : Human | all r : Robot | ((h in w.workers) iff (r not in w.workers)) and ((r in w.workers) iff (h not in w.workers))
inv5 S:     │                               └──  all w : Workstation | (w.workers - Humans = Robot) or (w.workers - Humans = none)
inv5 B:     │                                   └──  all w : Workstation | (w.workers - Human = Robot) or (w.workers - Human = none)
inv5 C:     │                                       └──  all w : Workstation | all h : Human | all r : Robot | ((h in w.workers) implies (r not in w.workers)) and ((r in w.workers) implies (h not in w.workers))
inv6 T:     │                                           └──  no c : Component | c in c^(~parts)
inv6 T:     │                                               └──  no c : Component | c in c(~parts)
inv6 T:     │                                                   └──  no c : Component | c in c^(~parts)
inv6 T:     │                                                       └──  all c : Component | c not in c^(~parts)
inv6 U:     │                                                           └──  all c : Component | c not in c.parts
inv6 C:     │                                                               └──  all c : Component | c not in c.^parts
inv7 O:     │                                                                   └──  all c : Component | all d : Dangerous | (d in c.^parts) implies c in Dangerous
inv8 T:     │                                                                       └──  all d : Dangerous | no Human in d.workstation.workers
inv8 B:     │                                                                           └──  all d : Dangerous | Human not in d.workstation.workers
inv8 C:     │                                                                               └──  all d : Dangerous | all w : Worker | (w in d.workstation.workers) implies (w not in Human)
inv9 U:     │                                                                                   └──  all w : Workstation | (w not in w.^succ) and (w not in w.^(~succ))
inv8 C:     │                                                                                       └──  all d : Dangerous | all w : Worker | (w in d.workstation.workers) implies (w not in Human)
inv1 C:     └──  all x: Worker| x in Human or x in Robot
inv2 C:         └──  all x:Workstation | some x.workers all x:Worker | one workers.x
inv3 C:             └──  all x: Component| one x.workstation
inv5 C:                 └──  all x:Human, y:Robot | no workers.x & workers.y
inv4 C:                     └──  all x: Component | some x.parts all x : Material | no x.parts
inv8 B:                         └──  all x:Component | x in Dangerous implies x.workstation.workers not in Human
