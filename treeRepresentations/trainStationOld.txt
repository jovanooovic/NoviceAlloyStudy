fSTYSW95ckEobzLdM
FwCGymHmbqcziisH5 M: └──  user added theme options. same as previous submission
BsPtfpXa5oFyNHSSz M:     ├──  user added theme options. same as previous submission
AEcXoN9yzQMmcvWKS M:     │   ├──  user added theme options. same as previous submission
inv1 C:     │   └──  no s:Green| s in Signal
inv2 C:     │       └──  all s:Signal | eventually s in Green
inv4 C:     │           └──  always all disj t1,t2:Train | no (t1.pos & t2.pos )
inv5 E:     │               └──   
inv5 B:     │                   └──  all t:Train| { always (t.pos in Exit  implies no t.pos.prox') always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox'  )
inv5 U:     │                       └──  all t:Train| { always (t.pos in Exit  implies no t.pos.prox')
inv5 B:     │                           └──  all t:Train| { always (t.pos in Exit  implies no t.pos')
inv5 B:     │                               └──  all t:Train| { always (t.pos in Exit  implies no t.pos')
inv5 B:     │                                   └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox  )
inv5 B:     │                                       └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Entry  implies  t.pos' in t.pos.prox  )
inv5 B:     │                                           └──  always  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox)
inv5 B:     │                                               └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox)
inv5 B:     │                                                   └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Entry  implies  t.pos' in t.pos.prox)
inv6 S:     │                                                       └──  always (all s:Signal | eventually )
inv6 S:     │                                                           └──  always (all s:Signal | eventually )
inv6 C:     │                                                               └──  always (all s:(Signal-Green)  | eventually s in Green) always (all s:Green  | eventually s in (Signal-Green))
inv7 U:     │                                                                   └──  always (all t :Train|t in Entry implies  eventually  t.pos in Exit)
inv7 U:     │                                                                       └──  always (all t :Train|t.pos in Entry implies  eventually  t.pos in Exit)
inv8 B:     │                                                                           └──  all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') implies  ((t.pos.signal) in Green)
inv8 B:     │                                                                               └──  all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') and  ((t.pos.signal) in Green)
inv8 O:     │                                                                                   └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') and  ((t.pos.signal) in Green))
inv5 B:     │                                                                                       └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Entry  implies eventually t.pos' in t.pos.prox)
inv5 B:     │                                                                                           └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Entry  implies eventually t.pos' in t.pos.prox)
inv7 C:     │                                                                                               └──  always ( all t:Train | some t.pos  implies eventually no t.pos )
inv7 C:     │                                                                                                   └──  always ( all t:Train | some t.pos implies eventually no t.pos )
inv5 B:     │                                                                                                       └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Track  implies  t.pos' in t.pos.prox)
inv5 B:     │                                                                                                           └──  all t:Train| { always (t.pos in Exit  implies no t.pos') always (t.pos in Track  implies  t.pos' in t.pos.prox)
inv5 B:     │                                                                                                               └──  all t:Train| { always (t.pos in Exit  implies eventually no t.pos') always (t.pos in Track  implies  t.pos' in t.pos.prox)
inv5 B:     │                                                                                                                   └──  all t:Train| { always (t.pos in Exit  implies eventually no t.pos') always (t.pos in (Track-Exit)  implies  t.pos' in t.pos.prox)
inv5 B:     │                                                                                                                       └──  all t:Train| { always (t.pos in Exit  implies eventually no t.pos) always (t.pos in (Track-Exit)  implies  t.pos' in t.pos.prox)
inv8 B:     │                                                                                                                           └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') since  ((t.pos.signal) in Green))
inv8 B:     │                                                                                                                               └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                   └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies (some t.pos') implies  ((t.pos'.signal) in Green))
inv8 S:     │                                                                                                                                       └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies some t.pos.rox and (some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                           └──  always (all t:Train |(t.pos.signal)  in (Signal-Green) implies some t.pos.prox and (some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                               └──  always (all t:Train |some t.pos and (t.pos.signal)  in (Signal-Green) implies some t.pos.prox and (some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                                   └──  always (all t:Train |(some t.pos and  some t.pos.signal) and (t.pos.signal)  in (Signal-Green) implies some t.pos.prox and (some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                                       └──  always (all t:Train |(some t.pos and  some t.pos.signal and some t.pos.prox) and (t.pos.signal)  in (Signal-Green) implies(some t.pos') since  ((t.pos'.signal) in Green))
inv8 B:     │                                                                                                                                                           └──  always (all t:Train |( (some t.pos and  some t.pos.signal and some t.pos.prox) and (t.pos.signal)  in (Signal-Green) ) implies(some t.pos') since  ((t.pos'.signal) in Green))
inv8 S:     │                                                                                                                                                               └──  always (all t:Train | (some t.pos and  some t.pos.signal and some t.pos.prox) and ((t.pos.signal)  in (Signal-Green)  implies (some t.pos') since  eventually((t.pos.signal) in Green))
inv8 B:     │                                                                                                                                                                   └──  always (all t:Train | (some t.pos and  some t.pos.signal and some t.pos.prox) and ((t.pos.signal)  in (Signal-Green)  implies (some t.pos') since  eventually ((t.pos.signal) in Green)))
inv8 B:     │                                                                                                                                                                       └──  always (all t:Train | (some t.pos.signal and some t.pos.prox) and ((t.pos.signal)  in (Signal-Green)  implies eventually (some t.pos) since  ((t.pos.signal) in Green)))
inv8 O:     │                                                                                                                                                                           └──  always (all t:Train | (some t.pos.signal and some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies  (t.pos in t.pos.prox) since  ((t.pos.signal) in Green)))
inv8 S:     │                                                                                                                                                                               └──  always (all t:Train | (some t.pos.signal and some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies ((t.pos in t.pos.prox) since  (t.pos.signal in Green))
inv8 S:     │                                                                                                                                                                                   └──  always (all t:Train | (some t.pos.signal and some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies ((t.pos in t.pos.prox) since  (t.pos.signal in Green) ))
inv8 O:     │                                                                                                                                                                                       └──  always (all t:Train | (some t.pos.signal and some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies ((t.pos in t.pos.prox) since  (t.pos.signal in Green) )))
inv8 O:     │                                                                                                                                                                                           └──  always (all t:Train | (some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies ((t.pos in t.pos.prox) since  (t.pos.signal in Green) )))
inv8 B:     │                                                                                                                                                                                               └──  always (all t:Train | (some t.pos.prox) and ( (t.pos.signal)  in (Signal-Green)  implies before ((t.pos in t.pos.prox) since  (t.pos.signal in Green) )))
inv8 C:     │                                                                                                                                                                                                   └──  always ( all t:Train | some t.pos.signal and (t.pos.signal  in Signal-Green) implies t.pos' = t.pos )
inv9 S:     │                                                                                                                                                                                                       └──  always ( all t:Train | eventually
inv9 S:     │                                                                                                                                                                                                           └──  always ( all t:Train | eventually
inv8 T:     │                                                                                                                                                                                                               └──  always ( all t:Train | some (t.pos.signal  in Signal-Green) implies t.pos' = t.pos )
inv8 O:     │                                                                                                                                                                                                                   └──  always ( all t:Train |  (t.pos.signal  in Signal-Green) implies t.pos' = t.pos )
inv9 S:     │                                                                                                                                                                                                                       └──  always ( all t:Train | eventually t.pos in Entry
inv9 B:     │                                                                                                                                                                                                                           └──  always ( all t:Train | eventually t.pos in Entry)
inv9 S:     │                                                                                                                                                                                                                               └──  always (no t:Trains | eventually no t.pos in Track-Entry)
inv9 T:     │                                                                                                                                                                                                                                   └──  always (no t:Train | eventually no t.pos in Track-Entry)
inv9 S:     │                                                                                                                                                                                                                                       └──  always (no t:Train | eventually no (t.pos in Track-Entry)
inv9 T:     │                                                                                                                                                                                                                                           └──  always (no t:Train | eventually no (t.pos in Track-Entry))
inv9 B:     │                                                                                                                                                                                                                                               └──  always ( all t:Train | eventually (t.pos in Entry))
inv9 B:     │                                                                                                                                                                                                                                                   └──  always ( all t:Train |some t.pos and eventually (t.pos in Entry))
inv9 B:     │                                                                                                                                                                                                                                                       └──  always ( all t:Train | eventually (t.pos in Entry))
inv9 S:     │                                                                                                                                                                                                                                                           └──  always ( all t:Train |some t.pos eventually (t.pos in Entry))
inv9 S:     │                                                                                                                                                                                                                                                               └──  always ( all t:Train |(some t.pos) eventually (t.pos in Entry))
inv9 S:     │                                                                                                                                                                                                                                                                   └──  always ( all t:Train |(some t.pos) eventually (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                       └──  always ( all t:Train |(some t.pos) and eventually (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                           └──  always ( all t:Train |(no prox.t) and eventually (t.pos in Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                               └──  always ( all t:Train |before (no prox.t) and eventually (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                   └──  always ( all t:Train |eventually (before (no prox.t) and after (t.pos in Entry) ))
inv9 S:     │                                                                                                                                                                                                                                                                                       └──  eventually Trains.pos in Entry
inv9 U:     │                                                                                                                                                                                                                                                                                           └──  eventually Train.pos in Entry
inv9 B:     │                                                                                                                                                                                                                                                                                               └──  always eventually Train.pos in Entry
inv9 U:     │                                                                                                                                                                                                                                                                                                   └──  always ( all t:Train |no t.pos implies  eventually (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                       └──  always ( all t:Train |no t.pos implies  eventually ( some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                           └──  ( all t:Train |no t.pos implies  eventually ( some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                               └──  (all t:Train |no t.pos implies  eventually ( some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                   └──  (all t:Train | eventually ( some t.pos and t.pos in Entry) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                       └──  (all t:Train |some (t.pos.prox & Entry ) eventually ( some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                           └──  (all t:Train |some (t.pos.prox & Entry )implies  eventually ( some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train |some (t.pos.prox & Entry )implies  eventually ( some t.pos and t.pos in Entry) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train |implies  eventually (some (t.pos.prox & Entry ) and some t.pos and t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                       └──  (all t:Train | no t.pos implies  eventually (some (t.pos.prox & Entry ) and some t.pos and t.pos in Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                           └──  (all t:Train |    eventually (some (t.pos.prox & Entry ) and some t.pos and t.pos in Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train |  eventually ( some t.pos and t.pos in Entry) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                   └──  all t:Train |  eventually ( some t.pos & Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                       └──  all t:Train |  eventually ( some t.pos & Entry)
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                           └──  all t:Train |  eventually ( some t.pos & Entry)  and before no t.pos
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                               └──  all t:Train | before no t.pos and eventually ( some t.pos & Entry)
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                   └──  all t:Train | t.pos not in Entry and  before no t.pos and eventually ( some t.pos & Entry)
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                       └──  all t:Train | t.pos not in Entry implies before no t.pos and eventually ( some t.pos & Entry)
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                           └──  all t:Train | some Track and t.pos not in Entry implies before no t.pos and eventually ( some t.pos & Entry)
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                               └──  all t:Train | some Track and (t.pos not in Entry implies before no t.pos and eventually ( some t.pos & Entry)   )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                                   └──  all t:Train | some t.pos and (t.pos not in Entry implies before no t.pos and eventually ( some t.pos & Entry)   )
inv10 S:    │                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all j:Junction | some prox.j and lone((prox.j).signal :>   Green )
inv10 O:    │                                                                                                                                                                                                                                                                                                                                                                                           └──  always (all j:Junction | some prox.j and lone((prox.j).signal :>   Green ))
inv10 C:    │                                                                                                                                                                                                                                                                                                                                                                                               └──  always (all j:Junction | lone((prox.j).signal :> Green))
inv10 C:    │                                                                                                                                                                                                                                                                                                                                                                                                   └──  always (all j:Junction |  lone((prox.j).signal :> Green))
inv10 C:    │                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all j:Junction |  lone((prox.j).signal :> Green))
inv12 S:    │                                                                                                                                                                                                                                                                                                                                                                                                           └──  always ( all t:Train| historically some t.pos and
inv11 O:    │                                                                                                                                                                                                                                                                                                                                                                                                               └──  always ( all t:Train| some t.pos and historically t.pos in Entry)
inv11 O:    │                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always ( all t:Train| some t.pos and historically t.pos in Entry)
inv11 O:    │                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always ( all t:Train| some t.pos and once t.pos in Entry)
inv11 U:    │                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always ( all t:Train| some t.pos implies  once t.pos in Entry)
inv11 C:    │                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always ( all t:Train | some t.pos implies once some t.pos :> Entry)
inv11 T:    │                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always ( all t:Train| some t.pos implies  once some t.pos in Entry)
inv11 T:    │                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always ( all t:Train| some t.pos implies  once some t.pos = Entry)
inv11 C:    │                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always ( all t:Train| some t.pos implies  once some t.pos :> Entry)
inv11 T:    │                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always ( all t:Train | some t.pos implies once  t.pos :> Entry)
inv11 C:    │                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always ( all t:Train| some t.pos implies  once ( some t.pos and t.pos in Entry) )
inv11 C:    │                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always ( all t:Train | some t.pos implies once some t.pos :> Entry)
inv1 E:     ├──   
inv2 C:     ├──  all s:Signal | eventually s in Green
inv3 S:     │   └──  always (t.pos)' = t.pos
inv3 U:     │       └──  always (Train.pos)' = Train.pos
inv3 C:     │           └──  always (all t:Train | (t.pos)'=t.pos)
inv4 C:     │               └──  always pos.~pos in iden
inv5 U:     │                   └──  always (all t:pos.Track | (t.pos)' in t.pos + t.pos.prox or t.pos in Exit)
inv5 U:     │                       └──  always (all t:pos.Track | (t.pos)' in t.pos + t.pos.prox or (t.pos in Exit and (t.pos)' in t.pos))
inv7 U:     │                           └──  always (all t:pos.Train | eventually no t.pos)
inv7 C:     │                               └──  always (all t:pos.Track | eventually no t.pos)
inv10 T:    │                                   └──  always (all j:Junction | lone (prox.Junction).signal.Green)
inv10 C:    │                                       └──  always (all j:Junction | lone (prox.Junction).signal & Green)
inv10 C:    │                                           └──  always (all j:Junction | lone (prox.j).signal & Green)
inv10 C:    │                                               └──  always (lone (prox.Junction).signal & Green)
inv10 C:    │                                                   └──  always (all j:Junction | lone (prox.j).signal & Green) always (lone (prox.Junction).signal & Green)
inv11 S:    │                                                       └──  always (t:pos.Track | once t.pos in Entry)
inv11 U:    │                                                           └──  always (all t:pos.Track | once t.pos in Entry)
inv11 U:    │                                                               └──  always (all t:Train | some t.pos implies once t.pos in Entry)
inv12 E:    │                                                                   └──   
inv12 E:    │                                                                       └──   
inv13 S:    │                                                                           └──  None
inv13 S:    │                                                                               └──  None
inv14 T:    │                                                                                   └──  always (all t:(pos.Track).signal.Green | eventually ((t.pos)' != t.pos and after t.pos.signal not in Green))
inv15 B:    │                                                                                       └──  always eventually (Train.pos)' != Train.pos
inv15 B:    │                                                                                           └──  always eventually (some Train implies (Train.pos)' != Train.pos)
inv15 B:    │                                                                                               └──  always eventually (some Train implies ((Train.pos)' != Train.pos))
inv15 C:    │                                                                                                   └──  always (all t:pos.Track | eventually (t.pos)' != t.pos)
inv16 O:    │                                                                                                       └──  always (all t:pos.Exit | (historically some t.pos) since t.pos in Entry)
inv16 B:    │                                                                                                           └──  always (all t:pos.Exit | (always some t.pos) since t.pos in Entry)
inv17 O:    │                                                                                                               └──  always (some t:Train | once (t.pos in Entry and historically no Entry) and eventually(t.pos in Exit and historically no Exit))
inv17 S:    │                                                                                                                   └──  always (some t:Train | historically no Train.pos) and eventually(t.pos in Exit and historically no Exit))
inv17 O:    │                                                                                                                       └──  always (some t:Train | historically no Train.pos and eventually(t.pos in Exit and historically no Exit))
inv17 O:    │                                                                                                                           └──  always (some t:Train | before historically no Train.pos and eventually(t.pos in Exit and historically no Exit))
inv17 T:    │                                                                                                                               └──  always (some t:Train | historically lone (Train.pos + t) and eventually (t.pos in Exit and historically lone (Train.Exit + t)))
inv17 O:    │                                                                                                                                   └──  always (some t:Train | historically lone (Train.pos + t) and eventually (t.pos in Exit and historically lone (pos.Exit + t)))
inv16 B:    │                                                                                                                                       └──  always (all t:pos.Exit | (always some t.pos) since t.pos in Entry)
inv16 U:    │                                                                                                                                           └──  always (all t:pos.Exit | (some t.pos) since t.pos in Entry)
inv1 U:     ├──  all t:Track | Green not in t.signal until Green in t.signal
inv1 B:     │   └──  always (all t:Track | Green not in t.signal until Green in t.signal)
inv1 B:     │       └──  (all t:Track | Green in t.signal since Green not in t.signal)
inv1 B:     │           └──  (Signal = Green)
inv1 B:     │               └──  once (Signal = Green)
inv1 B:     │                   └──  (historically Signal = Green) until (some t:Track | Green not in t.signal)
inv1 B:     │                       └──  (Signal = Green) until (some t:Track | Green not in t.signal)
inv1 S:     │                           └──  (all f:Track f.signal = Green) until (some t:Track | Green not in t.signal)
inv1 B:     │                               └──  (all f:Track | f.signal = Green) until (some t:Track | Green not in t.signal)
inv2 O:     │                                   └──  eventually (Signal = Green)
inv2 O:     │                                       └──  eventually(all t:Track | t.signal = Green)
inv2 O:     │                                           └──  eventually(all t:Track | eventually t.signal = Green)
inv2 O:     │                                               └──  always(all t:Track | eventually t.signal = Green)
inv2 O:     │                                                   └──  eventually Signal = Green
inv2 O:     │                                                       └──  eventually (Signal = Green)
inv2 O:     │                                                           └──  eventually (all s:Signal | s in Green)
inv2 C:     │                                                               └──  eventually (all s:Signal | eventually s in Green)
inv2 C:     │                                                                   └──  (all s:Signal | eventually s in Green)
inv1 B:     │                                                                       └──  all s:Signal | s not in Green until (some s:Signal | s in Green)
inv1 B:     │                                                                           └──  (all s:Signal | s not in Green) until (some s:Signal | s in Green)
inv1 C:     │                                                                               └──  (some s:Signal | s in Green) since (historically (all s:Signal | s not in Green))
inv1 C:     │                                                                                   └──  (some s:Signal | s in Green) since (historically (all s:Signal | s not in Green))
inv2 C:     │                                                                                       └──  (all s:Signal | eventually s in Green)
inv3 S:     │                                                                                           └──  always(
inv3 S:     │                                                                                               └──  always()
inv2 C:     │                                                                                                   └──  (all s:Signal | eventually s in Green)
inv1 C:     │                                                                                                       └──  (some s:Signal | s in Green) since (historically (all s:Signal | s not in Green))
inv3 U:     │                                                                                                           └──  always( no t:Track | t in t.prox)
inv3 U:     │                                                                                                               └──  always( no t:Track | t in t.prox or t in prox.t)
inv3 O:     │                                                                                                                   └──  always( all t:Train | no t.pos)
inv3 U:     │                                                                                                                       └──  always( all t:Train | no pos.t)
inv3 B:     │                                                                                                                           ├──  always( all t:Train | one t.pos)
inv3 B:     │                                                                                                                           └──  always( all t:Train | one t.pos)
inv1 C:     ├──  no Green
inv2 O:     │   └──  eventually Signal in Green
inv1 S:     ├──  Signal in Red
inv1 C:     │   └──  no s:Green|   s  in Signal
inv1 O:     │       └──  no Signal
inv1 C:     │           └──  no (Signal &Green)
inv2 O:     │               └──  eventually no (Signal-Green)
inv2 C:     │                   └──  all s:Signal | eventually s in Green
inv2 O:     │                       └──  eventually Signal in (Signal&Green)
inv2 O:     │                           └──  eventually (Signal in (Signal&Green))
inv2 O:     │                               └──  eventually (Signal in Green)
inv2 C:     │                                   └──  all s:Signal | eventually s in Green
inv3 U:     │                                       └──  Train.pos' =Train.pos
inv3 U:     │                                           └──  always Train.pos' =Train.pos
inv3 C:     │                                               └──  always all t:Train | t.pos' =t.pos
inv4 U:     │                                                   └──  all disj t1,t2:Train | no (t1.pos &t2.pos)
inv4 U:     │                                                       └──  all disj t1,t2:Train | some (t1.pos &t2.pos ) implies lone ((t1.pos &t2.pos ).signal &Green)
inv4 U:     │                                                           └──  all disj t1,t2:Train | some (t1.pos &t2.pos ) implies lone ((t1.pos &t2.pos ).signal &Green) or no (t1.pos &t2.pos )
inv6 U:     │                                                               └──  all s:Signal | (s in Green implies s not in Green') or (s not in Green implies s in Green')
inv4 U:     │                                                                   └──  all disj t1,t2:Train | no (t1.pos & t2.pos )
inv4 C:     │                                                                       └──  always all disj t1,t2:Train | no (t1.pos & t2.pos )
inv6 U:     │                                                                           └──  always (all s:Signal | (s in Green implies s not in Green') or (s not in Green implies s in Green'))
inv6 S:     │                                                                               └──  None
inv6 S:     │                                                                                   └──  None
inv6 S:     │                                                                                       └──  None
inv6 S:     │                                                                                           └──  None
inv6 S:     │                                                                                               └──  None
inv6 S:     │                                                                                                   └──  None
inv6 S:     │                                                                                                       └──  None
inv6 S:     │                                                                                                           └──  None
inv6 S:     │                                                                                                               └──  None
inv6 S:     │                                                                                                                   └──  None
inv6 S:     │                                                                                                                       └──  None
inv6 S:     │                                                                                                                           └──  always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green'))) )
inv6 B:     │                                                                                                                               └──  always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green')))
inv6 B:     │                                                                                                                                   └──  always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green')))
inv6 U:     │                                                                                                                                       └──  always (all s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green')))
inv6 U:     │                                                                                                                                           └──  always (all s:Signal |  (s in Green implies eventually (no (s &  Green'))) or no (s & Green) implies  eventually (some (s &  Green')))
inv6 U:     │                                                                                                                                               └──  always (all s:Signal | always (s in Green) implies eventually (no (s &  Green'))  or always (no (s & Green)) implies  eventually (some (s &  Green')))
inv6 U:     │                                                                                                                                                   └──  always (all s:Signal |  (s in Green) implies eventually (s not in Green ) or s not in Green implies  eventually (s in  Green) )
inv6 U:     │                                                                                                                                                       └──  always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or always s not in Green implies  eventually (s in  Green) )
inv3 C:     │                                                                                                                                                           └──  always all t:Train | t.pos' = t.pos
inv6 U:     │                                                                                                                                                               └──  always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or always s not in Green implies  eventually (s in  Green) )
inv1 C:     ├──  no Green
inv2 T:     │   └──  eventually Green
inv2 U:     │       └──  eventually Green in Signal
inv2 O:     │           └──  always all s: Signal | eventually s in Green
inv2 O:     │               └──  always all s: Signal | eventually s = Green
inv2 O:     │                   └──  always all s: Signal | eventually Signal = Green
inv2 O:     │                       └──  always all s: Signal | eventually always s in Green
inv2 O:     │                           └──  eventually all s: Signal | s in Green
inv3 S:     │                               └──  always all t: Train | always t in one Track
inv3 O:     │                                   └──  always all t: Train | always t in Track
inv3 U:     │                                       └──  always all t: Train | always t not in Track
inv3 U:     │                                           └──  always all t: Train | t not in Track
inv3 B:     │                                               └──  always all t: Train | some tr: Track | t in tr implies t' in tr
inv3 B:     │                                                   └──  always all t: Train | some tr: Track | t in pos.tr implies t' in pos.tr
inv3 B:     │                                                       └──  always all t: Train | one tr: Track | t in pos.tr implies t' in pos.tr
inv3 B:     │                                                           └──  always all t: Train | one tr: Track | always t in pos.tr implies t' in pos.tr
inv3 B:     │                                                               └──  always all t: Train | one tr: Track | always (t in pos.tr implies t' in pos.tr)
inv3 B:     │                                                                   └──  always all t: Train | always one tr: Track | always (t in pos.tr implies t' in pos.tr)
inv3 T:     │                                                                       └──  always Train.pos.Track
inv3 T:     │                                                                           └──  always Train.pos
inv4 T:     │                                                                               └──  always one Train in Track
inv4 S:     │                                                                                   └──  always one Train in one Track
inv4 T:     │                                                                                       └──  always one Train.pos in Track
inv2 S:     │                                                                                           └──  eventually all Signal in Green
inv2 O:     │                                                                                               └──  eventually all s: Signal | s in Green
inv2 O:     │                                                                                                   └──  always all s: Signal | eventually s in Green
inv2 O:     │                                                                                                       └──  always eventually all s: Signal | s in Green
inv2 O:     │                                                                                                           └──  always all s: Signal | eventually s in Green
inv2 C:     │                                                                                                               └──  all s: Signal | eventually s in Green
inv4 T:     │                                                                                                                   └──  always all t: Train | always one Train in Track
inv4 T:     │                                                                                                                       └──  always all t: Train | always one Train.pos in Track
inv4 B:     │                                                                                                                           └──  always all t: Train | always lone Train.pos
inv4 B:     │                                                                                                                               └──  always lone Train.pos
inv4 O:     │                                                                                                                                   └──  always lone pos.Track
inv4 O:     │                                                                                                                                       └──  always one pos.Track
inv4 T:     │                                                                                                                                           └──  always one pos.Track in Track
inv3 T:     │                                                                                                                                               └──  all t: Train | always t.pos
inv3 U:     │                                                                                                                                                   └──  always all t: Train | t in t.pos implies after t in t.pos
inv3 U:     │                                                                                                                                                       └──  always all t: Train | always t in t.pos implies after t in t.pos
inv3 S:     │                                                                                                                                                           └──  always all t: Train | always t in one t.pos implies after t in t.pos
inv3 B:     │                                                                                                                                                               └──  always all t: Train | always one t.pos implies after t in t.pos
inv3 B:     │                                                                                                                                                                   └──  always all t: Train | always one t.pos implies after t' in t.pos
inv3 T:     │                                                                                                                                                                       └──  always all t: Train | always t.pos implies after t' in t.pos
inv3 O:     │                                                                                                                                                                           └──  always all t: Train | always t' in t.pos
inv3 U:     │                                                                                                                                                                               └──  always all t: Train | always after t.pos = t.pos
inv3 S:     │                                                                                                                                                                                   └──  always all t: Train | always t.pos = after t.pos
inv3 S:     │                                                                                                                                                                                       └──  all t: Train | always t.pos = after t.pos
inv3 S:     │                                                                                                                                                                                           └──  always all t: Train | t.pos = after t.pos
inv3 T:     │                                                                                                                                                                                               └──  always all t: Train | t.pos implies after t.pos
inv3 B:     │                                                                                                                                                                                                   └──  always all t: Train |one tr: Track | t.pos in tr implies after t.pos in tr
inv3 O:     │                                                                                                                                                                                                       └──  always all t: Train | always t in Entry
inv3 O:     │                                                                                                                                                                                                           └──  always Train in Entry
inv3 O:     │                                                                                                                                                                                                               └──  Train in Entry
inv3 B:     │                                                                                                                                                                                                                   └──  always Train.pos in Entry
inv3 S:     │                                                                                                                                                                                                                       └──  always Train.pos in one Track implies always after Train.pos in one Track
inv3 S:     │                                                                                                                                                                                                                           └──  always Train.pos in one Track implies after Train.pos in one Track
inv3 U:     │                                                                                                                                                                                                                               └──  always Train.pos' = Train.pos
inv3 C:     │                                                                                                                                                                                                                                   └──  always pos' = pos
inv6 B:     │                                                                                                                                                                                                                                       └──  always all s: Signal | s in Green implies s' not in Green
inv6 U:     │                                                                                                                                                                                                                                           └──  always all s: Signal | always s in Green implies s' not in Green
inv6 O:     │                                                                                                                                                                                                                                               └──  always all s: Signal | always s != s'
inv6 O:     │                                                                                                                                                                                                                                                   └──  all s: Signal | always s != s'
inv6 O:     │                                                                                                                                                                                                                                                       └──  always Signal != Signal'
inv4 T:     │                                                                                                                                                                                                                                                           └──  always all t1, t2: Train | some tr1,tr2: Track | t1.pos.tr1 and t2.pos.tr2 implies t1=t2
inv4 B:     │                                                                                                                                                                                                                                                               └──  always all t1, t2: Train | some tr1,tr2: Track | t1.pos in tr1 and t2.pos in tr1 implies t1=t2
inv4 B:     │                                                                                                                                                                                                                                                                   └──  always all t1, t2: Train | some tr1: Track | t1.pos in tr1 and t2.pos in tr1 implies t1=t2
inv4 B:     │                                                                                                                                                                                                                                                                       └──  always all t1, t2: Train | some tr1: Track | always (t1.pos in tr1 and t2.pos in tr1 implies t1=t2)
inv4 B:     │                                                                                                                                                                                                                                                                           └──  always all t1, t2: Train | lone tr1: Track | always (t1.pos in tr1 and t2.pos in tr1 implies t1=t2)
inv4 T:     │                                                                                                                                                                                                                                                                               └──  always all t1, t2: Train | lone tr1: Track | always t1.pos.tr1 & t2.pos.tr2 in none
inv4 T:     │                                                                                                                                                                                                                                                                                   └──  always all t1, t2: Train | lone tr1: Track | always no t1.pos.tr1 & t2.pos.tr2
inv4 T:     │                                                                                                                                                                                                                                                                                       └──  always all t1, t2: Train | lone tr1: Track | always no t1.pos.tr1 & t2.pos.tr1
inv4 T:     │                                                                                                                                                                                                                                                                                           └──  always all t1, t2: Train | lone tr1: Track | always (no t1.pos.tr1 & t2.pos.tr1)
inv4 B:     │                                                                                                                                                                                                                                                                                               └──  always all t1, t2: Train | always lone tr1: Track | always (no t1.pos & t2.pos)
inv4 O:     │                                                                                                                                                                                                                                                                                                   └──  always all t1, t2: Train | always (no t1.pos & t2.pos)
inv4 T:     │                                                                                                                                                                                                                                                                                                       └──  always all t1, t2: Train | always t1.pos & t2.pos implies t1=t2
inv4 T:     │                                                                                                                                                                                                                                                                                                           └──  always all t1, t2: Train | always (t1.pos & t2.pos implies t1=t2)
inv6 O:     │                                                                                                                                                                                                                                                                                                               └──  always Signal != Signal'
inv6 O:     │                                                                                                                                                                                                                                                                                                                   └──  always some s : Signal | eventually s' != s
inv6 O:     │                                                                                                                                                                                                                                                                                                                       └──  always some s : Signal | always s' != s
inv6 O:     │                                                                                                                                                                                                                                                                                                                           └──  always one s : Signal | always s' != s
inv6 O:     │                                                                                                                                                                                                                                                                                                                               └──  always all s : Signal | always s' != s
inv6 O:     │                                                                                                                                                                                                                                                                                                                                   └──  always all s : Signal | eventually s' != s
inv6 O:     │                                                                                                                                                                                                                                                                                                                                       └──  always all s : Signal | always eventually s' != s
inv6 B:     │                                                                                                                                                                                                                                                                                                                                           └──  always all s : Signal | s in Green implies s' not in Green
inv6 B:     │                                                                                                                                                                                                                                                                                                                                               └──  always all s : Signal | always (s in Green implies s' not in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                   └──  always all s : Signal | always (s in Green implies s' not in Green) or always (s not in Green implies s' in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                       └──  always all s : Signal | always (s in Green implies s' not in Green) or always (s not in Green implies s' in Green)
inv6 U:     │                                                                                                                                                                                                                                                                                                                                                           └──  always all s : Signal | (s in Green implies s' not in Green) or (s not in Green implies s' in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                               └──  always one s : Signal | (s in Green implies s' not in Green) or (s not in Green implies s' in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                                   └──  always some s : Signal | (s in Green implies s' not in Green) or (s not in Green implies s' in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                                       └──  all s : Signal | always (s in Green implies s' not in Green) or (s not in Green implies s' in Green)
inv6 B:     │                                                                                                                                                                                                                                                                                                                                                                           └──  all s : Signal | always (s in Green implies s' not in Green) or always (s not in Green implies s' in Green)
inv6 S:     │                                                                                                                                                                                                                                                                                                                                                                               └──  None
inv6 S:     │                                                                                                                                                                                                                                                                                                                                                                                   └──  None
inv6 O:     │                                                                                                                                                                                                                                                                                                                                                                                       └──  all s : Signal | always s != s'
inv6 O:     │                                                                                                                                                                                                                                                                                                                                                                                           └──  all s : Signal | always s != s'
inv1 C:     ├──  no Green
inv2 O:     │   └──  eventually no(Signal-Green)
inv2 O:     │       └──  eventually all s:Signal | s in Green
inv2 C:     │           └──  all s:Signal |eventually s in Green
inv3 C:     │               └──  always all t:Train | t.pos = t.pos'
inv4 S:     │                   └──  always on Train.pos
inv4 B:     │                       └──  always one Train.pos
inv4 O:     │                           └──  always all disj t1,t2:Train |  t1.pos!=t2.pos
inv4 O:     │                               └──  all disj t1,t2:Train | always t1.pos!=t2.pos
inv4 O:     │                                   └──  all  t1,t2:Train | always t1.pos!=t2.pos
inv4 O:     │                                       └──  always all t1,t2:Train | t1.pos!=t2.pos
inv1 E:     ├──   
inv3 U:     │   └──  all t:Train,tr:Track| tr in t.pos implies always tr in t.pos
inv1 O:     ├──  before no (Signal & Green)
inv1 O:     │   └──  before no Green
inv1 C:     │       └──  historically no Green
inv2 O:     │           └──  eventually Signal = Green
inv2 O:     │               └──  eventually all s:Signal | s in Green
inv2 C:     │                   └──  all s:Signal | eventually s in Green
inv3 S:     │                       └──  always (all t:Trains, k:Tracks | some t.pos :> k implies after t.pos :> k)
inv3 T:     │                           └──  always (all t:Train, k:Track | some t.pos :> k implies after t.pos :> k)
inv3 T:     │                               └──  always (all t:Train, k:Track | some t.pos :> k implies after t.pos :> k)
inv3 T:     │                                   └──  always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
fwiCJZYnZBAyd8akM M:     │                                       └──  user added theme options. same as previous submission
inv2 C:     │                                           ├──  all s:Signal | eventually s in Green
inv3 U:     │                                           │   └──  always (all t:Train, k:Track | t.pos = k implies after t.pos = k)
inv4 S:     │                                           │       └──  always (t1,t2:Train | no t1.pos = t2.pos)
inv4 S:     │                                           │           └──  always (t1,t2:Train | t1.pos != t2.pos)
inv4 S:     │                                           │               └──  always (t1,t2:Train | t1.pos not t2.pos)
inv4 S:     │                                           │                   └──  always (t1,t2:Train | t1->pos not t2->pos)
inv4 E:     │                                           │                       └──   
inv2 C:     │                                           │                           └──  all s:Signal | eventually s in Green
inv1 C:     │                                           │                               └──  historically no Green
inv4 S:     │                                           │                                   └──  always (all t1,t2:Train | t1.pos not t2.pos)
inv1 C:     │                                           │                                       └──  historically no Green
inv4 O:     │                                           │                                           └──  always (all t1,t2:Train | t1.pos != t2.pos)
inv4 O:     │                                           │                                               └──  always (all disj t1,t2:Train | t1.pos != t2.pos)
inv4 T:     │                                           │                                                   └──  always (all disj t1,t2:Train | some (t1.pos and t2.pos) implies t1.pos != t2.pos)
inv4 T:     │                                           │                                                       └──  always (all disj t1,t2:Train | some (t1.pos and t2.pos) implies t1.pos != t2.pos)
inv4 T:     │                                           │                                                           └──  always (all disj t1,t2:Train | some (t1.pos :> Track and t2.pos :> Track) implies t1.pos != t2.pos)
inv3 T:     │                                           └──  always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
inv3 T:     │                                               └──  always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
inv1 C:     │                                                   └──  historically no Green
inv2 C:     │                                                       └──  all s:Signal | eventually s in Green
inv3 S:     │                                                           └──  always( all t:Train, some tk:Track | t->tk in pos implies after t->tk in pos)
inv3 B:     │                                                               └──  always( all t:Train | some tk:Track | t->tk in pos implies after t->tk in pos)
inv3 U:     │                                                                   └──  always( all t:Train | some t.pos implies after t.pos' = t.pos)
inv3 U:     │                                                                       └──  always( all t:Train | some t.pos implies t.pos' = t.pos)
inv3 C:     │                                                                           └──  always( all t:Train | t.pos' = t.pos)
inv4 U:     │                                                                               └──  all tk : Track | lone pos.tk
inv4 U:     │                                                                                   └──  all tk : Track | lone pos.tk :> Train
inv4 U:     │                                                                                       └──  all tk : Track | lone Train <: pos.tk
inv4 U:     │                                                                                           └──  all tk : Track | lone pos.tk
inv4 C:     │                                                                                               └──  always( all tk : Track | lone pos.tk )
inv5 S:     │                                                                                                   └──  all t:Train { t.pos in Exit => Train' = Train - t t.pos not in Exit => t.pos' = one (t.pos).prox
inv5 S:     │                                                                                                       └──  all t:Train { t.pos in Exit => Train' = Train - t t.pos not in Exit => t.pos' = one (t.pos).prox
inv5 S:     │                                                                                                           └──  all t:Train { t.pos in Exit => no t.pos' t.pos not in Exit => t.pos' = one (t.pos).prox
inv5 S:     │                                                                                                               └──  all t:Train { t.pos in Exit => no t.pos' t.pos not in Exit => t.pos' = some ((t.pos).prox)
inv5 B:     │                                                                                                                   └──  all t:Train { t.pos in Exit => no t.pos' t.pos not in Exit => some tk : ((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                       └──  all t:Train { t.pos in Exit => no t.pos' t.pos not in Exit => { one tk:((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                           └──  all t:Train { t.pos in Exit => no t.pos' t.pos in (Track - Exit) => { one tk:((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                               └──  all t:Train { t.pos in Exit => t.pos' = t.pos - t.pos t.pos in (Track - Exit) => { one tk:((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                                   └──  all t:Train { some t.pos =>{ t.pos in Exit => t.pos' = t.pos - t.pos t.pos in (Track - Exit) => { one tk:((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                                       └──  all t:Train { t.pos in Exit => Train' = Train - t t.pos in (Track - Exit) => { one tk:((t.pos).prox) | t.pos' = tk
inv5 B:     │                                                                                                                                           └──  all t:Train { some (t.pos & Exit) => t.pos' = (t.pos) - (t.pos)
inv5 S:     │                                                                                                                                               └──  all t:Train { some tk | t.pos { (tk in Exit) => t.pos' = t.pos - tk (tk not in Exit) => some tk2: tk.prox | t.pos' = tk2
inv5 S:     │                                                                                                                                                   └──  all t:Train { some tk | t.pos { (tk in Exit) => t.pos' = t.pos - tk (tk not in Exit) => some tk2: tk.prox | t.pos' = tk2
inv5 B:     │                                                                                                                                                       └──  all t:Train { some tk:t.pos { (tk in Exit) => t.pos' = t.pos - tk (tk not in Exit) => some tk2: tk.prox | t.pos' = tk2
inv5 O:     │                                                                                                                                                           └──  always( all t:Train { some tk:t.pos { (tk in Exit) => t.pos' = t.pos - tk (tk not in Exit) => some tk2: tk.prox | t.pos' = tk2
inv5 S:     │                                                                                                                                                               └──  always( all t:Train { some (t.pos & Exit) => t.pos' = t.pos - tk some (t.pos && (Track-Exit)) => some tk2: tk.prox | t.pos' = tk2
inv5 T:     │                                                                                                                                                                   └──  always( all t:Train { some (t.pos & Exit) => no t.pos' some (t.pos && (Track-Exit)) => some tk2: t.pos | t.pos' = tk2
inv5 O:     │                                                                                                                                                                       └──  always( all t:Train { some (t.pos & Exit) => no t.pos' some (t.pos & (Track-Exit)) => some tk2: t.pos | t.pos' = tk2
inv5 O:     │                                                                                                                                                                           └──  always( all t:Train { some (t.pos & Exit) => no t.pos' some (t.pos & (Track-Exit)) => some tk2: (t.pos).prox { t.pos' = tk2
inv5 O:     │                                                                                                                                                                               └──  always( all t:Train { some (t.pos & Exit) => no t.pos' some (t.pos & (Track-Exit)) => some tk2: (t.pos).prox | t.pos' = tk2
inv5 B:     │                                                                                                                                                                                   └──  always( all t:Train { t.pos in Exit => no t.pos' t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2
inv5 B:     │                                                                                                                                                                                       └──  always( all t:Train { t.pos in Exit => no t.pos' t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2 no t.pos => t.pos' = t.pos
inv5 E:     │                                                                                                                                                                                           └──   
inv6 O:     │                                                                                                                                                                                               └──  always ( all s : Signal | (s in Green implies s' not in Green) and (s not in Green implies s' in Green) )
inv6 U:     │                                                                                                                                                                                                   └──  always ( all s : Signal | (s in Green implies s' not in Green) or (s not in Green implies s' in Green) )
inv6 S:     │                                                                                                                                                                                                       └──  always ( all s : Signal { s in Green => s' not in Green
inv6 O:     │                                                                                                                                                                                                           └──  always ( all s : Signal { s in Green => s' not in Green s not in Green => s' in Green
inv6 O:     │                                                                                                                                                                                                               └──  always ( all s : Signal { s in Green => Green' = Green - s s not in Green => Green' = Green + s
inv6 C:     │                                                                                                                                                                                                                   └──  always ( all s : Signal | (s in Green implies eventually s not in Green) and (s not in Green implies eventually s in Green) )
inv5 B:     │                                                                                                                                                                                                                       ├──  all t:Train{ always( t.pos in Exit implies eventually no t.pos) always( t.pos in Entry implies eventually t.pos in t.pos.prox)
inv7 B:     │                                                                                                                                                                                                                       │   └──  all t:Train | t.pos in (Entry + Exit) implies eventually t.pos not in (Entry + Exit)
inv7 U:     │                                                                                                                                                                                                                       │       └──  all t:Train | some t.pos :> (Entry+Exit) implies eventually no t.pos :> (Entry+Exit)
inv7 U:     │                                                                                                                                                                                                                       │           └──  always ( all t:Train | some t.pos :> (Entry+Exit) implies eventually no t.pos :> (Entry+Exit) )
inv7 C:     │                                                                                                                                                                                                                       │               └──  always ( all t:Train | some t.pos :> Track implies eventually no t.pos :> Track )
inv5 B:     │                                                                                                                                                                                                                       │                   └──  always( all t:Train{ no t.pos :> Exit => eventually(t.pos in t.pos.prox) some t.pos :> Exit => eventually(no t.pos)
inv5 B:     │                                                                                                                                                                                                                       │                       └──  always( all t:Train | some t.pos :> Exit implies eventually (no t.pos) ) always( all t:Train | some t.pos :> (Track-Exit) implies eventually (t.pos in t.pos.prox) )
inv8 O:     │                                                                                                                                                                                                                       │                           └──  always ( all t:Train | no t.pos.signal :> Green implies t.pos' = t.pos )
inv8 B:     │                                                                                                                                                                                                                       │                               └──  always ( all t:Train | some s:Signal | (some (t.prox).signal :> s) and (s not in Green) implies t.pos' = t.pos)
inv8 U:     │                                                                                                                                                                                                                       │                                   └──  always ( all t:Train, s:Signal | some (t.prox).signal :> s implies (s in Green) releases (t.pos' = t.pos) )
inv8 O:     │                                                                                                                                                                                                                       │                                       └──  always ( all t:Train, s:Signal | some (t.pos).signal :> s implies (s in Green) releases (t.pos' = t.pos) )
inv8 B:     │                                                                                                                                                                                                                       │                                           └──  always ( all t:Train | some t.pos.prox.signal implies (t.pos.prox.signal in Green) releases (t.pos' = t.pos) )
inv8 U:     │                                                                                                                                                                                                                       │                                               └──  always ( all tk:Track | some tk.signal implies (tk.signal in Green) releases ( #(pos.tk') = #(pos.tk) ) )
inv8 U:     │                                                                                                                                                                                                                       │                                                   └──  always ( all tk:Track | some tk.signal implies (tk.signal in Green) releases ( #pos.tk' = #pos.tk ) )
inv8 U:     │                                                                                                                                                                                                                       │                                                       └──  always ( all tk:Track | some tk.signal and (tk.signal in Green) implies ( #pos.tk' = #pos.tk ) )
inv8 U:     │                                                                                                                                                                                                                       │                                                           └──  always ( all tk:Track | some tk.signal and (tk.signal in Green) implies ( #(pos.tk') = #(pos.tk) ) )
inv8 B:     │                                                                                                                                                                                                                       │                                                               └──  all t:Train | some t.pos.signal and t.pos.signal in Green implies t.pos' = t.pos
inv8 B:     │                                                                                                                                                                                                                       │                                                                   └──  always ( all t:Train | some t.pos.signal and t.pos.signal in Green implies t.pos' = t.pos )
inv8 C:     │                                                                                                                                                                                                                       │                                                                       └──  always ( all t:Train | some t.pos.signal and (t.pos.signal not in Green) implies t.pos' = t.pos )
inv9 B:     │                                                                                                                                                                                                                       │                                                                           └──  always ( all t:Train | no t.pos until t.pos in Entry )
inv9 T:     │                                                                                                                                                                                                                       │                                                                               └──  always ( all t:Train | (no t.pos) until (t.pos :> Entry) )
inv9 O:     │                                                                                                                                                                                                                       │                                                                                   └──  always ( all t:Train | (no t.pos) until (some t.pos :> Entry) )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                       └──  always ( all t:Train | historically no t.pos and eventually t.pos in Entry )
inv9 U:     │                                                                                                                                                                                                                       │                                                                                           └──  always ( all t:Train | historically no t.pos implies eventually t.pos in Entry )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                               └──  always ( all t:Train | (no t.pos) triggered (eventually t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                   └──  always ( all t:Train | (no t.pos) triggered (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                       └──  always ( all t:Train | (no t.pos) triggered (t.pos' in Entry) )
inv9 S:     │                                                                                                                                                                                                                       │                                                                                                           └──  always ( all t:Train | no t.pos implies eventually (t.pos in Entry)
inv9 U:     │                                                                                                                                                                                                                       │                                                                                                               └──  always ( all t:Train | no t.pos implies eventually (t.pos in Entry) )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                   └──  always ( all t:Train | eventually (no t.pos until t.pos in Entry))
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                       └──  always ( all t:Train | some tk:Entry | eventually (no t.pos until t.pos in tk))
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                           └──  always ( all t:Train | eventually (no t.pos until t.pos in Entry))
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                               └──  always ( all t:Train | some Entry implies eventually (no t.pos until t.pos in Entry))
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                                   └──  always ( all t:Train | eventually t.pos in Entry )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                                       └──  always ( all t:Train | some Track implies eventually t.pos in Entry )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                                           └──  always ( all t:Train | some Track implies eventually (some t.pos :> Entry) )
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                                               └──  all t:Train | eventually (t.pos in Entry and before no t.pos)
inv9 B:     │                                                                                                                                                                                                                       │                                                                                                                                                   └──  all t:Train | some tk:Entry | eventually (t->tk in pos and before no t.pos)
inv9 T:     │                                                                                                                                                                                                                       │                                                                                                                                                       └──  all t:Train | some tk:Entry | (no t->tk in pos) implies eventually (t->tk in pos and before no t.pos)
inv9 U:     │                                                                                                                                                                                                                       │                                                                                                                                                           └──  all t:Train | some tk:Entry | t->tk not in pos implies eventually (t->tk in pos and before no t.pos)
inv9 U:     │                                                                                                                                                                                                                       │                                                                                                                                                               └──  all t:Train | some tk:Entry | (t.pos not in Entry) implies eventually (t->tk in pos and before no t.pos)
inv9 U:     │                                                                                                                                                                                                                       │                                                                                                                                                                   └──  all t:Train | some tk:Entry | (t->tk not in pos) implies eventually (t->tk in pos)
inv9 U:     │                                                                                                                                                                                                                       │                                                                                                                                                                       └──  all t:Train | some tk:Entry | (t.pos not in Entry) implies eventually (t->tk in pos and before no t.pos)
inv10 U:    │                                                                                                                                                                                                                       │                                                                                                                                                                           └──  all j:Junction | lone ( (prox.j).signal & Green )
inv10 C:    │                                                                                                                                                                                                                       │                                                                                                                                                                               └──  always ( all j:Junction | lone ( (prox.j).signal & Green ) )
inv11 O:    │                                                                                                                                                                                                                       │                                                                                                                                                                                   └──  always (all t:Train | t.pos in Track implies historically t.pos in Entry)
inv11 O:    │                                                                                                                                                                                                                       │                                                                                                                                                                                       └──  always ( all t:Train | some t.pos :> Track implies historically ( t.pos in Entry) )
inv11 O:    │                                                                                                                                                                                                                       │                                                                                                                                                                                           └──  always ( all t:Train | some t.pos :> (Track-Entry) implies historically ( t.pos in Entry) )
inv11 O:    │                                                                                                                                                                                                                       │                                                                                                                                                                                               └──  always ( all t:Train | some t.pos implies historically some t.pos :> Entry)
inv11 T:    │                                                                                                                                                                                                                       │                                                                                                                                                                                                   └──  always ( all t:Train | some t.pos implies once t.pos :> Entry)
inv11 C:    │                                                                                                                                                                                                                       │                                                                                                                                                                                                       └──  always ( all t:Train | some t.pos implies once some t.pos :> Entry)
inv11 O:    │                                                                                                                                                                                                                       │                                                                                                                                                                                                           └──  always ( all t:Train| some t.pos and historically t.pos in Entry)
inv11 C:    │                                                                                                                                                                                                                       │                                                                                                                                                                                                               └──  always ( all t:Train | some t.pos implies once some t.pos :> Entry)
inv11 U:    │                                                                                                                                                                                                                       │                                                                                                                                                                                                                   └──  always ( all t:Train| some t.pos implies once t.pos in Entry)
wcbm9Ffb7piK9G2Su M:     │                                                                                                                                                                                                                       │                                                                                                                                                                                                                       └──  user added theme options. same as previous submission
B2WtWTdCj2zFatbpb M:     │                                                                                                                                                                                                                       └──  user added theme options. same as previous submission
inv1 C:     ├──  (some s:Signal | s in Green) since (historically (all s:Signal | s not in Green))
inv1 C:     ├──  no Green
inv2 O:     │   └──  eventually Green = Signal
inv2 O:     │       └──  always(eventually Green = Signal)
inv2 O:     │           └──  eventually Green = Signal
inv2 O:     │               └──  eventually(historically Green = Signal)
inv2 C:     │                   └──  all s: Signal | eventually s in Green
inv3 S:     │                       └──  always all t: Train | after t.pois = t.pos
inv3 U:     │                           └──  always all t: Train | after t.pos = t.pos
inv3 T:     │                               └──  always pos
inv3 T:     │                                   └──  always all t: Train, tk: Track | t.pos.tk in pos implies after t.pos.tk in pos
inv3 U:     │                                       └──  always all t: Train, tk: Track | t->tk in pos implies after t->tk in pos
inv3 U:     │                                           └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                               └──  all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                   └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                       └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos or t->tk not in pos implies always t->tk not in pos
inv3 U:     │                                                           └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                               └──  always all t: Train, tk: Track | one t.pos and t->tk in pos implies always t->tk in pos
inv3 U:     │                                                                   └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                                       └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                                           └──  always all t: Train, tk: Track | t->tk in pos and t->tk not in pos implies always t->tk in pos
inv3 O:     │                                                                               └──  always all t: Train, tk: Track | t->tk in pos or t->tk not in pos implies always t->tk in pos
inv3 U:     │                                                                                   └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 U:     │                                                                                       └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos or t->tk not in pos implies always t->tk not in pos
inv3 U:     │                                                                                           └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 U:     │                                                                                               └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                                                                   └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U:     │                                                                                                       └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 C:     │                                                                                                           └──  always all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 U:     │                                                                                                               └──  always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 C:     │                                                                                                                   └──  always all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 U:     │                                                                                                                       └──  always(Train->Track in pos implies always Train->Track in pos)
inv3 U:     │                                                                                                                           └──  always (Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos)
inv3 U:     │                                                                                                                               └──  always ((Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos))
inv3 U:     │                                                                                                                                   └──  Train->Track in pos implies always Train->Track in pos and Train->Track not in pos implies always Train->Track not in pos
inv3 U:     │                                                                                                                                       └──  (Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos)
inv3 C:     │                                                                                                                                           └──  all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 C:     │                                                                                                                                               └──  all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 S:     │                                                                                                                                                   └──  all (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv3 S:     │                                                                                                                                                       └──  all (Train->Track in pos implies always Train->Track in pos) and (no (Train->Track) & pos implies always no (Train->Track) & pos)
inv3 S:     │                                                                                                                                                           └──  all (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv3 U:     │                                                                                                                                                               └──  (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv4 T:     │                                                                                                                                                                   └──  all t: Train | always t.prox.~t.prox in iden
inv4 T:     │                                                                                                                                                                       └──  all t: Train | always (t.prox.~t.prox) in iden
inv4 B:     │                                                                                                                                                                           └──  all t: Train | always prox.~prox in iden
inv4 B:     │                                                                                                                                                                               └──  always prox.~prox in iden
inv4 B:     │                                                                                                                                                                                   └──  always ~prox.prox in iden
inv4 B:     │                                                                                                                                                                                       └──  always prox.~prox in iden
inv3 C:     │                                                                                                                                                                                           └──  all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv4 B:     │                                                                                                                                                                                               └──  always prox.~prox in iden
inv3 U:     │                                                                                                                                                                                                   └──  always prox' = prox
inv3 U:     │                                                                                                                                                                                                       └──  always prox = prox'
inv3 U:     │                                                                                                                                                                                                           └──  always prox' = prox
inv3 C:     │                                                                                                                                                                                                               └──  always pos' = pos
inv4 C:     │                                                                                                                                                                                                                   └──  always pos.~pos in iden
inv5 U:     │                                                                                                                                                                                                                       └──  all t: Train | after t.pos in t.pos + t.pos.prox
inv5 B:     │                                                                                                                                                                                                                           └──  always all t: Train | t.pos' in t.pos + t.pos.prox
inv5 B:     │                                                                                                                                                                                                                               └──  always all t: Train | t not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 U:     │                                                                                                                                                                                                                                   └──  always all t: Train | t.prox not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 U:     │                                                                                                                                                                                                                                       └──  always all t: Train | t.pos not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 B:     │                                                                                                                                                                                                                                           └──  always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox
inv5 B:     │                                                                                                                                                                                                                                               └──  always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox
inv4 C:     │                                                                                                                                                                                                                                                   └──  always pos.~pos in iden
inv1 S:     ├──  all Signal.Red
inv1 C:     │   └──  no Green
inv1 S:     ├──  Red in Signal
inv1 C:     │   └──  no Green
inv2 O:     │       └──  eventually Signal in Green
inv2 C:     │           └──  all s : Signal | eventually s in Green
inv2 U:     │               └──  eventually Green in Signal
inv2 O:     │                   └──  eventually Signal in Green
inv2 C:     │                       └──  all s : Signal | eventually s in Green
inv3 O:     │                           └──  always no Train.pos
inv3 B:     │                               └──  no Train.pos
inv3 O:     │                                   └──  always no Train.pos
inv3 O:     │                                       └──  all t : Train | always no t.pos
inv3 S:     │                                           └──  always Entry in Trains.pos
inv3 B:     │                                               └──  always Entry in Train.pos
inv3 B:     │                                                   └──  always Entry = Train.pos
inv3 O:     │                                                       └──  always no Train.pos
inv3 B:     │                                                           └──  always Entry + Exit in Train.pos
inv3 B:     │                                                               └──  always Entry & Exit in Train.pos
inv3 B:     │                                                                   └──  always Entry + Exit in Train.pos
inv3 B:     │                                                                       └──  always Exit in Train.pos
inv4 U:     │                                                                           └──  always ~pos.pos in iden
inv4 C:     │                                                                               └──  always pos.~pos in iden
inv5 B:     │                                                                                   └──  always all t : Train, p : t.pos | t.pos' in p.prox
inv5 B:     │                                                                                       └──  always all t : Train, p : t.pos | (t.pos)' in p.prox
inv5 B:     │                                                                                           └──  always all t : Train, p : t.pos | (t.pos)' in p.prox
inv5 B:     │                                                                                               └──  always all t : Train, p : t.pos | (t.pos)' in p.prox || Exit in p.prox
inv5 B:     │                                                                                                   └──  always all t : Train, p : t.pos | (t.pos)' in p.prox || Exit = p.prox
inv6 O:     │                                                                                                       └──  always (Green = Signal and no Green' or no Green and Green' = Signal')
inv6 O:     │                                                                                                           └──  always (Green = Signal and no Green' or no Green and Green' = Signal)
inv6 O:     │                                                                                                               └──  always (Signal in Green and no Green' or no Green and Green' = Signal')
inv6 O:     │                                                                                                                   └──  always (Signal in Green and no Green' or no Green and Green' = Signal')
inv7 U:     │                                                                                                                       └──  all t : Train | eventually t.pos in Exit
inv7 U:     │                                                                                                                           └──  all t : Train | eventually t.pos in Entry
inv7 B:     │                                                                                                                               └──  all t : Train | always (eventually t.pos not in Entry)
inv7 B:     │                                                                                                                                   └──  all t : Train | always (eventually t.pos not in Entry + Exit)
inv1 E:     ├──   
inv1 C:     │   └──  no Green
inv2 C:     │       └──  all t : Track | eventually t.signal in Green
inv3 S:     │           └──  all t : Train | allways pos' = pos
inv3 C:     │               └──  all t : Train | always t.pos' = t.pos
inv4 O:     │                   └──  all t1, t2 : Train | always t1.pos != t2.pos
inv4 O:     │                       └──  all t1, t2 : Train | always t1.pos' != t2.pos'
inv4 O:     │                           └──  all t1, t2 : Train | always t1.pos != t2.pos
inv4 B:     │                               └──  all t1, t2 : Train | always t1.pos' != t2.pos
inv6 U:     ├──  always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or always s not in Green implies  eventually (s in  Green) )
inv5 E:     │   └──   
inv4 C:     │       └──  always all disj t1,t2:Train | no (t1.pos & t2.pos )
inv7 B:     │           └──  all t:Train | some (t.pos & Entry ) implies eventually some (t.pos & Exit)
inv7 B:     │               └──  always (all t:Train | some (t.pos & Entry ) implies eventually some (t.pos & Exit) )
inv7 U:     │                   └──  always (all t:Train | always some (t.pos & Entry ) implies eventually some (t.pos & Exit) )
inv7 B:     │                       └──  always (all t:Train | some (t.pos & Entry ) implies  always (eventually some (t.pos & Exit) ))
inv7 B:     │                           └──  (all t:Train | some (t.pos & Entry ) implies   eventually some (t.pos & Exit) )
inv7 B:     │                               └──  always (all t:Train | some (t.pos & Entry ) implies   eventually some (t.pos & Exit) )
inv3 T:     ├──  always Train.pos = iden
inv3 T:     │   └──  all t : Train | always t.pos
inv3 U:     │       └──  always Train.pos' = Train.pos
inv3 U:     │           └──  Train.pos' = Train.pos
inv3 S:     │               └──  all t : train | always t.pos' = t.pos
inv3 C:     │                   └──  all t : Train | always t.pos' = t.pos
inv3 U:     │                       └──  all t : Train |  t.pos' = t.pos
inv1 C:     ├──  no Green
inv2 C:     │   └──  all s: Signal | eventually s in Green
inv1 C:     ├──  no Green
inv2 B:     │   └──  eventually some Green
inv2 B:     │       └──  always eventually some Green
inv2 C:     │           └──  all s : Signal | eventually s in Green
inv2 C:     │               └──  all s : Signal | eventually s in Green
inv2 O:     │                   └──  eventually historically Green = Signal
inv2 O:     │                       └──  eventually historically Signal in Green
inv2 O:     │                           └──  historically eventually Signal in Green
inv2 C:     │                               └──  all s : Signal | eventually s in Green
inv3 T:     │                                   └──  all t : Track | always t.pos
inv3 U:     │                                       └──  all t : Track | always lone t.pos
inv3 U:     │                                           └──  always all t : Track | always lone t.pos
inv3 U:     │                                               └──  always all t : Track | lone t.pos
inv3 S:     │                                                   └──  always t : Track | lone pos.t
inv3 B:     │                                                       └──  always all t : Track | lone pos.t
inv3 B:     │                                                           └──  always pos.~pos in iden
inv3 U:     │                                                               └──  always ~pos.pos in iden
inv3 U:     │                                                                   └──  always after ~pos.pos in iden
inv3 U:     │                                                                       └──  always ~pos.pos in iden
inv3 U:     │                                                                           └──  always ~pos.pos in iden
inv3 S:     │                                                                               └──  always ~pos.pos in iden and always all t : Train | lone t.pos
inv3 U:     │                                                                                   └──  always ~pos.pos in iden and (always all t : Train | lone t.pos)
inv3 U:     │                                                                                       └──  always ~pos.pos in iden and (always all t : Train | always lone t.pos)
inv3 T:     │                                                                                           └──  always pos
inv3 S:     │                                                                                               └──  always pos = after pos
inv3 S:     │                                                                                                   └──  always pos in after pos
inv3 S:     │                                                                                                       └──  always (pos = after pos)
inv3 S:     │                                                                                                           └──  always all t : Train | (t.pos = after t.pos)
inv3 S:     │                                                                                                               └──  always all t : Train | (t.pos = after t.pos)
inv3 S:     │                                                                                                                   └──  always all t : Train | (t.pos in after t.pos)
inv3 S:     │                                                                                                                       └──  always all t : Train | t.pos in after t.pos
inv2 C:     │                                                                                                                           └──  all s : Signal | eventually s in Green
inv3 U:     │                                                                                                                               └──  always all t : Train | lone t.pos
inv3 S:     │                                                                                                                                   └──  False releases always pos
inv3 S:     │                                                                                                                                       └──  false releases always pos
inv3 S:     │                                                                                                                                           └──  no releases always pos
inv3 S:     │                                                                                                                                               └──  no releases pos
inv3 S:     │                                                                                                                                                   └──  always pos = after pos
inv3 U:     │                                                                                                                                                       └──  always (Train->Track - pos) + pos = (Train->Track - pos) + pos
inv3 U:     │                                                                                                                                                           └──  always ((Train->Track - pos) + pos) = ((Train->Track - pos) + pos)
inv3 U:     │                                                                                                                                                               └──  always pos = pos
inv3 S:     │                                                                                                                                                                   └──  always pos = pos and no pos in no pos
inv3 T:     │                                                                                                                                                                       └──  always pos = pos and (Train->Track not in pos) = (Train->Track not in pos)
inv3 U:     │                                                                                                                                                                           └──  always pos = pos and (Train.pos not in Track implies always Train.pos not in Track)
inv3 U:     │                                                                                                                                                                               └──  always pos = pos and (all t : Train | t.pos not in Track implies always t.pos not in Track)
inv3 U:     │                                                                                                                                                                                   └──  always pos = pos and (all t : (Train - pos.Track) | t.pos not in Track implies always t.pos not in Track)
inv3 U:     │                                                                                                                                                                                       └──  always pos = pos and (always all t : (Train - pos.Track) | t.pos not in Track implies always t.pos not in Track)
inv3 C:     │                                                                                                                                                                                           └──  always pos' = pos
inv3 U:     │                                                                                                                                                                                               └──  always ^pos = pos
inv3 C:     │                                                                                                                                                                                                   └──  always pos' = pos
inv4 B:     │                                                                                                                                                                                                       └──  always prox.~prox in iden
inv4 B:     │                                                                                                                                                                                                           └──  always ~prox.prox in iden
inv4 C:     │                                                                                                                                                                                                               └──  always pos.~pos in iden
inv5 U:     │                                                                                                                                                                                                                   └──  always all t : Train | (t.pos).prox = Exit releases t.pos.prox in Track
inv5 B:     │                                                                                                                                                                                                                       └──  always all t : Train | some t1 : Track | t.pos = t1 implies after t.pos in (t1.prox + t1)
inv3 B:     ├──  all t : Train | always t.pos in Entry
inv3 B:     │   └──  all t : Train | always t.pos in Entry or t.pos in Exit
inv3 O:     │       └──  all t : Train | always no t.pos
inv3 B:     │           └──  all t : Train | always t.pos in Entry
inv3 B:     │               └──  all t : Train | always t.pos in Entry or always t.pos in Exit
inv5 B:     │                   └──  always all t : Train, p : t.pos | (t.pos)' in p.prox || Exit = p.prox
inv3 B:     │                       └──  always no Green
inv3 B:     │                           └──  all t : Train | always no Green & t.pos.signal
inv3 C:     │                               └──  all t : Train | always t.pos = t.pos'
inv3 C:     │                                   └──  always pos = pos'
inv3 U:     │                                       └──  always pos in pos'
inv3 C:     │                                           └──  always pos = pos'
inv5 O:     │                                               └──  always pos in pos'
inv5 B:     │                                                   └──  always all t : Train | t.pos' in t.pos.prox
inv5 B:     │                                                       └──  always all t : Train | t.pos' in t.pos.prox || t.pos' = Exit
inv5 B:     │                                                           └──  always all t : Train | t.pos' in t.pos.prox || t.pos' in Exit
inv5 B:     │                                                               └──  always all t : Train | t.pos' in t.pos.prox
inv5 E:     │                                                                   └──   
inv6 S:     │                                                                       └──  always (Signal in Green => Signal not in Green' || no Signal & Green => Signal in Green'
inv6 U:     │                                                                           └──  always (Signal in Green => Signal not in Green' || no Signal & Green => Signal in Green')
inv6 U:     │                                                                               └──  always (Signal in Green => no Signal & Green' || no Signal & Green => Signal in Green')
inv6 U:     │                                                                                   └──  always all s : Signal | s in Green => no s & Green' or no s & Green => s in Green'
inv7 B:     │                                                                                       └──  always all t : Train | t.pos in Entry => eventually t.pos not in Entry
inv7 B:     │                                                                                           └──  always all t : Train | eventually t.pos != t.pos'
inv5 B:     │                                                                                               └──  always all t : Train | t.pos' in t.pos.next
inv5 B:     │                                                                                                   └──  always all t : Train | t.pos' in t.pos.next
inv5 B:     │                                                                                                       └──  always all t : Train | t.pos' in t.pos.prox
inv5 B:     │                                                                                                           └──  always all t : Train | t.pos' in t.pos.prox or t.pos in Exit => t.pos' in Exit
inv5 B:     │                                                                                                               └──  always all t : Train | t.pos' in t.pos.prox or t.pos' in Exit
inv5 T:     │                                                                                                                   └──  always all t : Train | t.pos' in t.pos.prox or Exit t.pos.next in t.pos' in Exit
inv5 U:     │                                                                                                                       └──  always all t : Train | t.pos' in t.pos.prox or Exit in t.pos.next => t.pos' in Exit
inv5 U:     │                                                                                                                           └──  always all t : Train | t.pos' in t.pos.prox or some Exit & t.pos.next => t.pos' in Exit
inv6 U:     │                                                                                                                               └──  always all s : Track.signal | s in Green => s not in Green' or s not in Green' => s in Green
inv5 B:     │                                                                                                                                   └──  always all t : Train | t.pos' in t.pos.prox or t.pos in Exit
inv6 S:     │                                                                                                                                       └──  always all s : Signal ignal | s in Green => s not in Green' or s not in Green' => s in Green
inv5 B:     │                                                                                                                                           └──  always all t : Train | t.pos' in t.pos.prox or t.pos in Exit
inv6 U:     │                                                                                                                                               └──  always all s : Signal | s in Green => s not in Green' or s not in Green => s in Green'
inv6 B:     │                                                                                                                                                   └──  always Signal & Green not in Signal & Green'
inv6 B:     │                                                                                                                                                       └──  always Signal & Green not in Signal & Green' or Signal - Green in Signal' & Green'
inv6 B:     │                                                                                                                                                           └──  always Signal & Green not in Signal' & Green' or Signal - Green in Signal' & Green'
inv6 B:     │                                                                                                                                                               └──  always Signal in Green and after no Green' or no Green and Signal in Green'
inv11 C:    ├──  always ( all t:Train | some t.pos implies once some t.pos :> Entry)
inv13 O:    │   └──  always ( all t:Train | no t.pos implies always (no t.pos))
inv13 B:    │       └──  ( all t:Train | no t.pos implies always (no t.pos))
inv13 O:    │           └──  always ( all t:Train | no t.pos implies always (no t.pos))
inv13 B:    │               └──  always ( all t:Train | eventually always no t.pos implies  always(no t.pos))
inv13 B:    │                   └──  ( all t:Train | eventually always no t.pos implies  always(no t.pos))
inv13 B:    │                       └──  ( all t:Train | no t.pos since  no t.pos)
inv13 O:    │                           └──  always ( all t:Train | no t.pos since  no t.pos)
inv15 S:    │                               └──  eventually always t.pos !=t.pos'
inv5 E:     │                                   └──   
inv5 E:     │                                       └──   
inv15 O:    │                                           └──  eventually always (all t: Train| t.pos != t.pos')
inv15 B:    │                                               └──  eventually always (some t: Train| t.pos != t.pos')
inv15 B:    │                                                   └──  eventually always (some t: Train| (no t.pos  implies some t.pos) or t.pos != t.pos')
inv15 B:    │                                                       └──  always (some t: Train| (no t.pos  implies some t.pos) or t.pos != t.pos')
inv15 B:    │                                                           └──  eventually always (some t: Train| (no t.pos  implies some t.pos) or t.pos != t.pos')
inv15 B:    │                                                               └──  eventually always (some t: Train| (no t.pos  implies eventually some t.pos) or t.pos != t.pos')
inv15 B:    │                                                                   └──  always (some t: Train| (no t.pos  implies eventually some t.pos) or t.pos != t.pos')
inv15 B:    │                                                                       └──  always (some t: Train| (no t.pos  implies eventually some t.pos) or eventually t.pos != t.pos')
inv15 B:    │                                                                           └──  eventually always (pos != pos')
inv15 B:    │                                                                               └──  eventually always some pos =>(pos != pos')
inv15 B:    │                                                                                   └──  eventually always (some pos =>(pos != pos'))
inv15 U:    │                                                                                       └──  always eventually (some pos =>(pos != pos'))
inv15 B:    │                                                                                           └──  always eventually (pos != pos')
inv15 B:    │                                                                                               └──  always eventually some Train and (pos != pos')
inv15 B:    │                                                                                                   └──  always eventually some pos and (pos != pos')
inv15 B:    │                                                                                                       └──  always eventually (some pos and (pos != pos'))
inv14 S:    │                                                                                                           └──  always ( all t:Train | some t.pos and some (t.pos.signal :>Green) implies (t.pos'.signal in  Siganl-Green)
inv14 S:    │                                                                                                               └──  always ( all t:Train | (some t.pos and some (t.pos.signal :>Green) )implies (t.pos'.signal in  Siganl-Green) )
inv14 B:    │                                                                                                                   └──  always ( all t:Train | (some t.pos and some (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 S:    │                                                                                                                       └──  always ( all t:Train | (some t.pos and one t.pos.signal some (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 B:    │                                                                                                                           └──  always ( all t:Train | (some t.pos and one t.pos.signal and some (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 B:    │                                                                                                                               └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                   └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies (t.pos.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                       └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) and t.pos != t.pos' )implies (t.pos.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                           └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green)  )implies (t.pos != t.pos' and t.pos.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                               └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) and t.pos != t.pos' )implies (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                   └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) and no t.pos' )implies (t.pos.signal in  Signal-Green) )
inv14 U:    │                                                                                                                                                       └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) and no t.pos' )implies (t.pos'.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                           └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                               └──  always ( all t:Train | ( one (t.pos.signal :>Green) )implies (t.pos'.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                                                   └──  always ( all t:Train | ( one (t.pos.signal :>Green) )implies (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                       └──  always ( all t:Train | ( one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                           └──  always ( all t:Train | (some t.pos' and  one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                               └──  always ( all t:Train | ( one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                   └──  always ( all t:Train | ( one (t.pos.signal :>Green) )implies eventually (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                       └──  always ( all t:Train | let tr=t.pos | ( one (tr.signal :>Green) )implies after (tr.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                           └──  always ( all t:Train | let tr=t.pos |pos!=pos' and ( one (tr.signal :>Green) )implies after (tr.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                               └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                                   └──  ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                                       └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) )implies after (t.pos.signal in  Signal-Green) )
inv14 S:    │                                                                                                                                                                                                           └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) ) implies (eventually t.pos'!=t.pos and (t.pos.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                                                                                               └──  always ( all t:Train | (some t.pos and  one (t.pos.signal :>Green) ) implies (eventually t.pos'!=t.pos and (t.pos.signal in  Signal-Green) ))
inv14 T:    │                                                                                                                                                                                                                   └──  always ( all t:Train | eventually (some t.pos  and  one (t.pos.signal :>Green) and t.pos'!=pos ) implies (t.pos.signal in  Signal-Green) )
inv14 O:    │                                                                                                                                                                                                                       └──  always ( all t:Train | eventually (some t.pos  and  one (t.pos.signal :>Green) and t.pos' !=t. pos ) implies (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                                                           └──  always ( all t:Train | eventually (some t.pos  and  one (t.pos.signal :>Green) and t.pos' !=t. pos and some t.pos' ) implies (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                                                               └──  always ( all t:Train | eventually (some t.pos  and  one (t.pos.signal :>Green) and t.pos' !=t. pos and some t.pos') implies (t.pos.signal in  Signal-Green) )
inv14 B:    │                                                                                                                                                                                                                                   └──  always ( all t:Train | eventually (some t.pos  and  one (t.pos.signal :>Green) and t.pos' !=t. pos and some t.pos') implies (t.pos.signal in  Signal-Green) )
inv15 B:    │                                                                                                                                                                                                                                       └──  always eventually pos!=pos'
inv15 B:    │                                                                                                                                                                                                                                           └──  always eventually pos!=pos'
inv15 U:    │                                                                                                                                                                                                                                               └──  always eventually (some pos implies pos!=pos'  )
inv15 B:    │                                                                                                                                                                                                                                                   └──  always eventually (some Train  implies Train.pos!=Train.pos' )
inv15 C:    │                                                                                                                                                                                                                                                       └──  always eventually (all t:Train | (no t.pos => eventually some t.pos ) and some t.pos => eventually (t.pos !=t.pos')   )
inv13 C:    │                                                                                                                                                                                                                                                           └──  always (all t:Train | (once some t.pos and no t.pos ) => always no t.pos)
inv16 C:    │                                                                                                                                                                                                                                                               └──  always (all t:Train | one (t.pos:>Exit) => (some t.pos since one (t.pos:>Entry )))
inv17 T:    │                                                                                                                                                                                                                                                                   └──  always ( one (Train.pos) => before Train.pos:>Exit )
inv17 T:    │                                                                                                                                                                                                                                                                       └──  always ( one (Train.pos) =>  Train.pos:>Exit )
inv17 E:    │                                                                                                                                                                                                                                                                           └──   
inv17 T:    │                                                                                                                                                                                                                                                                               └──  ( one (Train.pos) =>  Train.pos:>Exit )
inv17 T:    │                                                                                                                                                                                                                                                                                   └──  always ( one pos =>  Train.pos:>Exit )
inv17 T:    │                                                                                                                                                                                                                                                                                       └──  ( one pos =>  Train.pos:>Exit )
inv17 B:    │                                                                                                                                                                                                                                                                                           └──  ( one pos =>  no pos)
inv17 B:    │                                                                                                                                                                                                                                                                                               └──  ( one pos => one Train.pos:>Exit )
inv17 O:    │                                                                                                                                                                                                                                                                                                   └──  always( one pos => one Train.pos:>Exit )
inv17 B:    │                                                                                                                                                                                                                                                                                                       └──  always( one Train.pos:>Exit  since one pos  )
inv17 B:    │                                                                                                                                                                                                                                                                                                           └──  ( one pos => one Train.pos:>Exit )
inv9 S:     │                                                                                                                                                                                                                                                                                                               └──  always (all t:Train| eventually (some t.pos:>Entry )
inv9 B:     │                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train| eventually (some t.pos:>Entry ))
inv9 B:     │                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train| eventually (no t.pos and one t.pos':>Entry))
inv9 B:     │                                                                                                                                                                                                                                                                                                                           └──  always (all t:Train| eventually (no t.pos and one t.pos':>Entry))
inv9 B:     │                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train| eventually ( one t.pos':>Entry))
inv9 B:     │                                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train| eventually ( one t.pos:>Entry))
inv9 B:     │                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train| eventually (no t.pos and after one t.pos:>Entry))
inv9 B:     │                                                                                                                                                                                                                                                                                                                                           └──  (all t:Train| eventually (no t.pos and after one t.pos:>Entry))
inv9 O:     │                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train| eventually (historically no t.pos and after one t.pos:>Entry))
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  (historically no t.pos and after one t.pos:>Entry))
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|  (no t.pos and after one t.pos:>Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                           └──  eventually  always (all t:Train|  (no t.pos and after one t.pos:>Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train|  once(no t.pos and after one t.pos:>Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                   └──  always  (all t:Train|  once(no t.pos and after one t.pos:>Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                       └──  always  (all t:Train|  once(no t.pos => after one t.pos:>Entry) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                           └──  always  (all t:Train|  once(no t.pos and after one t.pos:>Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                               └──  always  (all t:Train|  eventually (no t.pos => after one t.pos:>Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  eventually (no t.pos => after one t.pos:>Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                       └──  (all t:Train|  eventually (no t.pos and after one t.pos:>Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                                           └──  (all t:Train|  eventually ( one t.pos:>Entry) )
inv9 U:     │                                                                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train|  eventually ( some t.pos and one t.pos:>Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  eventually ( before no t.pos and one t.pos:>Entry) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                       └──  (all t:Train|  eventually ( no t.pos and after ( one t.pos:>Entry)) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                           └──  always(all t:Train|  eventually ( no t.pos and after ( one t.pos:>Entry)) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                               └──  always(all t:Train|  eventually ( before no t.pos and after ( one t.pos:>Entry)) )
inv9 O:     │                                                                                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  eventually always  ( no t.pos and after ( one t.pos:>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                       └──  (all t:Train|  no t.pos => eventually ( one t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                           └──  (all t:Train|  no t.pos => after ( one t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train|  no t.pos  after ( one t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  (no t.pos  after ( one t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  (all t:Train|  (no t.pos  after  one (t.pos':>Entry)  )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  (all t:Train| eventually (no t.pos  after  one (t.pos':>Entry))
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  (all t:Train| eventually (no t.pos  after  one (t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  (all t:Train|  (no t.pos  after  one (t.pos':>Entry)) )
inv9 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|  (no t.pos  after  one (t.pos':>Entry)) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always (all t:Train|  (no t.pos =>  one (t.pos':>Entry)) )
inv9 B:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train| eventually (no t.pos =>  one (t.pos':>Entry)) )
inv5 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train|(one t.pos:> Exit => no t.pos)  or (one t.pos  => t.pos' in t.pos.prox  )
inv5 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|(one t.pos:> Exit => no t.pos)  or (one t.pos  => t.pos' in t.pos.prox  )
inv5 B:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always (all t:Train|(one t.pos:> Exit => no t.pos)  or (one t.pos  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train|(one t.pos:> Exit => no t.pos)  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) )
inv5 B:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) or pos'=pos )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  always (all t:Train|(one t.pos:> Exit => no t.pos') or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) or  no t.pos.prox  => (no t.pos' or t.pos=t.pos')   )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └──  always (all t:Train|(one t.pos:> Exit => no t.pos') or (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox  ) or  no t.pos.prox  => (no t.pos' or t.pos=t.pos')   )
inv5 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └──  always (all t:Train|(one t.pos:> Exit => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) always (all t:Train| no t.pos.prox  => (no t.pos' or t.pos'=t.pos)   )
inv5 B:     │└──  always (all t:Train|(one t.pos:> Exit => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) ) always (all t:Train| no t.pos.prox  => (no t.pos' or t.pos'=t.pos) )
inv5 B:     │└──  always (all t:Train|(one t.pos:> Exit => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) ) always (all t:Train| (no t.pos.prox and one t.pos:> Track-Exit)  => (no t.pos' or t.pos'=t.pos) )
inv5 B:     │└──  always (all t:Train|(one t.pos:> Exit => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) ) always (all t:Train| (no t.pos.prox and one t.pos:> Track-Exit) => (no t.pos' or t.pos'=t.pos) )
inv5 B:     │└──  always (all t:Train|(one t.pos:> Exit and  some t.pos.prox  => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) )
inv5 S:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|(one t.pos:> Exit and  some t.pos.prox  => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => (t.pos' in t.pos.prox or t.pos=t.pos') )
inv5 S:     │└──  always (all t:Train|(one t.pos:> Exit and  some t.pos.prox  => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox  => (t.pos' in t.pos.prox or t.pos'=t.pos) )
inv5 U:     │└──  always (all t:Train|(one t.pos:> Exit and  some t.pos.prox  => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox ) => (t.pos' in t.pos.prox or t.pos'=t.pos) )
inv5 B:     │└──  always (all t:Train|(one t.pos:> Exit  => no t.pos')) always (all t:Train| (one t.pos and some t.pos.prox ) => (t.pos' in t.pos.prox or t.pos'=t.pos) )
inv5 U:     │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └──  always (all t:Train|(one t.pos:> Exit  => no t.pos')) or always (all t:Train| (one t.pos and some t.pos.prox ) => (t.pos' in t.pos.prox or t.pos'=t.pos) )
inv17 B:    │└──  one Train.pos:>Exit  since one pos
inv17 B:    │└──  some pos => one Train.pos:>Exit  since one pos
inv17 B:    │└──  some Train => (one Train.pos:>Exit  since one pos)
inv17 B:    │└──  always (some Train => (one Train.pos:>Exit  since one pos))
inv17 B:    │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └──  some Train => (one Train.pos:>Exit  since one pos)
jHTTv4wSaqrWgZAJZ M:     │└──  user added theme options. same as previous submission
XF6HfRpwuibbwNRmW M:     │└──  user added theme options. same as previous submission
inv1 S:     ├──  Track.signal not in Red
inv1 B:     │   └──  Track.signal not in Green
inv1 O:     │       └──  all t : Track | t.signal not in Green
inv1 U:     │           └──  all t : Track | iden in iden
inv1 O:     │               └──  all t : Track | t.signal not in Green
inv1 C:     │                   └──  no Signal & Green
inv1 C:     │                       └──  no Signal & Green
inv1 C:     │                           └──  no Signal & Green
inv2 O:     │                               └──  always all s : Signal | eventually s in Green
inv2 C:     │                                   └──  all s : Signal | eventually s in Green
inv3 C:     │                                       └──  always all t : Train | t.pos = t.pos'
inv4 O:     │                                           └──  always all disj t, t2 : Train | t.pos != t2.pos
inv4 C:     │                                               └──  always all disj t, t2 : Train | some (t.pos) => t.pos != t2.pos
inv4 C:     │                                                   └──  always all disj t, t2 : Train | some (t.pos + t2.pos) => t.pos != t2.pos
inv1 C:     ├──  all s : Signal | s not in Green
inv1 C:     │   └──  no Green
inv2 O:     │       └──  eventually all s : Signal | s in Green
inv2 O:     │           └──  always all s : Signal | eventually s in Green
inv2 S:     │               └──  s : Signal | eventually s in Green
inv2 C:     │                   └──  all s : Signal | eventually s in Green
inv3 S:     │                       └──  all t : Train | always lone f.pos
inv3 U:     │                           └──  all t : Train | always lone t.pos
inv3 U:     │                               └──  all t : Train | lone t.pos
inv3 U:     │                                   └──  always all t : Train | always lone t.pos
inv3 B:     │                                       └──  always all t : Train | always one t.pos
inv3 S:     │                                           └──  always all t : Train | always before t.pos = after t.pos
inv3 S:     │                                               └──  always all t : Train | always before t.pos /\ after t.pos
inv3 U:     │                                                   └──  always all t : Train, pos : t.pos | always lone pos
inv4 S:     │                                                       └──  always t1, t2: Train | some t1.pos & t2.pos implies t1 = t2
inv3 U:     │                                                           └──  always all t : Train, pos : t.pos | always lone pos
inv4 S:     │                                                               └──  always t1: Train | t2: Train | some t1.pos & t2.pos implies t1 = t2
inv3 C:     │                                                                   └──  always pos' = pos
inv4 S:     │                                                                       └──  always t1: Train | t2: Train | some t1.pos & t2.pos implies t1 = t2
inv4 S:     │                                                                           └──  always t1: Train | t2: Train | some t1.pos & t2.pos implies t1 = t2
jjhqawSh3QcviHzvc M:     ├──  user added theme options. same as previous submission
inv1 E:     ├──   
inv1 E:     ├──   
inv1 S:     │   └──  as
inv1 E:     │       └──   
inv1 S:     │           └──  a
inv1 S:     │               └──  a
inv1 E:     ├──   
inv1 C:     │   └──  no Green
inv1 S:     ├──  Signal in Red
inv1 B:     │   └──  Signal not in Green
inv1 E:     │       └──   
inv1 O:     │           └──  all t:Track | t.signal not in Green
inv2 O:     │               └──  eventually Signal in Green
inv2 C:     │                   └──  all s:Signal | eventually s in Green
inv3 U:     │                       └──  all t:Train | t.pos'=t.pos
inv3 C:     │                           └──  all t:Train | always t.pos'=t.pos
inv4 U:     │                               └──  all disj t1,t2:Train | no (t1.pos & t2.pos)
inv4 C:     │                                   └──  all disj t1,t2:Train | always no (t1.pos & t2.pos)
inv4 C:     │                                       └──  always all disj t1,t2:Train | no (t1.pos & t2.pos)
inv3 C:     │                                           └──  always all t:Train | t.pos'=t.pos
inv2 O:     │                                               └──  eventually all s:Signal | s in Green
inv2 C:     │                                                   └──  all s:Signal | eventually s in Green
inv3 C:     │                                                       └──  always all t:Train | t.pos'=t.pos
inv4 C:     │                                                           └──  always all disj t1,t2:Train | no (t1.pos & t2.pos)
inv5 E:     │                                                               └──   
inv5 B:     │                                                                   └──  all t:Train | t.pos in Entry implies after t.pos in t.pos.prox
inv6 S:     │                                                                       └──  all s:Signal | s'=!s
inv6 S:     │                                                                           └──  all s:Signal | s'=no s
inv1 S:     │                                                                               └──  None
inv1 S:     │                                                                                   └──  None
inv1 S:     │                                                                                       └──  None
inv1 S:     │                                                                                           └──  None
inv1 E:     │                                                                                               └──   
inv1 E:     │                                                                                                   └──   
inv1 E:     ├──   
inv1 C:     │   └──  no Green
inv2 C:     │       └──  all s:Signal | eventually s in Green
inv4 T:     │           └──  always (Train.pos).~(Train.pos) in iden
inv4 T:     │               └──  always (Train.pos).(~Train.pos) in iden
inv4 C:     │                   └──  always (pos).(~pos) in iden
inv1 C:     ├──  no Green
inv1 C:     │   └──  historically no Green
inv1 C:     │       └──  no Green
inv1 C:     │           └──  no Green
inv2 C:     │               └──  all s:Signal | eventually s in Green
inv3 C:     │                   └──  always all t:Train | t.pos' = t.pos
inv4 C:     │                       └──  always all disj t1,t2:Train | no (t1.pos & t2.pos )
inv5 B:     │                           └──  always (all t:Train |t.pos in Entry  implies  (t.pos'= t.pos.prox)   or  t.pos in Exit implies no t.pos')
inv5 B:     │                               └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  t.pos.^prox)   or  t.pos in Exit implies no t.pos')
inv5 S:     │                                   └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox)<:Exit   or  t.pos in Exit implies no t.pos')
inv5 S:     │                                       └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  ((t.pos.^prox)<:Exit)   or  t.pos in Exit implies no t.pos')
inv5 S:     │                                           └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox)  or  t.pos in Exit implies no t.pos')
inv5 B:     │                                               └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos in Exit implies no t.pos')
inv5 B:     │                                                   └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos in Exit implies no t.pos')
inv6 U:     │                                                       └──  always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or always s not in Green implies  eventually (s in  Green) )
inv5 B:     │                                                           └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos in Exit implies no t.pos')
inv5 B:     │                                                               └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos.prox in Exit implies no t.pos')
inv5 B:     │                                                                   └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos in Exit implies no t.pos')
inv5 B:     │                                                                       └──  always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.prox) ) or  t.pos in Exit implies no t.pos')
inv5 S:     │                                                                           └──  all t:Train |{ always (t.pos in Exit implies no t.pos') always (t.pos in Entry  implies  (t.pos'in  (t.pos.prox) )
inv5 B:     │                                                                               └──  all t:Train |{ always (t.pos in Exit implies no t.pos') always (t.pos in Entry  implies  (t.pos'in  (t.pos.prox) ))
inv5 B:     │                                                                                   └──  all t:Train |{ always (t.pos in Exit implies  t.pos'= t.pos) always (t.pos in Entry  implies  (t.pos'in  (t.pos.prox) ))
inv5 B:     │                                                                                       └──  all t:Train |{ always (t.pos in Exit implies  t.pos'= t.pos)
inv5 B:     │                                                                                           └──  all t:Train |{ always (t.pos in Exit implies  no t.pos')
inv5 B:     │                                                                                               └──  all t:Train |{ always (t.pos in Exit implies   t.pos'= t.pos)
inv5 B:     │                                                                                                   └──  all t:Train |{ always (t.pos in Exit implies   t.pos'=none)
inv5 B:     │                                                                                                       └──  all t:Train |{ always (t.pos in Exit implies   t.pos'=t.pos)
inv5 B:     │                                                                                                           └──  all t:Train |{ always (t.pos in Exit implies no t.pos')
inv5 B:     │                                                                                                               └──  all t:Train |{ always (t.pos in Exit implies no t.pos') always (t.pos in Track-Exit  implies  (t.pos'in  (t.pos.prox) ))
inv5 B:     │                                                                                                                   └──  all t:Train |{ always (t.pos in Exit implies  t.pos'= t.pos)
inv5 B:     │                                                                                                                       └──  all t:Train |{ always (t.pos in Exit implies  t.pos'= t.pos)
inv5 B:     │                                                                                                                           └──  all t:Train |{ always (t.pos in Exit implies  no t.pos')
inv5 B:     │                                                                                                                               └──  all t:Train |{ always (t.pos in Exit implies  no t.pos')
inv5 B:     │                                                                                                                                   └──  all t:Train |{ always (t.pos in Exit implies  no t.pos')
inv1 C:     ├──  no Green
inv2 S:     │   └──  eventually (Green = Signal
inv2 O:     │       └──  eventually (Green = Signal)
inv2 C:     │           └──  all s : Signal | eventually s in Green
inv3 U:     │               └──  all t : Train | t.pos = t.pos'
inv4 C:     │                   └──  always (all t : Track | lone pos.t)
inv6 B:     │                       └──  always (no Green & Green')
inv6 T:     │                           └──  always all s : Signal | Green
inv3 U:     │                               └──  all t : Train | t.pos = t.pos'
inv3 S:     │                                   └──  always (t : Train | t.pos = t.pos')
inv3 C:     │                                       └──  always (all t : Train | t.pos = t.pos')
inv6 U:     │                                           └──  always (all s : Signal | s in Green implies s not in Green' or s not in Green implies s in Green')
inv6 O:     │                                               └──  always Green' = Signal - Green
inv7 S:     │                                                   └──  
inv6 O:     │                                                       └──  always Green' = Signal - Green
inv6 S:     │                                                           └──  always (all s : Signal | (s in Green implies eventually s not in Green) or (s not in Green implies s eventually s in Green))
inv6 S:     │                                                               └──  always (all s : Signal | (s in Green implies eventually s not in Green) or (s not in Green implies s eventually s in Green))
inv6 S:     │                                                                   └──  always all s : Signal | (s in Green implies eventually s not in Green) or (s not in Green implies s eventually s in Green)
inv6 S:     │                                                                       └──  always all s : Signal | (s in Green implies (eventually s not in Green)) or (s not in Green implies s eventually s in Green)
inv6 S:     │                                                                           └──  always (all s : Signal | (s in Green implies (eventually s not in Green)) or (s not in Green implies s eventually s in Green) )
inv6 S:     │                                                                               └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green )
inv6 T:     │                                                                                   └──  always all s : Signal { s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green
inv6 T:     │                                                                                       └──  always (all s : Signal { s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green
inv6 S:     │                                                                                           └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green )
inv6 E:     │                                                                                               └──   
inv6 S:     │                                                                                                   └──  always all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green )
inv6 T:     │                                                                                                       └──  always all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green
inv6 S:     │                                                                                                           └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green)
inv6 S:     │                                                                                                               └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies s eventually s in Green))
inv6 S:     │                                                                                                                   └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies eventually s in Green
inv6 U:     │                                                                                                                       └──  always (all s : Signal | s in Green implies eventually s not in Green or s not in Green implies eventually s in Green)
inv6 U:     │                                                                                                                           └──  always (all s : Signal | (s in Green implies (eventually s not in Green)) or s not in Green implies (eventually s in Green))
inv6 B:     │                                                                                                                               └──  always (eventually Green not in Green')
inv6 U:     │                                                                                                                                   └──  all s : Signal | eventually (s in Green or s not in Green)
inv1 C:     ├──  no Green
inv2 C:     │   └──  all s: Signal | eventually s in Green
inv3 C:     │       └──  always pos' = pos
inv4 C:     │           └──  always pos.~pos in iden
inv5 B:     │               └──  always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox
inv1 T:     ├──  all s: Signal | no s.Green
inv1 C:     │   └──  all s: Signal | no Green
inv1 C:     │       └──  no Green
inv2 S:     │           └──  all Signal in Green
inv3 E:     │               └──   
inv3 B:     │                   └──  one Train.pos
inv1 S:     ├──  None
inv1 S:     │   └──  None
inv1 S:     │       └──  None
inv1 S:     │           └──  Track.signal = Red
inv1 S:     │               └──  None
inv1 C:     │                   └──  no Green
inv2 O:     │                       └──  all g : Signal | eventually g = Green
inv2 O:     │                           └──  all g : Signal |always( eventually g = Green )
inv2 O:     │                               └──  all g : Track.signal | eventually g = Green
inv2 O:     │                                   └──  all g : Track.signal | no (g & Green) implies eventually g = Green
inv2 O:     │                                       └──  always ( all g : Signal | eventually g=Green)
inv2 S:     │                                           └──  always ( all s : Track.signal | eventually g=Green)
inv2 O:     │                                               └──  always ( all s : Track.signal | eventually s=Green)
inv2 O:     │                                                   └──  always ( all s : Signal | eventually s=Green)
inv2 O:     │                                                       └──  all s : Signal | eventually s=Green
inv3 B:     │                                                           └──  no prox
inv3 U:     │                                                               └──  no Train.prox
inv3 B:     │                                                                   └──  all t : Train , x : t.pos | no x.prox
inv3 B:     │                                                                       └──  no Track.prox
inv3 B:     │                                                                           └──  no prox.Track.prox
inv3 B:     │                                                                               └──  always(no Track.prox)
inv3 B:     │                                                                                   └──  always no prox
inv3 B:     │                                                                                       └──  no Entry.prox and no Exit.prox and no Track.prox
inv3 B:     │                                                                                           └──  no prox
inv3 B:     │                                                                                               └──  always (no prox)
inv4 S:     │                                                                                                   └──  lone
inv4 S:     │                                                                                                       └──  lone
inv3 B:     │                                                                                                           └──  always (no Track.prox and no prox.Track)
inv3 O:     │                                                                                                               └──  always (no Track.*prox)
inv3 B:     │                                                                                                                   └──  always (no Track.^prox)
inv3 B:     │                                                                                                                       └──  always (no Track.prox)
inv3 O:     │                                                                                                                           └──  no prox and no Entry and no Exit
inv4 B:     │                                                                                                                               └──  lone Train.pos
inv4 B:     │                                                                                                                                   └──  always(lone Train.pos)
inv4 U:     │                                                                                                                                       └──  always(lone pos.Train)
inv4 S:     │                                                                                                                                           └──  all t : Train | always (lone.t)
inv4 U:     │                                                                                                                                               └──  all t : Train | always (lone t.pos)
inv4 U:     │                                                                                                                                                   └──  all t : Train | always (lone pos.t)
inv4 U:     │                                                                                                                                                       └──  all disj t : Train | always (lone pos.t)
inv4 O:     │                                                                                                                                                           └──  all t1,t2 : Train | always no (t1.pos & t2.pos)
inv4 O:     │                                                                                                                                                               └──  all t1,t2 : Train | always ( no (t1.pos & t2.pos) and t1.prox not in t2.pos)
inv4 O:     │                                                                                                                                                                   └──  all t1,t2 : Train | always  no (t1.pos & t2.pos)
inv4 O:     │                                                                                                                                                                       └──  all t1,t2 : Train | always  no (t1.pos & t2.pos)
inv5 B:     │                                                                                                                                                                           └──  all t:Train | t.pos' in t.pos.prox
inv4 S:     ├──  always all t = Track | lone (t.~pos)
inv4 S:     │   └──  always all t = Track | lone (t.~pos)
inv1 C:     │       └──  no Green
inv2 C:     │           └──  all s : Signal | eventually s in Green
inv3 C:     │               └──  always pos' = pos
inv4 S:     │                   └──  all t = Track | lone (t.~pos)
inv1 E:     ├──   
inv1 C:     ├──  (some s:Signal | s in Green) since (historically (all s:Signal | s not in Green))
inv2 C:     │   └──  (all s:Signal | eventually s in Green)
inv3 C:     ├──  all t : Train | always t.pos = t.pos'
inv3 O:     ├──  always no pos
inv3 O:     │   └──  always(no pos)
inv1 T:     ├──  signal not in Green
inv1 B:     │   └──  Track.signal not in Green
inv1 C:     │       └──  no Green
inv2 O:     │           └──  eventually all s: Signal | s in Green
inv2 O:     │               └──  always all s: Signal | eventually s in Green
inv2 C:     │                   └──  all s: Signal | eventually s in Green
inv3 T:     │                       └──  always all t: Train | (before t.pos) = t.pos
inv3 T:     │                           └──  always all t: Train | (before t.pos) = (after t.pos)
inv3 T:     │                               └──  always all t: Train | t.pos implies after t.pos
inv3 S:     │                                   └──  always all t: Train | {let x = t.pos
inv3 T:     │                                       └──  always all t: Train | {let x = t.pos | Train
inv3 T:     │                                           └──  always all t: Train | {let x = t.pos | t
inv3 S:     │                                               └──  all t: Train | always t.pos = x
inv3 T:     │                                                   └──  all t: Train | always t.pos
inv4 S:     │                                                       └──  let T=Train.pos
inv4 S:     │                                                           └──  let T=[Train.pos]
inv3 S:     │                                                               └──  trains = {all t: Train | t.pos
inv3 S:     │                                                                   └──  always trains = {all t: Train | t.pos
inv3 S:     │                                                                       └──  always trains = {all t: Train | t
inv3 U:     │                                                                           └──  all t,tt:Track | t->tt in prox implies always t->tt in prox
inv3 S:     │                                                                               └──  all t: Train tt: Track | t->tt in pos implies always t->tt in pos
inv3 U:     │                                                                                   └──  all t: Train, tt: Track | t->tt in pos implies always t->tt in pos
inv3 U:     │                                                                                       └──  always all t: Train, tt: Track | t->tt in pos implies always t->tt in pos
inv3 C:     │                                                                                           └──  always pos' = pos
inv3 C:     │                                                                                               └──  always pos' = pos
inv4 C:     │                                                                                                   └──  always pos.~pos in iden
inv5 B:     │                                                                                                       └──  always all t: Train | (t'.pos in t.prox) or (t.pos in Exit implies Train' = Train -t)
inv5 O:     │                                                                                                           └──  always all t: Train | (t'.pos in t.prox)
inv1 E:     ├──   
inv2 E:     │   └──   
inv1 E:     │       └──   
inv1 T:     ├──  always Signal not Green
inv1 B:     │   └──  always Signal not in Green
inv1 C:     │       └──  no Green
inv2 O:     │           └──  eventually (all s : Signal | s in Green)
inv2 C:     │               └──  all s : Signal | eventually s in Green
inv3 O:     │                   └──  no Track
inv3 O:     │                       └──  always no Track
inv3 O:     │                           └──  always no Train
inv3 U:     │                               └──  always no Train & Track
inv3 U:     │                                   └──  always (all t : Train | t not in Track)
inv3 T:     │                                       └──  always Train
inv3 O:     │                                           └──  always no Train
inv3 C:     │                                               └──  all t : Train | always t.pos' = t.pos
inv4 O:     │                                                   └──  all t1, t2 : Train | always t1.pos != t2.pos
inv1 C:     ├──  no Green
inv2 O:     │   └──  eventually (all s:Signal | s in Green)
inv2 C:     │       └──  all s:Signal | eventually s in Green
inv3 S:     │           └──  always ()
inv3 S:     │               └──  always ()
inv4 C:     │                   └──  always (pos.(~pos) in iden)
inv4 C:     │                       └──  always (pos.(~pos) in iden)
inv3 C:     │                           └──  always (all t:Train | (t.pos)' = t.pos)
inv9 U:     │                               └──  eventually (all t:Train | t.pos in Entry)
inv9 U:     │                                   └──  all t:Train | eventually t.pos in Entry
inv9 U:     │                                       └──  all t:Train | some t.pos implies eventually t.pos in Entry
inv9 B:     │                                           └──  all t:Train | some t.pos and eventually t.pos in Entry
inv10 C:    │                                               └──  always (all j:Junction | lone ((prox.j).signal&Green))
inv11 S:    │                                                   └──  always (t:Train | one t.pos implies once t.pos in Entry)
inv11 U:    │                                                       └──  always (all t:Train | one t.pos implies once t.pos in Entry)
inv11 U:    │                                                           └──  all t:Train | always one t.pos implies once t.pos in Entry
inv15 B:    │                                                               └──  all t:Train | eventually (t.pos)' != t.pos
inv15 U:    │                                                                   └──  all t:Train | one t.pos implies eventually (t.pos)' != t.pos
inv15 U:    │                                                                       └──  all t:Train | always one t.pos implies eventually (t.pos)' != t.pos
inv14 S:    │                                                                           └──  always (all t:Train )
inv4 C:     │                                                                               └──  always (pos.(~pos) in iden)
inv5 S:     │                                                                                   └──  always (all t:pos.Track | (t.pos)' in t.pos.next
inv7 C:     │                                                                                       └──  always (all t:pos.Track | eventually no t.pos)
inv7 C:     │                                                                                           └──  always (all t:pos.Track | eventually no t.pos)
inv7 C:     │                                                                                               └──  always (all t:pos.Track | eventually no t.pos)
inv6 C:     │                                                                                                   └──  always (all s:Signal | (s in Green implies eventually s not in Green) and (s not in Green implies eventually s in Green))
inv8 S:     │                                                                                                       └──  always ( all t:pos.Track.(signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green
inv8 T:     │                                                                                                           └──  always ( all t:pos.Track.(signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv8 T:     │                                                                                                               └──  always ( all t:pos.Track.(Signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv8 T:     │                                                                                                                   └──  always ( all t:pos.Track.signal.(Signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv9 U:     │                                                                                                                       └──  eventually (all t:Train | t.pos in Entry)
inv11 U:    │                                                                                                                           └──  always (all t:pos.Track | once t.pos in Entry)
inv11 U:    │                                                                                                                               └──  always (all t:pos.Track | once (t.pos in Entry))
inv15 B:    │                                                                                                                                   └──  always eventually (some t:Train | (t.pos)' != t.pos)
inv15 B:    │                                                                                                                                       └──  always eventually (some t:pos.Track | (t.pos)' != t.pos)
inv15 B:    │                                                                                                                                           └──  always eventually (some t:Train | (t.pos)' != t.pos)
inv16 U:    │                                                                                                                                               └──  always (all t:pos.Exit | (some t.pos) since t.pos in Entry)
inv1 C:     ├──  no Green
inv2 C:     │   └──  all s : Signal | eventually s in Green
inv3 C:     │       └──  always pos = pos'
inv4 C:     │           └──  all t : Track | always lone t.~pos
inv5 B:     │               └──  always all t : Train { (t.pos = Exit) implies no t.pos' or (one t.pos) implies (t.pos' in t.pos.prox)
inv6 B:     │                   └──  no (Green & Green')
inv6 B:     │                       └──  always no (Green & Green')
inv6 O:     │                           └──  always (Signal-Green = Green')
inv6 O:     │                               └──  always ((Signal-Green = Green') and (Green = Signal'-Green'))
inv7 U:     │                                   └──  all t : Train | eventually no t.pos
inv7 U:     │                                       └──  all t : Train | (some t.pos) implies (eventually no t.pos')
inv7 O:     │                                           └──  all t : Train | (eventually always no t.pos')
inv7 O:     │                                               └──  all t : Train | (eventually always no t.pos)
inv7 B:     │                                                   └──  all t : Train | one t.pos implies (eventually always no t.pos')
inv7 O:     │                                                       └──  all t : Train | (eventually always no t.pos')
inv7 O:     │                                                           └──  all t : Train | (eventually always no t.pos)
inv6 O:     │                                                               └──  always ((Signal-Green = Green') and (Green = (Signal-Green)'))
inv6 U:     │                                                                   └──  always all s : Signal { ((s in Green) implies (eventually s not in Green)) or ((s not in Green) implies (eventually s in Green))
inv8 S:     │                                                                       └──  always all t : ((Signal-Green).(~signal).(~pos)) | (t.pos' in t.pos.prox) after (t.pos.signal in Green)
inv8 S:     │                                                                           └──  always all t : ((Signal-Green).(~signal).(~pos)) | (t.pos' in t.pos.prox) after (t.pos.signal in Green)
inv8 U:     │                                                                               └──  always all t : ((Signal-Green).(~signal).(~pos)) | (t.pos' in t.pos.prox) implies (t.pos.signal in Green)
inv15 C:    │                                                                                   └──  always all t : Train | some t.pos implies eventually t.pos != t.pos'
inv13 O:    │                                                                                       └──  always all t : Train | no t.pos implies always no t.pos
inv13 O:    │                                                                                           └──  always all t : Train | no t.pos implies always no t.pos'
inv13 O:    │                                                                                               └──  always all t : Train | no t.pos implies always no t.pos
inv13 T:    │                                                                                                   └──  always all t : Train | (t.pos and no t.pos') implies (always no t.pos')
inv13 C:    │                                                                                                       └──  always all t : Train | (one t.pos and no t.pos') implies (always no t.pos')
inv16 B:    │                                                                                                           └──  always all t : Train | (t.pos = Exit) implies ((always some t.pos) since (t.pos = Entry))
inv8 U:     │                                                                                                               └──  always all t : ((Signal-Green).(~signal).(~pos)) | (t.pos' in t.pos.prox) implies (t.pos.signal in Green)
inv7 O:     │                                                                                                                   └──  all t : Train | (eventually always no t.pos)
inv6 U:     │                                                                                                                       └──  always all s : Signal { ((s in Green) implies (eventually s not in Green)) or ((s not in Green) implies (eventually s in Green))
inv5 B:     │                                                                                                                           └──  always all t : Train { (t.pos = Exit) implies no t.pos' or (one t.pos) implies (t.pos' in t.pos.prox)
inv1 C:     ├──  no Green
inv2 S:     │   └──  all s : Sinal | eventually s in Green
inv2 C:     │       └──  all s : Signal | eventually s in Green
inv3 C:     │           └──  always pos = pos'
inv4 B:     │               └──  all disj s1, s2 : Signal | s1.pos != s2.pos
inv4 B:     │                   └──  all disj s1, s2 : Signal | always s1.pos != s2.pos
inv4 B:     │                       └──  all disj s1, s2 : Signal-Entry | always s1.pos != s2.pos
inv4 B:     │                           └──  all disj s1, s2 : (Signal-(Entry+Exit)) | always s1.pos != s2.pos
inv4 O:     │                               └──  all disj t1, t2 : Train | always t1.pos != t2.pos
inv1 C:     │                                   └──  no Green
inv2 C:     │                                       └──  all s : Signal | eventually s in Green
inv3 C:     │                                           └──  always pos = pos'
inv4 O:     │                                               └──  all disj t1, t2 : Train | always t1.pos != t2.pos
inv4 C:     │                                                   └──  all t : Track | always lone t.~pos
inv5 B:     │                                                       └──  all t : Train { ((t.pos = Exit) implies (no t.pos')) or (t.pos' in t.pos.prox)
inv5 B:     │                                                           └──  always all t : Train { ((t.pos = Exit) implies (no t.pos')) or (t.pos' in t.pos.prox)
inv6 O:     │                                                               └──  always no (signal & signal')
inv6 O:     │                                                                   └──  all t : Track | always t.signal != t.signal'
inv6 O:     │                                                                       └──  all t : Track | always ((some t.signal) implies (t.signal != t.signal'))
inv4 C:     │                                                                           └──  all t : Track | always lone t.~pos
inv5 B:     │                                                                               └──  always all t : Train { ((t.pos = Exit) implies (no t.pos')) or (t.pos' in t.pos.prox)
inv6 O:     │                                                                                   └──  all t : Track | always ((some t.signal) implies (t.signal != t.signal'))
inv7 B:     │                                                                                       └──  eventually all t : Train | t.pos = Exit
inv7 B:     │                                                                                           └──  eventually all t : Train | no t.pos
inv7 U:     │                                                                                               └──  all t : Train | eventually no t.pos
inv7 O:     │                                                                                                   └──  all t : Train | eventually always no t.pos
inv7 O:     │                                                                                                       └──  all t : Train | eventually (always no t.pos)
inv7 O:     │                                                                                                           └──  eventually all t : Train | (always no t.pos)
inv7 B:     │                                                                                                               └──  eventually all t : Train | (t.pos = Exit) implies (no t.pos')
inv9 B:     │                                                                                                                   └──  all t : Train | eventually t.pos = Entry
inv15 B:    │                                                                                                                       └──  all t : Train | eventually t.pos != t.pos'
inv15 U:    │                                                                                                                           └──  all t : Train | (some t.pos) implies (eventually t.pos != t.pos')
inv1 B:     ├──  all t:Track | once t.signal != Green
inv1 S:     │   └──  all t:Track | once Green no in t.signal
inv1 B:     │       └──  all t:Track | once Green not in t.signal
inv1 B:     │           └──  always(all t:Track | once(Green not in t.signal))
inv1 B:     │               └──  once (all t:Track | t.signal = Green implies (before t.signal != Green))
inv1 B:     │                   └──  once (all t:Track | Green in t.signal implies (before Green not in t.signal))
inv1 B:     │                       └──  always (all t:Track&Entry | Green not in t.signal)
inv1 B:     │                           └──  always (all t:Track&Entry | always Green not in t.signal)
inv1 B:     │                               └──  always (all t:Track&Entry | once Green not in t.signal)
inv1 B:     │                                   └──  once (all t:Track&Entry | Green not in t.signal)
inv1 B:     │                                       └──  once (all t:Entry | Green not in t.signal)
inv1 B:     │                                           └──  always (all t:Entry | Green not in t.signal)
inv1 B:     │                                               └──  always (all t:Entry | Green not in signal.t)
inv1 B:     │                                                   └──  always (all t:Entry | Green not in t.signal)
inv1 S:     │                                                       └──  always (all t:track | Green in t.signal since Green not in t.signal)
inv1 B:     │                                                           └──  always (all t:Track | Green in t.signal since Green not in t.signal)
inv1 B:     │                                                               └──  always (all t:Track | Green not in t.signal until (Green in t.signal))
inv1 U:     │                                                                   └──  (all t:Track | Green not in t.signal until (Green in t.signal))
inv1 B:     │                                                                       └──  all t:Track | always (Green not in t.signal until (Green in t.signal))
inv1 S:     │                                                                           └──  all t:Track, g:Green | g not in t.signal until (g in t.signal))
inv1 B:     │                                                                               └──  always (all t:Track, g:Green | g not in t.signal until (g in t.signal))
inv2 B:     │                                                                                   └──  eventually (all t:Track | Green in t.signal)
inv2 B:     │                                                                                       └──  eventually (all t:Track | eventually Green in t.signal)
inv2 B:     │                                                                                           └──  eventually (all s:Signal | eventually Green in s)
inv2 B:     │                                                                                               └──  eventually (all s:Signal | Green in s)
inv2 U:     │                                                                                                   └──  eventually (Green in Signal)
inv2 T:     │                                                                                                       └──  eventually Green&Signal
inv2 S:     │                                                                                                           └──  eventually all Green&Signal
inv2 B:     │                                                                                                               └──  eventually some Green&Signal
inv6 B:     ├──  all s : Signal | always (no Green' & Green)
inv6 B:     │   └──  all s : Signal | always (s in Green implies s not in Green') or (s not in Green implies s in Green')
inv1 S:     ├──  no Red
inv1 C:     │   └──  no Green
inv2 O:     │       └──  eventually Signal = Green
inv2 O:     │           └──  always(eventually Signal = Green)
inv2 C:     │               └──  all s : Signal - Green | eventually s in Green
inv3 B:     │                   └──  no pos
inv3 B:     │                       └──  no Train.pos
inv3 O:     │                           └──  always (no Train.pos)
inv3 U:     │                               └──  Train.pos' = Train.pos
inv3 U:     │                                   └──  always (Train.pos' = Train.pos)
inv3 U:     │                                       └──  all t : Train , p : t.pos | always (t.pos = p)
inv3 U:     │                                           └──  always(all t : Train , p : t.pos | always (t.pos = p))
inv3 B:     │                                               └──  no Train.pos.prox
inv3 B:     │                                                   └──  always (no Train.pos.prox)
inv3 C:     │                                                       └──  always(all t : Train  | always (t.pos' = t.pos))
inv4 U:     │                                                           └──  pos.~pos in iden
inv4 T:     │                                                               └──  Train.pos.~pos in iden
inv4 T:     │                                                                   └──  all t : Train, p : t.pos | pos.~p in iden
inv4 T:     │                                                                       └──  all t : Train | t.~pos in iden
inv4 T:     │                                                                           └──  all t : Train | t.pos.~pos in iden
inv4 T:     │                                                                               └──  Train.pos in iden
inv4 T:     │                                                                                   └──  all t : Train | t.pos in iden
inv4 T:     │                                                                                       └──  all t : Train | t.~pos in iden
inv4 B:     │                                                                                           └──  all t1,t2 : Train | no (t1.pos & t2.pos)
inv4 O:     │                                                                                               └──  always (all t1,t2 : Train | no (t1.pos & t2.pos))
inv4 C:     │                                                                                                   └──  always (all disj t1,t2 : Train | no (t1.pos & t2.pos))
inv4 C:     │                                                                                                       └──  always (all disj t1,t2 : Train | no (t1.pos & t2.pos))
inv5 B:     │                                                                                                           └──  all t : Train.pos | some (t & Exit) implies  no t'
inv5 B:     │                                                                                                               └──  all t : Train | some (t.pos & Exit) implies  Train' = Train - t
inv5 B:     │                                                                                                                   └──  all t : Train | some (t.pos & Exit) implies  Train' = (Train - t) else( t.pos' in t.pos.prox)
inv5 T:     │                                                                                                                       └──  all t : Train | some (t.pos & Exit) implies  Train' = (Train - t) else( t.pos' & t.pos.prox)
inv5 S:     │                                                                                                                           └──  all t : Train | some (t.pos & Exit) implies  Train' = (Train - t) ( else( t.pos' & t.pos.prox))
inv5 S:     │                                                                                                                               └──  all t : Train | some (t.pos & Exit) implies  Train' = (Train - t)  else( t.pos' & t.pos.prox))
inv5 T:     │                                                                                                                                   └──  all t : Train | some (t.pos & Exit) implies  Train' = (Train - t)  else( t.pos' & t.pos.prox)
inv5 T:     │                                                                                                                                       └──  all t : Train | some (t.pos & Exit) implies  (Train' = (Train - t) and no t.pos')  else( t.pos' & t.pos.prox)
inv5 T:     │                                                                                                                                           └──  all t : Train | no (t.pos & Exit) implies (t.pos' & t.pos.prox)
inv5 B:     │                                                                                                                                               └──  all t : Train | no (t.pos & Exit) implies (t.pos' in t.pos.prox)
inv5 B:     │                                                                                                                                                   └──  all t : Train | no (t.pos & Exit) implies (t.pos' in t.pos.prox) else (Train' = Train - t)
inv5 B:     │                                                                                                                                                       └──  all t : Train | t.pos' != t.pos
inv5 S:     │                                                                                                                                                           └──  all t : Train | t.pos' != t.pos | no Green
inv5 B:     │                                                                                                                                                               └──  all t : Train | t.pos' != t.pos implies t.pos' in t.pos.prox
inv5 B:     │                                                                                                                                                                   └──  all t : Train | t.pos' != t.pos and no (t.pos & Exit) implies (t.pos' in t.pos.prox)
inv5 B:     │                                                                                                                                                                       └──  all t : Train | t.pos' != t.pos and no (t.pos & Exit) implies (t.pos' in t.pos.prox) all t : Train | t.pos' != t.pos implies Train' = Train - t
inv6 O:     │                                                                                                                                                                           └──  all t : Track |always( t.signal' != t.signal)
inv6 O:     │                                                                                                                                                                               └──  all s : Signal | no (s & Green) implies s' = Green else s' not in Green
inv6 O:     │                                                                                                                                                                                   └──  all  s : Signal | always (no (s & Green) implies s' = Green else s' not in Green)
inv6 O:     │                                                                                                                                                                                       └──  always (all  s : Signal |  no (s & Green) implies s' = Green else s' not in Green)
inv6 B:     │                                                                                                                                                                                           └──  always (all  s : Signal |  no (s & Green) implies s' = Green else s'!=Green)
inv6 O:     │                                                                                                                                                                                               └──  always (all  s : Signal |  no (s & Green) implies s'  in  Green else s' not in Green)
inv4 O:     ├──  always all disj t1, t2 : Train | t1.pos != t2.pos
inv4 C:     │   └──  always all t : Track| lone (t.~pos)
inv7 C:     └──  always (all t:Train | some t.pos implies eventually no t.pos)
